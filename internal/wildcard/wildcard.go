//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard

func MatchSimple(pattern, name string) bool {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_a := make([]rune, 0, len(name))
	_d := make([]rune, 0, len(pattern))
	for _, _af := range name {
		_a = append(_a, _af)
	}
	for _, _gb := range pattern {
		_d = append(_d, _gb)
	}
	_gbd := true
	return _dg(_a, _d, _gbd)
}
func _fe(_eed, _bc []rune, _gbc int) int {
	for len(_bc) > 0 {
		switch _bc[0] {
		default:
			if len(_eed) == 0 {
				return -1
			}
			if _eed[0] != _bc[0] {
				return _fe(_eed[1:], _bc, _gbc+1)
			}
		case '?':
			if len(_eed) == 0 {
				return -1
			}
		case '*':
			if len(_eed) == 0 {
				return -1
			}
			_df := _fe(_eed, _bc[1:], _gbc)
			if _df != -1 {
				return _gbc
			} else {
				_df = _fe(_eed[1:], _bc, _gbc)
				if _df != -1 {
					return _gbc
				} else {
					return -1
				}
			}
		}
		_eed = _eed[1:]
		_bc = _bc[1:]
	}
	return _gbc
}
func Match(pattern, name string) (_f bool) {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_cf := make([]rune, 0, len(name))
	_e := make([]rune, 0, len(pattern))
	for _, _b := range name {
		_cf = append(_cf, _b)
	}
	for _, _ag := range pattern {
		_e = append(_e, _ag)
	}
	_fb := false
	return _dg(_cf, _e, _fb)
}
func _dg(_ab, _eg []rune, _cc bool) bool {
	for len(_eg) > 0 {
		switch _eg[0] {
		default:
			if len(_ab) == 0 || _ab[0] != _eg[0] {
				return false
			}
		case '?':
			if len(_ab) == 0 && !_cc {
				return false
			}
		case '*':
			return _dg(_ab, _eg[1:], _cc) || (len(_ab) > 0 && _dg(_ab[1:], _eg, _cc))
		}
		_ab = _ab[1:]
		_eg = _eg[1:]
	}
	return len(_ab) == 0 && len(_eg) == 0
}
func Index(pattern, name string) (_db int) {
	if pattern == "" || pattern == "\u002a" {
		return 0
	}
	_cd := make([]rune, 0, len(name))
	_cb := make([]rune, 0, len(pattern))
	for _, _cda := range name {
		_cd = append(_cd, _cda)
	}
	for _, _ff := range pattern {
		_cb = append(_cb, _ff)
	}
	return _fe(_cd, _cb, 0)
}
