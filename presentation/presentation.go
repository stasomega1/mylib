//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation

import (
	_ee "archive/zip"
	_dc "bytes"
	_g "encoding/xml"
	_fdc "errors"
	_ae "fmt"
	_fc "github.com/unidoc/unioffice"
	_fd "github.com/unidoc/unioffice/common"
	_db "github.com/unidoc/unioffice/common/license"
	_b "github.com/unidoc/unioffice/common/tempstorage"
	_eb "github.com/unidoc/unioffice/drawing"
	_d "github.com/unidoc/unioffice/measurement"
	_gc "github.com/unidoc/unioffice/schema/soo/dml"
	_eeb "github.com/unidoc/unioffice/schema/soo/dml/chart"
	_af "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes"
	_fef "github.com/unidoc/unioffice/schema/soo/pkg/relationships"
	_ef "github.com/unidoc/unioffice/schema/soo/pml"
	_ea "github.com/unidoc/unioffice/zippkg"
	_be "image"
	_fe "image/jpeg"
	_fb "io"
	_a "log"
	_ec "os"
	_c "path"
	_fa "strconv"
	_f "strings"
)

// ShowPr returns the ShowPr property.
func (_fg PresentationProperties) ShowPr() *_ef.CT_ShowProperties { return _fg._dgg.ShowPr }

// X returns the inner wrapped XML type.
func (_fge SlideMaster) X() *_ef.SldMaster { return _fge._ffa }

// X returns the inner wrapped XML type.
func (_ddfe ViewProperties) X() *_ef.ViewPr { return _ddfe._fagc }

// Properties returns the properties of the TextBox.
func (_ggac TextBox) Properties() _eb.ShapeProperties {
	if _ggac._bdcg.SpPr == nil {
		_ggac._bdcg.SpPr = _gc.NewCT_ShapeProperties()
	}
	return _eb.MakeShapeProperties(_ggac._bdcg.SpPr)
}

// NotesTextViewPr returns the NotesTextViewPr property.
func (_ede ViewProperties) NotesTextViewPr() *_ef.CT_NotesTextViewProperties {
	return _ede._fagc.NotesTextViewPr
}

// OpenTemplate opens a template file.
func OpenTemplate(fn string) (*Presentation, error) {
	_cg, _cc := Open(fn)
	if _cc != nil {
		return nil, _cc
	}
	return _cg, nil
}

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_ga PlaceHolder) Clear() {
	_ga.ClearAll()
	_df := _gc.NewCT_TextParagraph()
	_ga._aef.TxBody.P = []*_gc.CT_TextParagraph{_df}
	_df.EndParaRPr = _gc.NewCT_TextCharacterProperties()
	_df.EndParaRPr.LangAttr = _fc.String("\u0065\u006e\u002dU\u0053")
}

// Name returns the name of the slide layout.
func (_afdc SlideLayout) Name() string {
	if _afdc._faaa.CSld != nil && _afdc._faaa.CSld.NameAttr != nil {
		return *_afdc._faaa.CSld.NameAttr
	}
	return ""
}

// RemoveSlide removes a slide from a presentation.
func (_ade *Presentation) RemoveSlide(s Slide) error {
	_aca := false
	_bbd := 0
	for _egd, _dae := range _ade._ebc {
		if _dae == s._dcf {
			if _ade._ca.SldIdLst.SldId[_egd] != s._add {
				return _fdc.New("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074")
			}
			copy(_ade._ebc[_egd:], _ade._ebc[_egd+1:])
			_ade._ebc = _ade._ebc[0 : len(_ade._ebc)-1]
			copy(_ade._ag[_egd:], _ade._ag[_egd+1:])
			_ade._ag = _ade._ag[0 : len(_ade._ag)-1]
			copy(_ade._ca.SldIdLst.SldId[_egd:], _ade._ca.SldIdLst.SldId[_egd+1:])
			_ade._ca.SldIdLst.SldId = _ade._ca.SldIdLst.SldId[0 : len(_ade._ca.SldIdLst.SldId)-1]
			_aca = true
			_bbd = _egd
		}
	}
	if !_aca {
		return _fdc.New("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065")
	}
	_bgda := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideType, 0)
	return _ade.ContentTypes.RemoveOverrideByIndex(_bgda, _bbd)
}

// Read reads a document from an io.Reader.
func Read(r _fb.ReaderAt, size int64) (*Presentation, error) {
	_fec := _gb()
	_acag, _dafa := _b.TempDir("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078")
	if _dafa != nil {
		return nil, _dafa
	}
	_fec.TmpPath = _acag
	_fefg, _dafa := _ee.NewReader(r, size)
	if _dafa != nil {
		return nil, _ae.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073", _dafa)
	}
	_cbcg := []*_ee.File{}
	_cbcg = append(_cbcg, _fefg.File...)
	_gac := false
	for _, _agdb := range _cbcg {
		if _agdb.FileHeader.Name == "\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c" {
			_gac = true
			break
		}
	}
	if _gac {
		_fec.createCustomProperties()
	}
	_dcg := _ea.DecodeMap{}
	_dcg.SetOnNewRelationshipFunc(_fec.onNewRelationship)
	_dcg.AddTarget(_fc.ContentTypesFilename, _fec.ContentTypes.X(), "", 0)
	_dcg.AddTarget(_fc.BaseRelsFilename, _fec.Rels.X(), "", 0)
	if _defd := _dcg.Decode(_cbcg); _defd != nil {
		return nil, _defd
	}
	for _, _eae := range _cbcg {
		if _eae == nil {
			continue
		}
		if _dggc := _fec.AddExtraFileFromZip(_eae); _dggc != nil {
			return nil, _dggc
		}
	}
	if _gac {
		_gdg := false
		for _, _bbe := range _fec.Rels.X().Relationship {
			if _bbe.TargetAttr == "\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c" {
				_gdg = true
				break
			}
		}
		if !_gdg {
			_fec.addCustomRelationships()
		}
	}
	return _fec, nil
}

// Save writes the presentation out to a writer in the Zip package format
func (_cea *Presentation) Save(w _fb.Writer) error { return _cea.save(w, false) }
func (_eccg *Presentation) save(_bfa _fb.Writer, _ddc bool) error {
	if _ggf := _eccg._ca.Validate(); _ggf != nil {
		_a.Printf("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _ggf)
	}
	if !_db.GetLicenseKey().IsLicensed() && !_dag {
		_ae.Println("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065")
		_ae.Println("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f")
		return _fdc.New("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064")
	}
	if _ddc {
		_eccg.ContentTypes.RemoveOverride("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
		_eccg.ContentTypes.EnsureOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	} else {
		_eccg.ContentTypes.RemoveOverride("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
		_eccg.ContentTypes.EnsureOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	}
	_fgg := _fc.DocTypePresentation
	_gdb := _ee.NewWriter(_bfa)
	defer _gdb.Close()
	if _dgef := _ea.MarshalXML(_gdb, _fc.BaseRelsFilename, _eccg.Rels.X()); _dgef != nil {
		return _dgef
	}
	if _abd := _ea.MarshalXMLByType(_gdb, _fgg, _fc.ExtendedPropertiesType, _eccg.AppProperties.X()); _abd != nil {
		return _abd
	}
	if _bcg := _ea.MarshalXMLByType(_gdb, _fgg, _fc.CorePropertiesType, _eccg.CoreProperties.X()); _bcg != nil {
		return _bcg
	}
	if _ggfd := _ea.MarshalXMLByType(_gdb, _fgg, _fc.PresentationPropertiesType, _eccg._caa.X()); _ggfd != nil {
		return _ggfd
	}
	if _cdc := _ea.MarshalXMLByType(_gdb, _fgg, _fc.ViewPropertiesType, _eccg._bad.X()); _cdc != nil {
		return _cdc
	}
	if _cfe := _ea.MarshalXMLByType(_gdb, _fgg, _fc.TableStylesType, _eccg._gea.X()); _cfe != nil {
		return _cfe
	}
	if _eccg.CustomProperties.X() != nil {
		if _dfac := _ea.MarshalXMLByType(_gdb, _fgg, _fc.CustomPropertiesType, _eccg.CustomProperties.X()); _dfac != nil {
			return _dfac
		}
	}
	if _eccg.Thumbnail != nil {
		_fad, _agf := _gdb.Create("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067")
		if _agf != nil {
			return _agf
		}
		if _bgd := _fe.Encode(_fad, _eccg.Thumbnail, nil); _bgd != nil {
			return _bgd
		}
	}
	_aag := _fc.AbsoluteFilename(_fgg, _fc.OfficeDocumentType, 0)
	if _adb := _ea.MarshalXML(_gdb, _aag, _eccg._ca); _adb != nil {
		return _adb
	}
	if _eaa := _ea.MarshalXML(_gdb, _ea.RelationsPathFor(_aag), _eccg._dad.X()); _eaa != nil {
		return _eaa
	}
	for _faf, _aaf := range _eccg._ebc {
		_abg := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideType, _faf+1)
		_ea.MarshalXML(_gdb, _abg, _aaf)
		if !_eccg._ag[_faf].IsEmpty() {
			_eee := _ea.RelationsPathFor(_abg)
			_ea.MarshalXML(_gdb, _eee, _eccg._ag[_faf].X())
		}
	}
	for _ece, _gbc := range _eccg._dfc {
		_dggd := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideMasterType, _ece+1)
		_ea.MarshalXML(_gdb, _dggd, _gbc)
		if !_eccg._dfe[_ece].IsEmpty() {
			_fcc := _ea.RelationsPathFor(_dggd)
			_ea.MarshalXML(_gdb, _fcc, _eccg._dfe[_ece].X())
		}
	}
	for _fga, _ddde := range _eccg._cga {
		_cda := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideLayoutType, _fga+1)
		_ea.MarshalXML(_gdb, _cda, _ddde)
		if !_eccg._ddd[_fga].IsEmpty() {
			_gggd := _ea.RelationsPathFor(_cda)
			_ea.MarshalXML(_gdb, _gggd, _eccg._ddd[_fga].X())
		}
	}
	for _bca, _acf := range _eccg._cba {
		_dbe := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.ThemeType, _bca+1)
		_ea.MarshalXML(_gdb, _dbe, _acf)
		if !_eccg._cfc[_bca].IsEmpty() {
			_cdg := _ea.RelationsPathFor(_dbe)
			_ea.MarshalXML(_gdb, _cdg, _eccg._cfc[_bca].X())
		}
	}
	for _ggc, _bdg := range _eccg._bf {
		_cge := _fc.AbsoluteFilename(_fgg, _fc.ChartType, _ggc+1)
		_ea.MarshalXML(_gdb, _cge, _bdg)
	}
	for _eece, _gbg := range _eccg._gce {
		_bea := _fc.AbsoluteFilename(_fgg, _fc.HandoutMasterType, _eece+1)
		_ea.MarshalXML(_gdb, _bea, _gbg)
	}
	for _adf, _age := range _eccg._fbd {
		_gff := _fc.AbsoluteFilename(_fgg, _fc.NotesMasterType, _adf+1)
		_ea.MarshalXML(_gdb, _gff, _age)
	}
	for _gcgg, _ggaa := range _eccg._gag {
		_fde := _fc.AbsoluteFilename(_fgg, _fc.CustomXMLType, _gcgg+1)
		_ea.MarshalXML(_gdb, _fde, _ggaa)
	}
	for _ageg, _fdgg := range _eccg.Images {
		if _ggb := _fd.AddImageToZip(_gdb, _fdgg, _ageg+1, _fc.DocTypePresentation); _ggb != nil {
			return _ggb
		}
	}
	_eccg.ContentTypes.EnsureDefault("\u0070\u006e\u0067", "\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg")
	_eccg.ContentTypes.EnsureDefault("\u006a\u0070\u0065\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_eccg.ContentTypes.EnsureDefault("\u006a\u0070\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_eccg.ContentTypes.EnsureDefault("\u0077\u006d\u0066", "i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066")
	if _acb := _ea.MarshalXML(_gdb, _fc.ContentTypesFilename, _eccg.ContentTypes.X()); _acb != nil {
		return _acb
	}
	if _dace := _eccg.WriteExtraFiles(_gdb); _dace != nil {
		return _dace
	}
	return nil
}

// TextBox is a text box within a slide.
type TextBox struct{ _bdcg *_ef.CT_Shape }

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ggbc *Presentation) AddImage(i _fd.Image) (_fd.ImageRef, error) {
	_def := _fd.MakeImageRef(i, &_ggbc.DocBase, _ggbc._dad)
	if i.Data == nil && i.Path == "" {
		return _def, _fdc.New("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068")
	}
	if i.Format == "" {
		return _def, _fdc.New("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074")
	}
	if i.Size.X == 0 || i.Size.Y == 0 {
		return _def, _fdc.New("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065")
	}
	if i.Path != "" {
		_bab := _b.Add(i.Path)
		if _bab != nil {
			return _def, _bab
		}
	}
	_ggbc.Images = append(_ggbc.Images, _def)
	_ggbc.ContentTypes.EnsureDefault("\u0070\u006e\u0067", "\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg")
	_ggbc.ContentTypes.EnsureDefault("\u006a\u0070\u0065\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_ggbc.ContentTypes.EnsureDefault("\u006a\u0070\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_ggbc.ContentTypes.EnsureDefault("\u0077\u006d\u0066", "i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066")
	_ggbc.ContentTypes.EnsureDefault(i.Format, "\u0069\u006d\u0061\u0067\u0065\u002f"+i.Format)
	return _def, nil
}

// Remove removes a placeholder from a presentation.
func (_gd PlaceHolder) Remove() error {
	for _dfa, _cd := range _gd._cb.CSld.SpTree.Choice {
		for _, _aeca := range _cd.Sp {
			if _aeca == _gd._aef {
				copy(_gd._cb.CSld.SpTree.Choice[_dfa:], _gd._cb.CSld.SpTree.Choice[_dfa+1:])
				_gd._cb.CSld.SpTree.Choice = _gd._cb.CSld.SpTree.Choice[0 : len(_gd._cb.CSld.SpTree.Choice)-1]
				return nil
			}
		}
	}
	return _fdc.New("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065")
}

// X returns the inner wrapped XML type.
func (_bfe *Presentation) X() *_ef.Presentation { return _bfe._ca }
func (_bgcb *Presentation) Validate() error {
	if _agg := _bgcb._ca.Validate(); _agg != nil {
		return _agg
	}
	for _gca, _gcaf := range _bgcb.Slides() {
		if _gde := _gcaf.ValidateWithPath(_ae.Sprintf("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]", _gca)); _gde != nil {
			return _gde
		}
	}
	for _ebae, _bfg := range _bgcb._dfc {
		if _eac := _bfg.ValidateWithPath(_ae.Sprintf("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d", _ebae)); _eac != nil {
			return _eac
		}
	}
	for _dadc, _bcf := range _bgcb._cga {
		if _ced := _bcf.ValidateWithPath(_ae.Sprintf("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d", _dadc)); _ced != nil {
			return _ced
		}
	}
	return nil
}

// ExtLst returns the ExtLst property.
func (_acc ViewProperties) ExtLst() *_ef.CT_ExtensionList { return _acc._fagc.ExtLst }

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_dbdc SlideMaster) SlideLayouts() []SlideLayout {
	_fdcb := map[string]int{}
	_dagf := []SlideLayout{}
	for _, _edb := range _dbdc._bggd.Relationships() {
		_addd := _f.Replace(_edb.Target(), ".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074", "", -1)
		_addd = _f.Replace(_addd, "\u002e\u0078\u006d\u006c", "", -1)
		if _cec, _fagg := _fa.ParseInt(_addd, 10, 32); _fagg == nil {
			_fdcb[_edb.ID()] = int(_cec)
		}
	}
	for _, _bgde := range _dbdc._ffa.SldLayoutIdLst.SldLayoutId {
		if _cce, _fda := _fdcb[_bgde.RIdAttr]; _fda {
			_ggbb := _dbdc._bcec._cga[_cce-1]
			_dagf = append(_dagf, SlideLayout{_ggbb})
		}
	}
	return _dagf
}

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{ _faaa *_ef.SldLayout }

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_gae *Presentation) AddSlideWithLayout(l SlideLayout) (Slide, error) {
	_geb := _ef.NewCT_SlideIdListEntry()
	_geb.IdAttr = 256
	for _, _cbc := range _gae._ca.SldIdLst.SldId {
		if _cbc.IdAttr >= _geb.IdAttr {
			_geb.IdAttr = _cbc.IdAttr + 1
		}
	}
	_gae._ca.SldIdLst.SldId = append(_gae._ca.SldIdLst.SldId, _geb)
	_abb := _ef.NewSld()
	_eba := _dc.Buffer{}
	_ff := _g.NewEncoder(&_eba)
	_ccc := _g.StartElement{Name: _g.Name{Local: "\u0073\u006c\u0069d\u0065"}}
	_ccc.Attr = append(_ccc.Attr, _g.Attr{Name: _g.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"})
	_ccc.Attr = append(_ccc.Attr, _g.Attr{Name: _g.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	_ccc.Attr = append(_ccc.Attr, _g.Attr{Name: _g.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0070"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"})
	_ccc.Attr = append(_ccc.Attr, _g.Attr{Name: _g.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	_ccc.Attr = append(_ccc.Attr, _g.Attr{Name: _g.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	_ccc.Attr = append(_ccc.Attr, _g.Attr{Name: _g.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	if _ecc := l._faaa.CSld.MarshalXML(_ff, _ccc); _ecc != nil {
		return Slide{}, _ecc
	}
	_ff.Flush()
	_aeff := _g.NewDecoder(&_eba)
	_abb.CSld = _ef.NewCT_CommonSlideData()
	if _aff := _aeff.Decode(_abb.CSld); _aff != nil {
		return Slide{}, _aff
	}
	_abb.CSld.NameAttr = nil
	_abb.CSld.SpTree.Choice = _cgba(_abb.CSld.SpTree.Choice)
	_gae._ebc = append(_gae._ebc, _abb)
	_bgbb := _gae._dad.AddAutoRelationship(_fc.DocTypePresentation, _fc.OfficeDocumentType, len(_gae._ebc), _fc.SlideType)
	_geb.RIdAttr = _bgbb.ID()
	_gebf := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideType, len(_gae._ebc))
	_gae.ContentTypes.AddOverride(_gebf, _fc.SlideContentType)
	_bdc := _fd.NewRelationships()
	_gae._ag = append(_gae._ag, _bdc)
	_bcb := len(_gae._ag) - 1
	for _cfg, _faa := range _gae._cga {
		if _faa == l.X() {
			_fdg := _gae._ddd[_cfg]
			for _, _gfc := range _fdg.X().Relationship {
				if _gfc.TypeAttr != _fc.SlideMasterType {
					_gae._ag[_bcb].X().Relationship = append(_gae._ag[_bcb].X().Relationship, _gfc)
				}
			}
			_bdc.AddAutoRelationship(_fc.DocTypePresentation, _fc.SlideType, _cfg+1, _fc.SlideLayoutType)
		}
	}
	_ddg := Slide{_geb, _abb, _gae}
	return _ddg, nil
}

// SaveToFile writes the Presentation out to a file.
func (_bgg *Presentation) SaveToFile(path string) error { return _bgg.saveToFile(path, false) }

// HtmlPubPr returns the HtmlPubPr property.
func (_gf PresentationProperties) HtmlPubPr() *_ef.CT_HtmlPublishProperties {
	return _gf._dgg.HtmlPubPr
}

// PresentationProperties contains document specific properties.
type PresentationProperties struct{ _dgg *_ef.PresentationPr }

// AddParagraph adds a paragraph to the text box
func (_bgbf TextBox) AddParagraph() _eb.Paragraph {
	_cgc := _gc.NewCT_TextParagraph()
	_bgbf._bdcg.TxBody.P = append(_bgbf._bdcg.TxBody.P, _cgc)
	return _eb.MakeParagraph(_cgc)
}

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_eff *Presentation) SaveAsTemplate(w _fb.Writer) error { return _eff.save(w, true) }

// Type returns the placeholder type
func (_aec PlaceHolder) Type() _ef.ST_PlaceholderType { return _aec._aef.NvSpPr.NvPr.Ph.TypeAttr }

// SetTextAnchor controls the text anchoring
func (_beg TextBox) SetTextAnchor(a _gc.ST_TextAnchoringType) {
	_beg._bdcg.TxBody.BodyPr = _gc.NewCT_TextBodyProperties()
	_beg._bdcg.TxBody.BodyPr.AnchorAttr = a
}

// ClrMru returns the ClrMru property.
func (_fed PresentationProperties) ClrMru() *_gc.CT_ColorMRU { return _fed._dgg.ClrMru }

var _dag = false

// NotesViewPr returns the NotesViewPr property.
func (_cbeg ViewProperties) NotesViewPr() *_ef.CT_NotesViewProperties { return _cbeg._fagc.NotesViewPr }

// New initializes and reurns a new presentation
func New() *Presentation {
	_dfd := _gb()
	_dfd.ContentTypes.AddOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	_dfd.Rels.AddRelationship("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073")
	_dfd.Rels.AddRelationship("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c", "\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073")
	_dfd.Rels.AddRelationship("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074")
	_dfd.Rels.AddRelationship("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c", "ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073")
	_dfd.Rels.AddRelationship("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c", "ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073")
	_dfd.Rels.AddRelationship("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073")
	_dfd._ca.SldMasterIdLst = _ef.NewCT_SlideMasterIdList()
	_bade := _ef.NewSldMaster()
	_bade.ClrMap.Bg1Attr = _gc.ST_ColorSchemeIndexLt1
	_bade.ClrMap.Bg2Attr = _gc.ST_ColorSchemeIndexLt2
	_bade.ClrMap.Tx1Attr = _gc.ST_ColorSchemeIndexDk1
	_bade.ClrMap.Tx2Attr = _gc.ST_ColorSchemeIndexDk2
	_bade.ClrMap.Accent1Attr = _gc.ST_ColorSchemeIndexAccent1
	_bade.ClrMap.Accent2Attr = _gc.ST_ColorSchemeIndexAccent2
	_bade.ClrMap.Accent3Attr = _gc.ST_ColorSchemeIndexAccent3
	_bade.ClrMap.Accent4Attr = _gc.ST_ColorSchemeIndexAccent4
	_bade.ClrMap.Accent5Attr = _gc.ST_ColorSchemeIndexAccent5
	_bade.ClrMap.Accent6Attr = _gc.ST_ColorSchemeIndexAccent6
	_bade.ClrMap.HlinkAttr = _gc.ST_ColorSchemeIndexHlink
	_bade.ClrMap.FolHlinkAttr = _gc.ST_ColorSchemeIndexFolHlink
	_dfd._dfc = append(_dfd._dfc, _bade)
	_fdb := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideMasterType, 1)
	_dfd.ContentTypes.AddOverride(_fdb, _fc.SlideMasterContentType)
	_bge := _dfd._dad.AddAutoRelationship(_fc.DocTypePresentation, _fc.OfficeDocumentType, 1, _fc.SlideMasterType)
	_bgb := _ef.NewCT_SlideMasterIdListEntry()
	_bgb.IdAttr = _fc.Uint32(2147483648)
	_bgb.RIdAttr = _bge.ID()
	_dfd._ca.SldMasterIdLst.SldMasterId = append(_dfd._ca.SldMasterIdLst.SldMasterId, _bgb)
	_bgc := _fd.NewRelationships()
	_dfd._dfe = append(_dfd._dfe, _bgc)
	_dge := _ef.NewSldLayout()
	_cfca := _bgc.AddAutoRelationship(_fc.DocTypePresentation, _fc.SlideMasterType, 1, _fc.SlideLayoutType)
	_gcg := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideLayoutType, 1)
	_dfd.ContentTypes.AddOverride(_gcg, _fc.SlideLayoutContentType)
	_bgc.AddAutoRelationship(_fc.DocTypePresentation, _fc.SlideMasterType, 1, _fc.ThemeType)
	_dfd._cga = append(_dfd._cga, _dge)
	_bade.SldLayoutIdLst = _ef.NewCT_SlideLayoutIdList()
	_eaf := _ef.NewCT_SlideLayoutIdListEntry()
	_eaf.IdAttr = _fc.Uint32(2147483649)
	_eaf.RIdAttr = _cfca.ID()
	_bade.SldLayoutIdLst.SldLayoutId = append(_bade.SldLayoutIdLst.SldLayoutId, _eaf)
	_agd := _fd.NewRelationships()
	_dfd._ddd = append(_dfd._ddd, _agd)
	_agd.AddAutoRelationship(_fc.DocTypePresentation, _fc.SlideType, 1, _fc.SlideMasterType)
	_dfd._ca.NotesSz.CxAttr = 6858000
	_dfd._ca.NotesSz.CyAttr = 9144000
	_ddb := _gc.NewTheme()
	_ddb.NameAttr = _fc.String("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065")
	_ddb.ThemeElements.ClrScheme.NameAttr = "\u004f\u0066\u0066\u0069\u0063\u0065"
	_ddb.ThemeElements.ClrScheme.Dk1.SysClr = _gc.NewCT_SystemColor()
	_ddb.ThemeElements.ClrScheme.Dk1.SysClr.LastClrAttr = _fc.String("\u0030\u0030\u0030\u0030\u0030\u0030")
	_ddb.ThemeElements.ClrScheme.Dk1.SysClr.ValAttr = _gc.ST_SystemColorValWindowText
	_ddb.ThemeElements.ClrScheme.Lt1.SysClr = _gc.NewCT_SystemColor()
	_ddb.ThemeElements.ClrScheme.Lt1.SysClr.LastClrAttr = _fc.String("\u0066\u0066\u0066\u0066\u0066\u0066")
	_ddb.ThemeElements.ClrScheme.Lt1.SysClr.ValAttr = _gc.ST_SystemColorValWindow
	_ddb.ThemeElements.ClrScheme.Dk2.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Dk2.SrgbClr.ValAttr = "\u0034\u0034\u0035\u0034\u0036\u0061"
	_ddb.ThemeElements.ClrScheme.Lt2.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Lt2.SrgbClr.ValAttr = "\u0065\u0037\u0065\u0037\u0065\u0036"
	_ddb.ThemeElements.ClrScheme.Accent1.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Accent1.SrgbClr.ValAttr = "\u0034\u0034\u0037\u0032\u0063\u0034"
	_ddb.ThemeElements.ClrScheme.Accent2.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Accent2.SrgbClr.ValAttr = "\u0065\u0064\u0037\u0064\u0033\u0031"
	_ddb.ThemeElements.ClrScheme.Accent3.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Accent3.SrgbClr.ValAttr = "\u0061\u0035\u0061\u0035\u0061\u0035"
	_ddb.ThemeElements.ClrScheme.Accent4.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Accent4.SrgbClr.ValAttr = "\u0066\u0066\u0063\u0030\u0030\u0030"
	_ddb.ThemeElements.ClrScheme.Accent5.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Accent5.SrgbClr.ValAttr = "\u0035\u0062\u0039\u0062\u0064\u0035"
	_ddb.ThemeElements.ClrScheme.Accent6.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Accent6.SrgbClr.ValAttr = "\u0037\u0030\u0061\u0064\u0034\u0037"
	_ddb.ThemeElements.ClrScheme.Hlink.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.Hlink.SrgbClr.ValAttr = "\u0030\u0035\u0036\u0033\u0063\u0031"
	_ddb.ThemeElements.ClrScheme.FolHlink.SrgbClr = _gc.NewCT_SRgbColor()
	_ddb.ThemeElements.ClrScheme.FolHlink.SrgbClr.ValAttr = "\u0039\u0035\u0034\u0066\u0037\u0032"
	_ddb.ThemeElements.FontScheme.NameAttr = "\u004f\u0066\u0066\u0069\u0063\u0065"
	_ddb.ThemeElements.FontScheme.MajorFont.Latin.TypefaceAttr = "\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074"
	_ddb.ThemeElements.FontScheme.MinorFont.Latin.TypefaceAttr = "\u0043a\u006c\u0069\u0062\u0072\u0069"
	_ddb.ThemeElements.FmtScheme.NameAttr = _fc.String("\u004f\u0066\u0066\u0069\u0063\u0065")
	_bc := _gc.NewEG_FillProperties()
	_ddb.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_ddb.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _bc)
	_bc.SolidFill = &_gc.CT_SolidColorFillProperties{SchemeClr: &_gc.CT_SchemeColor{ValAttr: _gc.ST_SchemeColorValPhClr}}
	_bc = _gc.NewEG_FillProperties()
	_ddb.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_ddb.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _bc)
	_ddb.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_ddb.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _bc)
	_bc.GradFill = &_gc.CT_GradientFillProperties{RotWithShapeAttr: _fc.Bool(true), GsLst: &_gc.CT_GradientStopList{}, Lin: &_gc.CT_LinearShadeProperties{}}
	_bc.GradFill.Lin.AngAttr = _fc.Int32(5400000)
	_bc.GradFill.Lin.ScaledAttr = _fc.Bool(false)
	_fce := _gc.NewCT_GradientStop()
	_fce.PosAttr.ST_PositiveFixedPercentageDecimal = _fc.Int32(0)
	_fce.SchemeClr = &_gc.CT_SchemeColor{ValAttr: _gc.ST_SchemeColorValPhClr}
	_bc.GradFill.GsLst.Gs = append(_bc.GradFill.GsLst.Gs, _fce)
	_fce = _gc.NewCT_GradientStop()
	_fce.PosAttr.ST_PositiveFixedPercentageDecimal = _fc.Int32(50000)
	_fce.SchemeClr = &_gc.CT_SchemeColor{ValAttr: _gc.ST_SchemeColorValPhClr}
	_bc.GradFill.GsLst.Gs = append(_bc.GradFill.GsLst.Gs, _fce)
	_ddb.ThemeElements.FmtScheme.LnStyleLst = _gc.NewCT_LineStyleList()
	for _dcd := 0; _dcd < 3; _dcd++ {
		_cgb := _gc.NewCT_LineProperties()
		_cgb.WAttr = _fc.Int32(int32(6350 * (_dcd + 1)))
		_cgb.CapAttr = _gc.ST_LineCapFlat
		_cgb.CmpdAttr = _gc.ST_CompoundLineSng
		_cgb.AlgnAttr = _gc.ST_PenAlignmentCtr
		_ddb.ThemeElements.FmtScheme.LnStyleLst.Ln = append(_ddb.ThemeElements.FmtScheme.LnStyleLst.Ln, _cgb)
	}
	_ddb.ThemeElements.FmtScheme.EffectStyleLst = _gc.NewCT_EffectStyleList()
	for _bcc := 0; _bcc < 3; _bcc++ {
		_ccd := _gc.NewCT_EffectStyleItem()
		_ccd.EffectLst = _gc.NewCT_EffectList()
		_ddb.ThemeElements.FmtScheme.EffectStyleLst.EffectStyle = append(_ddb.ThemeElements.FmtScheme.EffectStyleLst.EffectStyle, _ccd)
	}
	_ad := _gc.NewEG_FillProperties()
	_ad.SolidFill = &_gc.CT_SolidColorFillProperties{SchemeClr: &_gc.CT_SchemeColor{ValAttr: _gc.ST_SchemeColorValPhClr}}
	_ddb.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_ddb.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _ad)
	_ddb.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_ddb.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _ad)
	_ddb.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_ddb.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _bc)
	_dfd._cba = append(_dfd._cba, _ddb)
	_dda := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.ThemeType, 1)
	_dfd.ContentTypes.AddOverride(_dda, _fc.ThemeContentType)
	_dfd._dad.AddAutoRelationship(_fc.DocTypePresentation, _fc.OfficeDocumentType, 1, _fc.ThemeType)
	_fdcd := _fd.NewRelationships()
	_dfd._cfc = append(_dfd._cfc, _fdcd)
	return _dfd
}

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties() ViewProperties { return ViewProperties{_fagc: _ef.NewViewPr()} }

// SlideMasters returns the slide masters defined in the presentation.
func (_gda *Presentation) SlideMasters() []SlideMaster {
	_dgb := []SlideMaster{}
	for _acd, _eeg := range _gda._dfc {
		_dgb = append(_dgb, SlideMaster{_gda, _gda._dfe[_acd], _eeg})
	}
	return _dgb
}

// ExtLst returns the ExtLst property.
func (_efe PresentationProperties) ExtLst() *_ef.CT_ExtensionList { return _efe._dgg.ExtLst }

// Image is an image within a slide.
type Image struct{ _dd *_ef.CT_Picture }

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_gba Slide) ValidateWithPath(path string) error {
	if _cbb := _gba._dcf.ValidateWithPath(path); _cbb != nil {
		return _cbb
	}
	for _, _aab := range _gba._dcf.CSld.SpTree.Choice {
		for _, _fbg := range _aab.Sp {
			if _fbg.TxBody != nil {
				if len(_fbg.TxBody.P) == 0 {
					return _fdc.New(path + "\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073")
				}
			}
		}
	}
	return nil
}
func (_fegfa TextBox) getOff() *_gc.CT_Point2D {
	if _fegfa._bdcg.SpPr == nil {
		_fegfa._bdcg.SpPr = _gc.NewCT_ShapeProperties()
	}
	if _fegfa._bdcg.SpPr.Xfrm == nil {
		_fegfa._bdcg.SpPr.Xfrm = _gc.NewCT_Transform2D()
	}
	if _fegfa._bdcg.SpPr.Xfrm.Off == nil {
		_fegfa._bdcg.SpPr.Xfrm.Off = _gc.NewCT_Point2D()
	}
	return _fegfa._bdcg.SpPr.Xfrm.Off
}

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct {
	_aef *_ef.CT_Shape
	_cb  *_ef.Sld
}

// NormalViewPr returns the NormalViewPr property.
func (_babd ViewProperties) NormalViewPr() *_ef.CT_NormalViewProperties {
	return _babd._fagc.NormalViewPr
}

// X returns the inner wrapped XML type.
func (_dde PlaceHolder) X() *_ef.CT_Shape { return _dde._aef }

// Slide represents a slide of a presentation.
type Slide struct {
	_add *_ef.CT_SlideIdListEntry
	_dcf *_ef.Sld
	_aad *Presentation
}

// GetTextBoxes returns a list of all text boxes from a slide.
func (_cfa Slide) GetTextBoxes() []*TextBox {
	_abe := []*TextBox{}
	_fede := _cfa._dcf.CSld.SpTree.Choice
	for _, _cgd := range _fede {
		for _, _gceg := range _cgd.Sp {
			if _gceg.NvSpPr.CNvSpPr.TxBoxAttr != nil && *_gceg.NvSpPr.CNvSpPr.TxBoxAttr {
				_abe = append(_abe, &TextBox{_gceg})
			}
		}
	}
	return _abe
}

// Open opens and reads a document from a file (.pptx).
func Open(filename string) (*Presentation, error) {
	_dg, _gcc := _ec.Open(filename)
	if _gcc != nil {
		return nil, _ae.Errorf("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073", filename, _gcc)
	}
	defer _dg.Close()
	_gg, _gcc := _ec.Stat(filename)
	if _gcc != nil {
		return nil, _ae.Errorf("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073", filename, _gcc)
	}
	_ = _gg
	return Read(_dg, _gg.Size())
}

// PlaceHolders returns all of the content place holders within a given slide.
func (_bag Slide) PlaceHolders() []PlaceHolder {
	_dbee := []PlaceHolder{}
	for _, _ccg := range _bag._dcf.CSld.SpTree.Choice {
		for _, _afdg := range _ccg.Sp {
			if _afdg.NvSpPr != nil && _afdg.NvSpPr.NvPr != nil && _afdg.NvSpPr.NvPr.Ph != nil {
				_dbee = append(_dbee, PlaceHolder{_afdg, _bag._dcf})
			}
		}
	}
	return _dbee
}

// ShowCommentsAttr returns the WebPr property.
func (_fgaf ViewProperties) ShowCommentsAttr() *bool { return _fgaf._fagc.ShowCommentsAttr }

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_bdcc *Presentation) GetImageByRelID(relID string) (_fd.ImageRef, bool) {
	for _, _bcgg := range _bdcc.Images {
		if _bcgg.RelID() == relID {
			return _bcgg, true
		}
	}
	return _fd.ImageRef{}, false
}

// AddTextBox adds an empty textbox to a slide.
func (_bda Slide) AddTextBox() TextBox {
	_fbca := _ef.NewCT_GroupShapeChoice()
	_bda._dcf.CSld.SpTree.Choice = append(_bda._dcf.CSld.SpTree.Choice, _fbca)
	_gcge := _ef.NewCT_Shape()
	_fbca.Sp = append(_fbca.Sp, _gcge)
	_gcge.SpPr = _gc.NewCT_ShapeProperties()
	_gcge.SpPr.Xfrm = _gc.NewCT_Transform2D()
	_gcge.SpPr.PrstGeom = _gc.NewCT_PresetGeometry2D()
	_gcge.SpPr.PrstGeom.PrstAttr = _gc.ST_ShapeTypeRect
	_gcge.NvSpPr = _ef.NewCT_ShapeNonVisual()
	_gcge.NvSpPr.CNvSpPr = _gc.NewCT_NonVisualDrawingShapeProps()
	_cbge := true
	_gcge.NvSpPr.CNvSpPr.TxBoxAttr = &_cbge
	_gcge.TxBody = _gc.NewCT_TextBody()
	_gcge.TxBody.BodyPr = _gc.NewCT_TextBodyProperties()
	_gcge.TxBody.BodyPr.WrapAttr = _gc.ST_TextWrappingTypeSquare
	_gcge.TxBody.BodyPr.SpAutoFit = _gc.NewCT_TextShapeAutofit()
	_gad := TextBox{_gcge}
	_gad.Properties().SetWidth(3 * _d.Inch)
	_gad.Properties().SetHeight(1 * _d.Inch)
	_gad.Properties().SetPosition(0, 0)
	return _gad
}

// AddImage adds an image textbox to a slide.
func (_bae Slide) AddImage(img _fd.ImageRef) Image {
	_aagf := _ef.NewCT_GroupShapeChoice()
	_bae._dcf.CSld.SpTree.Choice = append(_bae._dcf.CSld.SpTree.Choice, _aagf)
	_fecf := _ef.NewCT_Picture()
	_aagf.Pic = append(_aagf.Pic, _fecf)
	_fecf.NvPicPr.CNvPicPr = _gc.NewCT_NonVisualPictureProperties()
	_fecf.NvPicPr.CNvPicPr.PicLocks = _gc.NewCT_PictureLocking()
	_fecf.NvPicPr.CNvPicPr.PicLocks.NoChangeAspectAttr = _fc.Bool(true)
	_fecf.BlipFill = _gc.NewCT_BlipFillProperties()
	_fecf.BlipFill.Blip = _gc.NewCT_Blip()
	_abc := _bae.AddImageToRels(img)
	_fecf.BlipFill.Blip.EmbedAttr = _fc.String(_abc)
	_fecf.BlipFill.Stretch = _gc.NewCT_StretchInfoProperties()
	_fecf.BlipFill.Stretch.FillRect = _gc.NewCT_RelativeRect()
	_fecf.SpPr = _gc.NewCT_ShapeProperties()
	_fecf.SpPr.PrstGeom = _gc.NewCT_PresetGeometry2D()
	_fecf.SpPr.PrstGeom.PrstAttr = _gc.ST_ShapeTypeRect
	_dfb := Image{_fecf}
	_daa := img.Size()
	_dfb.Properties().SetWidth(_d.Distance(_daa.X) * _d.Pixel72)
	_dfb.Properties().SetHeight(_d.Distance(_daa.Y) * _d.Pixel72)
	_dfb.Properties().SetPosition(0, 0)
	return _dfb
}

// SorterViewPr returns the SorterViewPr property.
func (_dgefb ViewProperties) SorterViewPr() *_ef.CT_SlideSorterViewProperties {
	return _dgefb._fagc.SorterViewPr
}
func (_feg *Presentation) onNewRelationship(_cae *_ea.DecodeMap, _bcab, _adc string, _ccf []*_ee.File, _ceg *_fef.Relationship, _adg _ea.Target) error {
	_fgd := _fc.DocTypePresentation
	switch _adc {
	case _fc.OfficeDocumentType:
		_feg._ca = _ef.NewPresentation()
		_cae.AddTarget(_bcab, _feg._ca, _adc, 0)
		_cae.AddTarget(_ea.RelationsPathFor(_bcab), _feg._dad.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.CorePropertiesType:
		_cae.AddTarget(_bcab, _feg.CoreProperties.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.CustomPropertiesType:
		_cae.AddTarget(_bcab, _feg.CustomProperties.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.PresentationPropertiesType:
		_cae.AddTarget(_bcab, _feg._caa.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.ViewPropertiesType:
		_cae.AddTarget(_bcab, _feg._bad.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.TableStylesType:
		_cae.AddTarget(_bcab, _feg._gea.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.HyperLinkType:
		_caf := _gc.NewCT_Hyperlink()
		_fgaa := uint32(len(_feg._bg))
		_cae.AddTarget(_bcab, _caf, _adc, _fgaa)
		_feg._bg = append(_feg._bg, _caf)
	case _fc.CustomXMLType:
		_cfgf := &_fc.XSDAny{}
		_ecb := uint32(len(_feg._gag))
		_cae.AddTarget(_bcab, _cfgf, _adc, _ecb)
		_feg._gag = append(_feg._gag, _cfgf)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._gag))
	case _fc.ChartType:
		_acfd := _eeb.NewChartSpace()
		_fdce := uint32(len(_feg._bf))
		_cae.AddTarget(_bcab, _acfd, _adc, _fdce)
		_feg._bf = append(_feg._bf, _acfd)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._bf))
	case _fc.HandoutMasterType:
		_adgc := _ef.NewHandoutMaster()
		_gab := uint32(len(_feg._gce))
		_cae.AddTarget(_bcab, _adgc, _adc, _gab)
		_feg._gce = append(_feg._gce, _adgc)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._gce))
	case _fc.NotesMasterType:
		_bceg := _ef.NewNotesMaster()
		_egb := uint32(len(_feg._fbd))
		_cae.AddTarget(_bcab, _bceg, _adc, _egb)
		_feg._fbd = append(_feg._fbd, _bceg)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._fbd))
	case _fc.ExtendedPropertiesType:
		_cae.AddTarget(_bcab, _feg.AppProperties.X(), _adc, 0)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, 0)
	case _fc.SlideType:
		_dgbb := _ef.NewSld()
		_feg._ebc = append(_feg._ebc, _dgbb)
		_cae.AddTarget(_bcab, _dgbb, _adc, uint32(len(_feg._ebc)))
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._ebc))
		_ecad := _fd.NewRelationships()
		_cae.AddTarget(_ea.RelationsPathFor(_bcab), _ecad.X(), _adc, 0)
		_feg._ag = append(_feg._ag, _ecad)
	case _fc.SlideMasterType:
		_ead := _ef.NewSldMaster()
		if !_cae.AddTarget(_bcab, _ead, _adc, uint32(len(_feg._dfc)+1)) {
			return nil
		}
		_feg._dfc = append(_feg._dfc, _ead)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._dfc))
		_cad := _fd.NewRelationships()
		_cae.AddTarget(_ea.RelationsPathFor(_bcab), _cad.X(), _adc, 0)
		_feg._dfe = append(_feg._dfe, _cad)
	case _fc.SlideLayoutType:
		_aga := _ef.NewSldLayout()
		if !_cae.AddTarget(_bcab, _aga, _adc, uint32(len(_feg._cga)+1)) {
			return nil
		}
		_feg._cga = append(_feg._cga, _aga)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._cga))
		_de := _fd.NewRelationships()
		_cae.AddTarget(_ea.RelationsPathFor(_bcab), _de.X(), _adc, 0)
		_feg._ddd = append(_feg._ddd, _de)
	case _fc.ThumbnailType:
		for _fgc, _fegf := range _ccf {
			if _fegf == nil {
				continue
			}
			if _fegf.Name == _bcab {
				_dfg, _ace := _fegf.Open()
				if _ace != nil {
					return _ae.Errorf("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073", _ace)
				}
				_feg.Thumbnail, _, _ace = _be.Decode(_dfg)
				_dfg.Close()
				if _ace != nil {
					return _ae.Errorf("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073", _ace)
				}
				_ccf[_fgc] = nil
			}
		}
	case _fc.ThemeType:
		_fbc := _gc.NewTheme()
		if !_cae.AddTarget(_bcab, _fbc, _adc, uint32(len(_feg._cba)+1)) {
			return nil
		}
		_feg._cba = append(_feg._cba, _fbc)
		_ceg.TargetAttr = _fc.RelativeFilename(_fgd, _adg.Typ, _adc, len(_feg._cba))
		_edg := _fd.NewRelationships()
		_cae.AddTarget(_ea.RelationsPathFor(_bcab), _edg.X(), _adc, 0)
		_feg._cfc = append(_feg._cfc, _edg)
	case _fc.ImageType:
		_bcab = _c.Clean(_bcab)
		if _ffb, _gbga := _feg._cgad[_bcab]; _gbga {
			_ceg.TargetAttr = _ffb
			return nil
		}
		_cee := ""
		for _bbg, _afe := range _ccf {
			if _afe == nil {
				continue
			}
			if _afe.Name == _bcab {
				_dec, _cfd := _ea.ExtractToDiskTmp(_afe, _feg.TmpPath)
				if _cfd != nil {
					return _cfd
				}
				_bgdf, _cfd := _fd.ImageFromStorage(_dec)
				if _cfd != nil {
					return _cfd
				}
				_cee = _bgdf.Format
				_gdaa := _fd.MakeImageRef(_bgdf, &_feg.DocBase, _feg._dad)
				_feg.Images = append(_feg.Images, _gdaa)
				_ccf[_bbg] = nil
				_cae.RecordIndex(_bcab, len(_feg.Images))
				break
			}
		}
		_bgeb := _cae.IndexFor(_bcab)
		_ceg.TargetAttr = _fc.RelativeImageFilename(_fgd, _adg.Typ, _adc, _bgeb, _cee)
		_feg._cgad[_bcab] = _ceg.TargetAttr
	default:
		_fc.Log("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073", _adc, _bcab)
	}
	return nil
}

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_dbge TextBox) SetOffsetY(offY float64) {
	_fcea := _dbge.getOff()
	_dce := _d.ToEMU(offY)
	_fcea.YAttr = _gc.ST_Coordinate{ST_CoordinateUnqualified: &_dce}
}

// Presentation is the a presentation base document.
type Presentation struct {
	_fd.DocBase
	_ca   *_ef.Presentation
	_dad  _fd.Relationships
	_ebc  []*_ef.Sld
	_ag   []_fd.Relationships
	_dfc  []*_ef.SldMaster
	_dfe  []_fd.Relationships
	_cga  []*_ef.SldLayout
	_ddd  []_fd.Relationships
	_cba  []*_gc.Theme
	_cfc  []_fd.Relationships
	_gea  _fd.TableStyles
	_caa  PresentationProperties
	_bad  ViewProperties
	_bg   []*_gc.CT_Hyperlink
	_bf   []*_eeb.ChartSpace
	_gce  []*_ef.HandoutMaster
	_fbd  []*_ef.NotesMaster
	_gag  []*_fc.XSDAny
	_cgad map[string]string
}

// X returns the inner wrapped XML type.
func (_fdga Slide) X() *_ef.Sld { return _fdga._dcf }

// X returns the inner wrapped XML type.
func (_ac PresentationProperties) X() *_ef.PresentationPr { return _ac._dgg }

// AddParagraph adds a new paragraph to a placeholder.
func (_dff PlaceHolder) AddParagraph() _eb.Paragraph {
	_dbd := _eb.MakeParagraph(_gc.NewCT_TextParagraph())
	_dff._aef.TxBody.P = append(_dff._aef.TxBody.P, _dbd.X())
	return _dbd
}

// PrnPr returns the PrnPr property.
func (_ce PresentationProperties) PrnPr() *_ef.CT_PrintProperties { return _ce._dgg.PrnPr }

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties() PresentationProperties {
	return PresentationProperties{_dgg: _ef.NewPresentationPr()}
}

// Index returns the placeholder index
func (_ba PlaceHolder) Index() uint32 {
	if _ba._aef.NvSpPr.NvPr.Ph.IdxAttr == nil {
		return 0
	}
	return *_ba._aef.NvSpPr.NvPr.Ph.IdxAttr
}

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_ddfc *Presentation) AddDefaultSlideWithLayout(l SlideLayout) (Slide, error) {
	_fdge, _ed := _ddfc.AddSlideWithLayout(l)
	for _, _bfd := range _fdge.PlaceHolders() {
		_bfd.Clear()
		switch _bfd.Type() {
		case _ef.ST_PlaceholderTypeFtr, _ef.ST_PlaceholderTypeDt, _ef.ST_PlaceholderTypeSldNum:
			_bfd.Remove()
		}
	}
	return _fdge, _ed
}

// GetOrCreateCustomProperties returns the custom properties of the document (and if they not exist yet, creating them first)
func (_ggfg *Presentation) GetOrCreateCustomProperties() _fd.CustomProperties {
	if _ggfg.CustomProperties.X() == nil {
		_ggfg.createCustomProperties()
	}
	return _ggfg.CustomProperties
}

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_eec PlaceHolder) ClearAll() {
	_eec._aef.SpPr = _gc.NewCT_ShapeProperties()
	_eec._aef.TxBody = _gc.NewCT_TextBody()
	_eec._aef.TxBody.LstStyle = _gc.NewCT_TextListStyle()
}

// GetLayoutByName retrieves a slide layout given a layout name.
func (_bgcbc *Presentation) GetLayoutByName(name string) (SlideLayout, error) {
	for _, _afg := range _bgcbc._cga {
		if _afg.CSld.NameAttr != nil && name == *_afg.CSld.NameAttr {
			return SlideLayout{_afg}, nil
		}
	}
	return SlideLayout{}, _fdc.New("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065")
}

// SlideMaster is the slide master for a presentation.
type SlideMaster struct {
	_bcec *Presentation
	_bggd _fd.Relationships
	_ffa  *_ef.SldMaster
}

// Properties returns the properties of the TextBox.
func (_cf Image) Properties() _eb.ShapeProperties {
	if _cf._dd.SpPr == nil {
		_cf._dd.SpPr = _gc.NewCT_ShapeProperties()
	}
	return _eb.MakeShapeProperties(_cf._dd.SpPr)
}

// Slides returns the slides in the presentation.
func (_afc *Presentation) Slides() []Slide {
	_fae := []Slide{}
	for _gcaa, _dbb := range _afc._ebc {
		_fae = append(_fae, Slide{_afc._ca.SldIdLst.SldId[_gcaa], _dbb, _afc})
	}
	return _fae
}

// X returns the inner wrapped XML type.
func (_dcdf SlideLayout) X() *_ef.SldLayout { return _dcdf._faaa }

// WebPr returns the WebPr property.
func (_gga PresentationProperties) WebPr() *_ef.CT_WebProperties { return _gga._dgg.WebPr }

// SlideViewPr returns the SlideViewPr property.
func (_dggg ViewProperties) SlideViewPr() *_ef.CT_SlideViewProperties { return _dggg._fagc.SlideViewPr }

// Type returns the type of the slide layout.
func (_cgdd SlideLayout) Type() _ef.ST_SlideLayoutType { return _cgdd._faaa.TypeAttr }

// AddSlide adds a new slide to the presentation.
func (_fbf *Presentation) AddSlide() Slide {
	_cfce := _ef.NewCT_SlideIdListEntry()
	_cfce.IdAttr = _fbf.nextSlideID()
	_fbf._ca.SldIdLst.SldId = append(_fbf._ca.SldIdLst.SldId, _cfce)
	_bcd := _ef.NewSld()
	_bcd.CSld.SpTree.NvGrpSpPr.CNvPr.IdAttr = 1
	_bcd.CSld.SpTree.GrpSpPr.Xfrm = _gc.NewCT_GroupTransform2D()
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.Off = _gc.NewCT_Point2D()
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.Off.XAttr.ST_CoordinateUnqualified = _fc.Int64(0)
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.Off.YAttr.ST_CoordinateUnqualified = _fc.Int64(0)
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.Ext = _gc.NewCT_PositiveSize2D()
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.Ext.CxAttr = int64(0 * _d.Point)
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.Ext.CyAttr = int64(0 * _d.Point)
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.ChOff = _bcd.CSld.SpTree.GrpSpPr.Xfrm.Off
	_bcd.CSld.SpTree.GrpSpPr.Xfrm.ChExt = _bcd.CSld.SpTree.GrpSpPr.Xfrm.Ext
	_fbf._ebc = append(_fbf._ebc, _bcd)
	_ddf := _fbf._dad.AddAutoRelationship(_fc.DocTypePresentation, _fc.OfficeDocumentType, len(_fbf._ebc), _fc.SlideType)
	_cfce.RIdAttr = _ddf.ID()
	_gdf := _fc.AbsoluteFilename(_fc.DocTypePresentation, _fc.SlideType, len(_fbf._ebc))
	_fbf.ContentTypes.AddOverride(_gdf, _fc.SlideContentType)
	_bac := _fd.NewRelationships()
	_fbf._ag = append(_fbf._ag, _bac)
	_bac.AddAutoRelationship(_fc.DocTypePresentation, _fc.SlideType, len(_fbf._cga), _fc.SlideLayoutType)
	return Slide{_cfce, _bcd, _fbf}
}

// OutlineViewPr returns the OutlineViewPr property.
func (_fgee ViewProperties) OutlineViewPr() *_ef.CT_OutlineViewProperties {
	return _fgee._fagc.OutlineViewPr
}
func _cgba(_aac []*_ef.CT_GroupShapeChoice) []*_ef.CT_GroupShapeChoice {
	var _afd []*_ef.CT_GroupShapeChoice
	for _, _eca := range _aac {
		if len(_eca.Pic) == 0 {
			_afd = append(_afd, _eca)
		}
	}
	return _afd
}

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_fdf PlaceHolder) SetText(text string) {
	_fdf.Clear()
	_ge := _gc.NewEG_TextRun()
	_ge.R = _gc.NewCT_RegularTextRun()
	_ge.R.T = text
	if len(_fdf._aef.TxBody.P) == 0 {
		_fdf._aef.TxBody.P = append(_fdf._aef.TxBody.P, _gc.NewCT_TextParagraph())
	}
	_fdf._aef.TxBody.P[0].EG_TextRun = nil
	_fdf._aef.TxBody.P[0].EG_TextRun = append(_fdf._aef.TxBody.P[0].EG_TextRun, _ge)
}

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_dcge Slide) AddImageToRels(img _fd.ImageRef) string {
	_eaaf := 0
	for _abbf, _gabf := range _dcge._aad.Images {
		if _gabf == img {
			_eaaf = _abbf + 1
			break
		}
	}
	var _dea string
	for _gbd, _fdcg := range _dcge._aad.Slides() {
		if _fdcg._dcf == _dcge._dcf {
			_bdaa := _ae.Sprintf("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073", _eaaf, img.Format())
			_aeg := _dcge._aad._ag[_gbd].AddRelationship(_bdaa, _fc.ImageType)
			_dea = _aeg.ID()
		}
	}
	return _dea
}

// LastViewAttr returns the LastViewAttr property.
func (_agac ViewProperties) LastViewAttr() _ef.ST_ViewType { return _agac._fagc.LastViewAttr }

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_cfcc *Presentation) Close() error {
	if _cfcc.TmpPath != "" {
		return _b.RemoveAll(_cfcc.TmpPath)
	}
	return nil
}
func (_cbe *Presentation) addCustomRelationships() {
	_cbe.ContentTypes.AddOverride("/\u0064o\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063u\u0073\u0074\u006f\u006d.x\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065n\u0078\u006d\u006c\u0066\u006fr\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0063\u0075\u0073\u0074\u006f\u006d\u002d\u0070r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073+\u0078\u006d\u006c")
	_cbe.Rels.AddRelationship("\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c", _fc.CustomPropertiesType)
}

// GridSpacing returns the GridSpacing property.
func (_gggf ViewProperties) GridSpacing() *_gc.CT_PositiveSize2D { return _gggf._fagc.GridSpacing }
func (_bb *Presentation) saveToFile(_ccb string, _bfeg bool) error {
	_gdfg, _ccbd := _ec.Create(_ccb)
	if _ccbd != nil {
		return _ccbd
	}
	defer _gdfg.Close()
	return _bb.save(_gdfg, _bfeg)
}

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_edd Slide) GetPlaceholder(t _ef.ST_PlaceholderType) (PlaceHolder, error) {
	for _, _dbgb := range _edd._dcf.CSld.SpTree.Choice {
		for _, _efd := range _dbgb.Sp {
			if _efd.NvSpPr != nil && _efd.NvSpPr.NvPr != nil && _efd.NvSpPr.NvPr.Ph != nil {
				if _efd.NvSpPr.NvPr.Ph.TypeAttr == t {
					return PlaceHolder{_efd, _edd._dcf}, nil
				}
			}
		}
	}
	return PlaceHolder{}, _fdc.New("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072")
}
func (_ceb *Presentation) nextSlideID() uint32 {
	_bd := uint32(256)
	for _, _fac := range _ceb._ca.SldIdLst.SldId {
		if _fac.IdAttr >= _bd {
			_bd = _fac.IdAttr + 1
		}
	}
	return _bd
}
func _gb() *Presentation {
	_aa := &Presentation{_ca: _ef.NewPresentation()}
	_aa._ca.SldIdLst = _ef.NewCT_SlideIdList()
	_aa._ca.ConformanceAttr = _af.ST_ConformanceClassTransitional
	_aa.AppProperties = _fd.NewAppProperties()
	_aa.CoreProperties = _fd.NewCoreProperties()
	_aa._gea = _fd.NewTableStyles()
	_aa.ContentTypes = _fd.NewContentTypes()
	_aa.Rels = _fd.NewRelationships()
	_aa._dad = _fd.NewRelationships()
	_aa._caa = NewPresentationProperties()
	_aa._bad = NewViewProperties()
	_aa._cgad = map[string]string{}
	return _aa
}

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_cbcc Slide) GetPlaceholderByIndex(idx uint32) (PlaceHolder, error) {
	for _, _cdd := range _cbcc._dcf.CSld.SpTree.Choice {
		for _, _dee := range _cdd.Sp {
			if _dee.NvSpPr != nil && _dee.NvSpPr.NvPr != nil && _dee.NvSpPr.NvPr.Ph != nil {
				if (idx == 0 && _dee.NvSpPr.NvPr.Ph.IdxAttr == nil) || (_dee.NvSpPr.NvPr.Ph.IdxAttr != nil && *_dee.NvSpPr.NvPr.Ph.IdxAttr == idx) {
					return PlaceHolder{_dee, _cbcc._dcf}, nil
				}
			}
		}
	}
	return PlaceHolder{}, _fdc.New("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072")
}

// ViewProperties contains presentation specific properties.
type ViewProperties struct{ _fagc *_ef.ViewPr }

func (_aed *Presentation) createCustomProperties() {
	_aed.CustomProperties = _fd.NewCustomProperties()
	_aed.addCustomRelationships()
}

// X returns TextBox's underlying *pml.CT_Shape.
func (_daeb TextBox) X() *_ef.CT_Shape { return _daeb._bdcg }

// SlideLayouts returns the slide layouts defined in the presentation.
func (_bdgf *Presentation) SlideLayouts() []SlideLayout {
	_aaa := []SlideLayout{}
	for _, _dcb := range _bdgf._cga {
		_aaa = append(_aaa, SlideLayout{_dcb})
	}
	return _aaa
}

// Paragraphs returns the paragraphs defined in the placeholder.
func (_cff PlaceHolder) Paragraphs() []_eb.Paragraph {
	_ab := []_eb.Paragraph{}
	for _, _da := range _cff._aef.TxBody.P {
		_ab = append(_ab, _eb.MakeParagraph(_da))
	}
	return _ab
}

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_cgeg TextBox) SetOffsetX(offX float64) {
	_egg := _cgeg.getOff()
	_gfe := _d.ToEMU(offX)
	_egg.XAttr = _gc.ST_Coordinate{ST_CoordinateUnqualified: &_gfe}
}

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_fbe *Presentation) SaveToFileAsTemplate(path string) error { return _fbe.saveToFile(path, true) }
