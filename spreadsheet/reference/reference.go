//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference

import (
	_a "errors"
	_cb "fmt"
	_bg "github.com/stasomega1/mylib/spreadsheet/update"
	_bf "regexp"
	_g "strconv"
	_c "strings"
)

// String returns a string representation of ColumnReference.
func (_ae ColumnReference) String() string {
	_be := make([]byte, 0, 4)
	if _ae.AbsoluteColumn {
		_be = append(_be, '$')
	}
	_be = append(_be, _ae.Column...)
	return string(_be)
}

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference(s string) (CellReference, error) {
	s = _c.TrimSpace(s)
	if len(s) < 2 {
		return CellReference{}, _a.New("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073")
	}
	_bc := CellReference{}
	_e := _c.Split(s, "\u0021")
	if len(_e) == 2 {
		_bc.SheetName = _e[0]
		s = _e[1]
	}
	if s[0] == '$' {
		_bc.AbsoluteColumn = true
		s = s[1:]
	}
	_gc := -1
_cg:
	for _d := 0; _d < len(s); _d++ {
		switch {
		case s[_d] >= '0' && s[_d] <= '9' || s[_d] == '$':
			_gc = _d
			break _cg
		}
	}
	switch _gc {
	case 0:
		return CellReference{}, _cb.Errorf("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073", s)
	case -1:
		return CellReference{}, _cb.Errorf("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073", s)
	}
	_bc.Column = s[0:_gc]
	if s[_gc] == '$' {
		_bc.AbsoluteRow = true
		_gc++
	}
	_bc.ColumnIdx = ColumnToIndex(_bc.Column)
	_aaf, _da := _g.ParseUint(s[_gc:], 10, 32)
	if _da != nil {
		return CellReference{}, _cb.Errorf("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073", _da)
	}
	_bc.RowIdx = uint32(_aaf)
	return _bc, nil
}

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct {
	ColumnIdx      uint32
	Column         string
	AbsoluteColumn bool
	SheetName      string
}

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference(s string) (ColumnReference, error) {
	s = _c.TrimSpace(s)
	if len(s) < 1 {
		return ColumnReference{}, _a.New("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072")
	}
	_de := ColumnReference{}
	_ed := _c.Split(s, "\u0021")
	if len(_ed) == 2 {
		_de.SheetName = _ed[0]
		s = _ed[1]
	}
	if s[0] == '$' {
		_de.AbsoluteColumn = true
		s = s[1:]
	}
	if !_f.MatchString(s) {
		return ColumnReference{}, _a.New("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a")
	}
	_de.Column = s
	_de.ColumnIdx = ColumnToIndex(_de.Column)
	return _de, nil
}

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct {
	RowIdx         uint32
	ColumnIdx      uint32
	Column         string
	AbsoluteColumn bool
	AbsoluteRow    bool
	SheetName      string
}

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex(col string) uint32 {
	col = _c.ToUpper(col)
	_gd := uint32(0)
	for _, _dc := range col {
		_gd *= 26
		_gd += uint32(_dc - 'A' + 1)
	}
	return _gd - 1
}

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn(col uint32) string {
	var _bfc [64 + 1]byte
	_df := len(_bfc)
	_ga := col
	const _eb = 26
	for _ga >= _eb {
		_df--
		_eca := _ga / _eb
		_bfc[_df] = byte('A' + uint(_ga-_eca*_eb))
		_ga = _eca - 1
	}
	_df--
	_bfc[_df] = byte('A' + uint(_ga))
	return string(_bfc[_df:])
}

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference(s string) (_bfa, _fc ColumnReference, _ged error) {
	_ag := ""
	_ebb := _c.Split(s, "\u0021")
	if len(_ebb) == 2 {
		_ag = _ebb[0]
		s = _ebb[1]
	}
	_fg := _c.Split(s, "\u003a")
	if len(_fg) != 2 {
		return ColumnReference{}, ColumnReference{}, _a.New("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074")
	}
	if _ag != "" {
		_fg[0] = _ag + "\u0021" + _fg[0]
		_fg[1] = _ag + "\u0021" + _fg[1]
	}
	_dfc, _ged := ParseColumnReference(_fg[0])
	if _ged != nil {
		return ColumnReference{}, ColumnReference{}, _ged
	}
	_egc, _ged := ParseColumnReference(_fg[1])
	if _ged != nil {
		return ColumnReference{}, ColumnReference{}, _ged
	}
	return _dfc, _egc, nil
}

var _f = _bf.MustCompile("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024")

// String returns a string representation of CellReference.
func (_ge CellReference) String() string {
	_aa := make([]byte, 0, 4)
	if _ge.AbsoluteColumn {
		_aa = append(_aa, '$')
	}
	_aa = append(_aa, _ge.Column...)
	if _ge.AbsoluteRow {
		_aa = append(_aa, '$')
	}
	_aa = _g.AppendInt(_aa, int64(_ge.RowIdx), 10)
	return string(_aa)
}

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_gb *CellReference) Update(updateType _bg.UpdateAction) *CellReference {
	switch updateType {
	case _bg.UpdateActionRemoveColumn:
		_eg := _gb
		_eg.ColumnIdx = _gb.ColumnIdx - 1
		_eg.Column = IndexToColumn(_eg.ColumnIdx)
		return _eg
	default:
		return _gb
	}
}

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_cd *ColumnReference) Update(updateType _bg.UpdateAction) *ColumnReference {
	switch updateType {
	case _bg.UpdateActionRemoveColumn:
		_bgc := _cd
		_bgc.ColumnIdx = _cd.ColumnIdx - 1
		_bgc.Column = IndexToColumn(_bgc.ColumnIdx)
		return _bgc
	default:
		return _cd
	}
}

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference(s string) (_gag, _af CellReference, _egd error) {
	_gac := ""
	_ea := _c.Split(s, "\u0021")
	if len(_ea) == 2 {
		_gac = _ea[0]
		s = _ea[1]
	}
	_dd := _c.Split(s, "\u003a")
	if len(_dd) != 2 {
		return CellReference{}, CellReference{}, _a.New("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074")
	}
	if _gac != "" {
		_dd[0] = _gac + "\u0021" + _dd[0]
		_dd[1] = _gac + "\u0021" + _dd[1]
	}
	_beg, _egd := ParseCellReference(_dd[0])
	if _egd != nil {
		return CellReference{}, CellReference{}, _egd
	}
	_daa, _egd := ParseCellReference(_dd[1])
	if _egd != nil {
		return CellReference{}, CellReference{}, _egd
	}
	return _beg, _daa, nil
}
