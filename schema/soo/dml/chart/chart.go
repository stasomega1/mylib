//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart

import (
	_c "encoding/xml"
	_aa "fmt"
	_cf "github.com/unidoc/unioffice"
	_d "github.com/unidoc/unioffice/schema/soo/dml"
	_dd "github.com/unidoc/unioffice/schema/soo/dml/chartDrawing"
	_da "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes"
	_a "regexp"
	_e "strconv"
)

type EG_PieChartShared struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
}

func (_dfd *CT_AreaSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dfd.Idx = NewCT_UnsignedInt()
	_dfd.Order = NewCT_UnsignedInt()
_ebf:
	for {
		_dga, _bc := d.Token()
		if _bc != nil {
			return _bc
		}
		switch _ece := _dga.(type) {
		case _c.StartElement:
			switch _ece.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _afa := d.DecodeElement(_dfd.Idx, &_ece); _afa != nil {
					return _afa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _bdf := d.DecodeElement(_dfd.Order, &_ece); _bdf != nil {
					return _bdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_dfd.Tx = NewCT_SerTx()
				if _fef := d.DecodeElement(_dfd.Tx, &_ece); _fef != nil {
					return _fef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dfd.SpPr = _d.NewCT_ShapeProperties()
				if _gecf := d.DecodeElement(_dfd.SpPr, &_ece); _gecf != nil {
					return _gecf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_dfd.PictureOptions = NewCT_PictureOptions()
				if _ef := d.DecodeElement(_dfd.PictureOptions, &_ece); _ef != nil {
					return _ef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_aega := NewCT_DPt()
				if _bcb := d.DecodeElement(_aega, &_ece); _bcb != nil {
					return _bcb
				}
				_dfd.DPt = append(_dfd.DPt, _aega)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dfd.DLbls = NewCT_DLbls()
				if _bfeb := d.DecodeElement(_dfd.DLbls, &_ece); _bfeb != nil {
					return _bfeb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_ebfd := NewCT_Trendline()
				if _bbe := d.DecodeElement(_ebfd, &_ece); _bbe != nil {
					return _bbe
				}
				_dfd.Trendline = append(_dfd.Trendline, _ebfd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_dbcd := NewCT_ErrBars()
				if _gf := d.DecodeElement(_dbcd, &_ece); _gf != nil {
					return _gf
				}
				_dfd.ErrBars = append(_dfd.ErrBars, _dbcd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_dfd.Cat = NewCT_AxDataSource()
				if _cd := d.DecodeElement(_dfd.Cat, &_ece); _cd != nil {
					return _cd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_dfd.Val = NewCT_NumDataSource()
				if _aee := d.DecodeElement(_dfd.Val, &_ece); _aee != nil {
					return _aee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfd.ExtLst = NewCT_ExtensionList()
				if _ac := d.DecodeElement(_dfd.ExtLst, &_ece); _ac != nil {
					return _ac
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fA\u0072\u0065\u0061\u0053\u0065\u0072\u0020\u0025\u0076", _ece.Name)
				if _gca := d.Skip(); _gca != nil {
					return _gca
				}
			}
		case _c.EndElement:
			break _ebf
		case _c.CharData:
		}
	}
	return nil
}

// ST_Thickness is a union type
type ST_Thickness struct {
	ST_ThicknessPercent *string
	Uint32              *uint32
}
type Group_DLbls struct {
	NumFmt          *CT_NumFmt
	SpPr            *_d.CT_ShapeProperties
	TxPr            *_d.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

// Validate validates the CT_HPercent and its children
func (_afbg *CT_HPercent) Validate() error {
	return _afbg.ValidateWithPath("C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}

// ValidateWithPath validates the EG_AreaChartShared and its children, prefixing error messages with path
func (_ccfecd *EG_AreaChartShared) ValidateWithPath(path string) error {
	if _ccfecd.Grouping != nil {
		if _edbedb := _ccfecd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _edbedb != nil {
			return _edbedb
		}
	}
	if _ccfecd.VaryColors != nil {
		if _bfcbf := _ccfecd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bfcbf != nil {
			return _bfcbf
		}
	}
	for _ddfgf, _gcgf := range _ccfecd.Ser {
		if _acfda := _gcgf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ddfgf)); _acfda != nil {
			return _acfda
		}
	}
	if _ccfecd.DLbls != nil {
		if _fedba := _ccfecd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fedba != nil {
			return _fedba
		}
	}
	if _ccfecd.DropLines != nil {
		if _ffaaga := _ccfecd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ffaaga != nil {
			return _ffaaga
		}
	}
	return nil
}
func (_ecddc ST_ScatterStyle) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gaef := _c.Attr{}
	_gaef.Name = name
	switch _ecddc {
	case ST_ScatterStyleUnset:
		_gaef.Value = ""
	case ST_ScatterStyleNone:
		_gaef.Value = "\u006e\u006f\u006e\u0065"
	case ST_ScatterStyleLine:
		_gaef.Value = "\u006c\u0069\u006e\u0065"
	case ST_ScatterStyleLineMarker:
		_gaef.Value = "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleMarker:
		_gaef.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleSmooth:
		_gaef.Value = "\u0073\u006d\u006f\u006f\u0074\u0068"
	case ST_ScatterStyleSmoothMarker:
		_gaef.Value = "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return _gaef, nil
}
func NewCT_PlotAreaChoice() *CT_PlotAreaChoice { _fccfb := &CT_PlotAreaChoice{}; return _fccfb }

// ValidateWithPath validates the CT_Crosses and its children, prefixing error messages with path
func (_fcba *CT_Crosses) ValidateWithPath(path string) error {
	if _fcba.ValAttr == ST_CrossesUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bbaga := _fcba.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbaga != nil {
		return _bbaga
	}
	return nil
}

// Validate validates the CT_SecondPieSize and its children
func (_abcfb *CT_SecondPieSize) Validate() error {
	return _abcfb.ValidateWithPath("\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065")
}

type ST_ErrDir byte
type EG_AxShared struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
}

// ValidateWithPath validates the CT_DLblPos and its children, prefixing error messages with path
func (_ggab *CT_DLblPos) ValidateWithPath(path string) error {
	if _ggab.ValAttr == ST_DLblPosUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cfab := _ggab.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfab != nil {
		return _cfab
	}
	return nil
}

const ST_OverlapPercentPattern = "\u0028\u002d\u003f\u0030\u002a\u0028(\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d[\u0030\u002d\u0039\u005d\u0029\u007c\u00310\u0030\u0029\u0029\u0025"

func (_dgdfd ST_CrossBetween) Validate() error { return _dgdfd.ValidateWithPath("") }

// Validate validates the CT_Layout and its children
func (_dadgc *CT_Layout) Validate() error {
	return _dadgc.ValidateWithPath("\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t")
}
func (_bdb *CT_Bar3DChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bdb.BarDir = NewCT_BarDir()
_bab:
	for {
		_bbcg, _caf := d.Token()
		if _caf != nil {
			return _caf
		}
		switch _caa := _bbcg.(type) {
		case _c.StartElement:
			switch _caa.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _gff := d.DecodeElement(_bdb.BarDir, &_caa); _gff != nil {
					return _gff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_bdb.Grouping = NewCT_BarGrouping()
				if _gaff := d.DecodeElement(_bdb.Grouping, &_caa); _gaff != nil {
					return _gaff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bdb.VaryColors = NewCT_Boolean()
				if _fba := d.DecodeElement(_bdb.VaryColors, &_caa); _fba != nil {
					return _fba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_babf := NewCT_BarSer()
				if _abcf := d.DecodeElement(_babf, &_caa); _abcf != nil {
					return _abcf
				}
				_bdb.Ser = append(_bdb.Ser, _babf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bdb.DLbls = NewCT_DLbls()
				if _ebfa := d.DecodeElement(_bdb.DLbls, &_caa); _ebfa != nil {
					return _ebfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_bdb.GapWidth = NewCT_GapAmount()
				if _aage := d.DecodeElement(_bdb.GapWidth, &_caa); _aage != nil {
					return _aage
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_bdb.GapDepth = NewCT_GapAmount()
				if _bfac := d.DecodeElement(_bdb.GapDepth, &_caa); _bfac != nil {
					return _bfac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_bdb.Shape = NewCT_Shape()
				if _egg := d.DecodeElement(_bdb.Shape, &_caa); _egg != nil {
					return _egg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bgec := NewCT_UnsignedInt()
				if _bdda := d.DecodeElement(_bgec, &_caa); _bdda != nil {
					return _bdda
				}
				_bdb.AxId = append(_bdb.AxId, _bgec)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdb.ExtLst = NewCT_ExtensionList()
				if _cde := d.DecodeElement(_bdb.ExtLst, &_caa); _cde != nil {
					return _cde
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _caa.Name)
				if _dccc := d.Skip(); _dccc != nil {
					return _dccc
				}
			}
		case _c.EndElement:
			break _bab
		case _c.CharData:
		}
	}
	return nil
}
func (_cegac ST_LayoutMode) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_cegac.String(), start)
}
func (_acabc *CT_PageSetup) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _acabc.PaperSizeAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.PaperSizeAttr)})
	}
	if _acabc.PaperHeightAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.PaperHeightAttr)})
	}
	if _acabc.PaperWidthAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.PaperWidthAttr)})
	}
	if _acabc.FirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.FirstPageNumberAttr)})
	}
	if _acabc.OrientationAttr != ST_PageSetupOrientationUnset {
		_debcc, _bdfe := _acabc.OrientationAttr.MarshalXMLAttr(_c.Name{Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"})
		if _bdfe != nil {
			return _bdfe
		}
		start.Attr = append(start.Attr, _debcc)
	}
	if _acabc.BlackAndWhiteAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_acabc.BlackAndWhiteAttr))})
	}
	if _acabc.DraftAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0064\u0072\u0061f\u0074"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_acabc.DraftAttr))})
	}
	if _acabc.UseFirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_acabc.UseFirstPageNumberAttr))})
	}
	if _acabc.HorizontalDpiAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.HorizontalDpiAttr)})
	}
	if _acabc.VerticalDpiAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.VerticalDpiAttr)})
	}
	if _acabc.CopiesAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0063\u006f\u0070\u0069\u0065\u0073"}, Value: _aa.Sprintf("\u0025\u0076", *_acabc.CopiesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fdgb *CT_DepthPercent) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _decd := range start.Attr {
		if _decd.Name.Local == "\u0076\u0061\u006c" {
			_ddcdd, _cfae := ParseUnionST_DepthPercent(_decd.Value)
			if _cfae != nil {
				return _cfae
			}
			_fdgb.ValAttr = &_ddcdd
			continue
		}
	}
	for {
		_bdcd, _bgdb := d.Token()
		if _bgdb != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0065\u0070\u0074\u0068\u0050e\u0072\u0063\u0065n\u0074:\u0020\u0025\u0073", _bgdb)
		}
		if _cggd, _bceg := _bdcd.(_c.EndElement); _bceg && _cggd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_SplitType and its children
func (_fafc *CT_SplitType) Validate() error {
	return _fafc.ValidateWithPath("\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065")
}

type CT_NumFmt struct {
	FormatCodeAttr   string
	SourceLinkedAttr *bool
}

func NewCT_PrintSettings() *CT_PrintSettings { _ccgcg := &CT_PrintSettings{}; return _ccgcg }
func (_ebeab *CT_StrVal) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dgfcf := range start.Attr {
		if _dgfcf.Name.Local == "\u0069\u0064\u0078" {
			_bfgaf, _aacda := _e.ParseUint(_dgfcf.Value, 10, 32)
			if _aacda != nil {
				return _aacda
			}
			_ebeab.IdxAttr = uint32(_bfgaf)
			continue
		}
	}
_cgcgg:
	for {
		_dacc, _dfgcdd := d.Token()
		if _dfgcdd != nil {
			return _dfgcdd
		}
		switch _fbae := _dacc.(type) {
		case _c.StartElement:
			switch _fbae.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _dcdgc := d.DecodeElement(&_ebeab.V, &_fbae); _dcdgc != nil {
					return _dcdgc
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072V\u0061\u006c \u0025\u0076", _fbae.Name)
				if _acgf := d.Skip(); _acgf != nil {
					return _acgf
				}
			}
		case _c.EndElement:
			break _cgcgg
		case _c.CharData:
		}
	}
	return nil
}

type CT_Layout struct {
	ManualLayout *CT_ManualLayout
	ExtLst       *CT_ExtensionList
}

// ValidateWithPath validates the CT_LegendEntryChoice and its children, prefixing error messages with path
func (_eecb *CT_LegendEntryChoice) ValidateWithPath(path string) error {
	if _eecb.Delete != nil {
		if _eddce := _eecb.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _eddce != nil {
			return _eddce
		}
	}
	if _eecb.TxPr != nil {
		if _dedaee := _eecb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dedaee != nil {
			return _dedaee
		}
	}
	return nil
}

// Validate validates the CT_RadarChart and its children
func (_affef *CT_RadarChart) Validate() error {
	return _affef.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_befb *CT_Order) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _befb.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_befb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

const (
	ST_SizeRepresentsUnset ST_SizeRepresents = 0
	ST_SizeRepresentsArea  ST_SizeRepresents = 1
	ST_SizeRepresentsW     ST_SizeRepresents = 2
)

// Validate validates the CT_MarkerStyle and its children
func (_cdgaf *CT_MarkerStyle) Validate() error {
	return _cdgaf.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065")
}

// ST_HPercent is a union type
type ST_HPercent struct {
	ST_HPercentWithSymbol *string
	ST_HPercentUShort     *uint16
}

func (_dfeba *ST_SecondPieSize) ValidateWithPath(path string) error {
	_bgcdd := []string{}
	if _dfeba.ST_SecondPieSizePercent != nil {
		_bgcdd = append(_bgcdd, "\u0053\u0054\u005fSe\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _dfeba.ST_SecondPieSizeUShort != nil {
		_bgcdd = append(_bgcdd, "\u0053\u0054\u005f\u0053ec\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0055\u0053\u0068\u006fr\u0074")
	}
	if len(_bgcdd) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bgcdd)
	}
	return nil
}

// ValidateWithPath validates the CT_Protection and its children, prefixing error messages with path
func (_acgd *CT_Protection) ValidateWithPath(path string) error {
	if _acgd.ChartObject != nil {
		if _eabb := _acgd.ChartObject.ValidateWithPath(path + "\u002f\u0043\u0068a\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"); _eabb != nil {
			return _eabb
		}
	}
	if _acgd.Data != nil {
		if _ddag := _acgd.Data.ValidateWithPath(path + "\u002f\u0044\u0061t\u0061"); _ddag != nil {
			return _ddag
		}
	}
	if _acgd.Formatting != nil {
		if _eada := _acgd.Formatting.ValidateWithPath(path + "/\u0046\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"); _eada != nil {
			return _eada
		}
	}
	if _acgd.Selection != nil {
		if _cdggc := _acgd.Selection.ValidateWithPath(path + "\u002f\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"); _cdggc != nil {
			return _cdggc
		}
	}
	if _acgd.UserInterface != nil {
		if _dfcgg := _acgd.UserInterface.ValidateWithPath(path + "\u002f\u0055\u0073\u0065\u0072\u0049\u006e\u0074\u0065r\u0066\u0061\u0063\u0065"); _dfcgg != nil {
			return _dfcgg
		}
	}
	return nil
}
func (_aaag *CT_DepthPercent) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _aaag.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_aaag.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_Period() *CT_Period { _cbcff := &CT_Period{}; return _cbcff }
func (_cbgbdb *ST_OfPieType) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_cbgbdb = 0
	case "\u0070\u0069\u0065":
		*_cbgbdb = 1
	case "\u0062\u0061\u0072":
		*_cbgbdb = 2
	}
	return nil
}
func (_bgce *CT_RotX) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bgce.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_bgce.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ecab *CT_NumRef) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_dbec:
	for {
		_fbdg, _aecd := d.Token()
		if _aecd != nil {
			return _aecd
		}
		switch _dadf := _fbdg.(type) {
		case _c.StartElement:
			switch _dadf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _gadd := d.DecodeElement(&_ecab.F, &_dadf); _gadd != nil {
					return _gadd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}:
				_ecab.NumCache = NewCT_NumData()
				if _ddfce := d.DecodeElement(_ecab.NumCache, &_dadf); _ddfce != nil {
					return _ddfce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecab.ExtLst = NewCT_ExtensionList()
				if _fefec := d.DecodeElement(_ecab.ExtLst, &_dadf); _fefec != nil {
					return _fefec
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dR\u0065\u0066 \u0025\u0076", _dadf.Name)
				if _abeb := d.Skip(); _abeb != nil {
					return _abeb
				}
			}
		case _c.EndElement:
			break _dbec
		case _c.CharData:
		}
	}
	return nil
}

type CT_BuiltInUnit struct{ ValAttr ST_BuiltInUnit }

func (_dde *CT_BubbleChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dde.VaryColors != nil {
		_cca := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dde.VaryColors, _cca)
	}
	if _dde.Ser != nil {
		_dfgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bcfd := range _dde.Ser {
			e.EncodeElement(_bcfd, _dfgf)
		}
	}
	if _dde.DLbls != nil {
		_fee := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dde.DLbls, _fee)
	}
	if _dde.Bubble3D != nil {
		_egac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_dde.Bubble3D, _egac)
	}
	if _dde.BubbleScale != nil {
		_aaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}}
		e.EncodeElement(_dde.BubbleScale, _aaf)
	}
	if _dde.ShowNegBubbles != nil {
		_bbag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077N\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"}}
		e.EncodeElement(_dde.ShowNegBubbles, _bbag)
	}
	if _dde.SizeRepresents != nil {
		_bgac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0069\u007a\u0065R\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"}}
		e.EncodeElement(_dde.SizeRepresents, _bgac)
	}
	_ffe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bbca := range _dde.AxId {
		e.EncodeElement(_bbca, _ffe)
	}
	if _dde.ExtLst != nil {
		_ecbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dde.ExtLst, _ecbd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gfgf *CT_ChartLines) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _gfgf.SpPr != nil {
		_cdc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gfgf.SpPr, _cdc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BubbleSer and its children
func (_bfg *CT_BubbleSer) Validate() error {
	return _bfg.ValidateWithPath("\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072")
}
func (_edd *CT_BandFmts) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _edd.BandFmt != nil {
		_daab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0062\u0061\u006e\u0064\u0046\u006dt"}}
		for _, _ffd := range _edd.BandFmt {
			e.EncodeElement(_ffd, _daab)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_MarkerSize() *CT_MarkerSize          { _efgf := &CT_MarkerSize{}; return _efgf }
func NewCT_SerTxChoice() *CT_SerTxChoice        { _dcad := &CT_SerTxChoice{}; return _dcad }
func (_ecaca *ST_DepthPercent) Validate() error { return _ecaca.ValidateWithPath("") }

type CT_TxChoice struct {
	StrRef *CT_StrRef
	Rich   *_d.CT_TextBody
}
type CT_ErrDir struct{ ValAttr ST_ErrDir }

func (_bcfe *CT_DLblsChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bcfe.Delete != nil {
		_dadg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bcfe.Delete, _dadg)
	}
	if _bcfe.NumFmt != nil {
		_dabe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bcfe.NumFmt, _dabe)
	}
	if _bcfe.SpPr != nil {
		_ggea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bcfe.SpPr, _ggea)
	}
	if _bcfe.TxPr != nil {
		_becf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bcfe.TxPr, _becf)
	}
	if _bcfe.DLblPos != nil {
		_ebacf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_bcfe.DLblPos, _ebacf)
	}
	if _bcfe.ShowLegendKey != nil {
		_gbfa := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_bcfe.ShowLegendKey, _gbfa)
	}
	if _bcfe.ShowVal != nil {
		_faeae := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_bcfe.ShowVal, _faeae)
	}
	if _bcfe.ShowCatName != nil {
		_afece := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bcfe.ShowCatName, _afece)
	}
	if _bcfe.ShowSerName != nil {
		_abgeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bcfe.ShowSerName, _abgeg)
	}
	if _bcfe.ShowPercent != nil {
		_fece := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_bcfe.ShowPercent, _fece)
	}
	if _bcfe.ShowBubbleSize != nil {
		_ebfdg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_bcfe.ShowBubbleSize, _ebfdg)
	}
	if _bcfe.Separator != nil {
		_ccfg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_cf.AddPreserveSpaceAttr(&_ccfg, *_bcfe.Separator)
		e.EncodeElement(_bcfe.Separator, _ccfg)
	}
	if _bcfe.ShowLeaderLines != nil {
		_debf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcfe.ShowLeaderLines, _debf)
	}
	if _bcfe.LeaderLines != nil {
		_dgadb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcfe.LeaderLines, _dgadb)
	}
	return nil
}

// Validate validates the CT_Period and its children
func (_fgfce *CT_Period) Validate() error {
	return _fgfce.ValidateWithPath("\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd")
}

// Validate validates the CT_ScatterChart and its children
func (_agef *CT_ScatterChart) Validate() error {
	return _agef.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_cdegc *ST_Overlap) Validate() error { return _cdegc.ValidateWithPath("") }

type CT_PlotArea struct {
	Layout  *CT_Layout
	Choice  []*CT_PlotAreaChoice
	CChoice *CT_PlotAreaChoice1
	DTable  *CT_DTable
	SpPr    *_d.CT_ShapeProperties
	ExtLst  *CT_ExtensionList
}

func (_adgd *UserShapes) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_adgd.CT_Drawing = *_dd.NewCT_Drawing()
	for {
		_dcefe, _eadca := d.Token()
		if _eadca != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073\u003a\u0020%\u0073", _eadca)
		}
		if _fbggb, _gfge := _dcefe.(_c.EndElement); _gfge && _fbggb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ddgee *CT_MarkerStyle) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ddgee.ValAttr = ST_MarkerStyle(1)
	for _, _dddb := range start.Attr {
		if _dddb.Name.Local == "\u0076\u0061\u006c" {
			_ddgee.ValAttr.UnmarshalXMLAttr(_dddb)
			continue
		}
	}
	for {
		_daadg, _adfa := d.Token()
		if _adfa != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u0072\u006b\u0065\u0072\u0053\u0074\u0079\u006c\u0065:\u0020\u0025\u0073", _adfa)
		}
		if _cbad, _bfbaa := _daadg.(_c.EndElement); _bfbaa && _cbad.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fbed *CT_LblAlgn) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_cfgb, _bfaed := _fbed.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _bfaed != nil {
		return _bfaed
	}
	start.Attr = append(start.Attr, _cfgb)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_adffd *ST_Crosses) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_adffd = 0
	case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
		*_adffd = 1
	case "\u006d\u0061\u0078":
		*_adffd = 2
	case "\u006d\u0069\u006e":
		*_adffd = 3
	}
	return nil
}
func (_bdbe *CT_BarGrouping) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _gdf := range start.Attr {
		if _gdf.Name.Local == "\u0076\u0061\u006c" {
			_bdbe.ValAttr.UnmarshalXMLAttr(_gdf)
			continue
		}
	}
	for {
		_edfc, _eea := d.Token()
		if _eea != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0061\u0072\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067:\u0020\u0025\u0073", _eea)
		}
		if _gafb, _defe := _edfc.(_c.EndElement); _defe && _gafb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrValType and its children, prefixing error messages with path
func (_fdbe *CT_ErrValType) ValidateWithPath(path string) error {
	if _fdbb := _fdbe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fdbb != nil {
		return _fdbb
	}
	return nil
}

// Validate validates the CT_NumFmt and its children
func (_bgace *CT_NumFmt) Validate() error {
	return _bgace.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt")
}
func (_edcc *ST_LayoutTarget) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ebdad, _edfgad := d.Token()
	if _edfgad != nil {
		return _edfgad
	}
	if _bbfca, _aeefd := _ebdad.(_c.EndElement); _aeefd && _bbfca.Name == start.Name {
		*_edcc = 1
		return nil
	}
	if _fcbfc, _dgead := _ebdad.(_c.CharData); !_dgead {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebdad)
	} else {
		switch string(_fcbfc) {
		case "":
			*_edcc = 0
		case "\u0069\u006e\u006ee\u0072":
			*_edcc = 1
		case "\u006f\u0075\u0074e\u0072":
			*_edcc = 2
		}
	}
	_ebdad, _edfgad = d.Token()
	if _edfgad != nil {
		return _edfgad
	}
	if _edgfd, _ccgee := _ebdad.(_c.EndElement); _ccgee && _edgfd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebdad)
}
func (_ffbf *ST_BubbleScale) Validate() error { return _ffbf.ValidateWithPath("") }
func NewCT_BubbleSer() *CT_BubbleSer {
	_acbc := &CT_BubbleSer{}
	_acbc.Idx = NewCT_UnsignedInt()
	_acbc.Order = NewCT_UnsignedInt()
	return _acbc
}
func (_beac *CT_NumData) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _beac.FormatCode != nil {
		_ebdf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}}
		_cf.AddPreserveSpaceAttr(&_ebdf, *_beac.FormatCode)
		e.EncodeElement(_beac.FormatCode, _ebdf)
	}
	if _beac.PtCount != nil {
		_bgca := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_beac.PtCount, _bgca)
	}
	if _beac.Pt != nil {
		_cggc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _becg := range _beac.Pt {
			e.EncodeElement(_becg, _cggc)
		}
	}
	if _beac.ExtLst != nil {
		_agdb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beac.ExtLst, _agdb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dfeed ST_AxPos) String() string {
	switch _dfeed {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	case 4:
		return "\u0074"
	}
	return ""
}
func (_aafgf *CT_NumDataSource) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_aafgf.Choice = NewCT_NumDataSourceChoice()
_abfdfa:
	for {
		_bbead, _fcfg := d.Token()
		if _fcfg != nil {
			return _fcfg
		}
		switch _bbdd := _bbead.(type) {
		case _c.StartElement:
			switch _bbdd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_aafgf.Choice = NewCT_NumDataSourceChoice()
				if _daacc := d.DecodeElement(&_aafgf.Choice.NumRef, &_bbdd); _daacc != nil {
					return _daacc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_aafgf.Choice = NewCT_NumDataSourceChoice()
				if _gfed := d.DecodeElement(&_aafgf.Choice.NumLit, &_bbdd); _gfed != nil {
					return _gfed
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025v", _bbdd.Name)
				if _dffe := d.Skip(); _dffe != nil {
					return _dffe
				}
			}
		case _c.EndElement:
			break _abfdfa
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TrendlineLbl and its children, prefixing error messages with path
func (_bcfef *CT_TrendlineLbl) ValidateWithPath(path string) error {
	if _bcfef.Layout != nil {
		if _dgceg := _bcfef.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _dgceg != nil {
			return _dgceg
		}
	}
	if _bcfef.Tx != nil {
		if _dfdf := _bcfef.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dfdf != nil {
			return _dfdf
		}
	}
	if _bcfef.NumFmt != nil {
		if _feegaf := _bcfef.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _feegaf != nil {
			return _feegaf
		}
	}
	if _bcfef.SpPr != nil {
		if _bdfgb := _bcfef.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bdfgb != nil {
			return _bdfgb
		}
	}
	if _bcfef.TxPr != nil {
		if _dcbbb := _bcfef.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dcbbb != nil {
			return _dcbbb
		}
	}
	if _bcfef.ExtLst != nil {
		if _bcga := _bcfef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcga != nil {
			return _bcga
		}
	}
	return nil
}
func (_cdbf *CT_ValAx) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cdbf.AxId = NewCT_UnsignedInt()
	_cdbf.Scaling = NewCT_Scaling()
	_cdbf.AxPos = NewCT_AxPos()
	_cdbf.CrossAx = NewCT_UnsignedInt()
_gdee:
	for {
		_bbfa, _deccd := d.Token()
		if _deccd != nil {
			return _deccd
		}
		switch _cgef := _bbfa.(type) {
		case _c.StartElement:
			switch _cgef.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _aaabg := d.DecodeElement(_cdbf.AxId, &_cgef); _aaabg != nil {
					return _aaabg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ceabe := d.DecodeElement(_cdbf.Scaling, &_cgef); _ceabe != nil {
					return _ceabe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_cdbf.Delete = NewCT_Boolean()
				if _gdbdf := d.DecodeElement(_cdbf.Delete, &_cgef); _gdbdf != nil {
					return _gdbdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _ebbgb := d.DecodeElement(_cdbf.AxPos, &_cgef); _ebbgb != nil {
					return _ebbgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cdbf.MajorGridlines = NewCT_ChartLines()
				if _eedcba := d.DecodeElement(_cdbf.MajorGridlines, &_cgef); _eedcba != nil {
					return _eedcba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cdbf.MinorGridlines = NewCT_ChartLines()
				if _aggcd := d.DecodeElement(_cdbf.MinorGridlines, &_cgef); _aggcd != nil {
					return _aggcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_cdbf.Title = NewCT_Title()
				if _ecgf := d.DecodeElement(_cdbf.Title, &_cgef); _ecgf != nil {
					return _ecgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cdbf.NumFmt = NewCT_NumFmt()
				if _bcee := d.DecodeElement(_cdbf.NumFmt, &_cgef); _bcee != nil {
					return _bcee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cdbf.MajorTickMark = NewCT_TickMark()
				if _cbgdg := d.DecodeElement(_cdbf.MajorTickMark, &_cgef); _cbgdg != nil {
					return _cbgdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cdbf.MinorTickMark = NewCT_TickMark()
				if _aeggb := d.DecodeElement(_cdbf.MinorTickMark, &_cgef); _aeggb != nil {
					return _aeggb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_cdbf.TickLblPos = NewCT_TickLblPos()
				if _bfgae := d.DecodeElement(_cdbf.TickLblPos, &_cgef); _bfgae != nil {
					return _bfgae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cdbf.SpPr = _d.NewCT_ShapeProperties()
				if _gacgd := d.DecodeElement(_cdbf.SpPr, &_cgef); _gacgd != nil {
					return _gacgd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cdbf.TxPr = _d.NewCT_TextBody()
				if _cdeaf := d.DecodeElement(_cdbf.TxPr, &_cgef); _cdeaf != nil {
					return _cdeaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _agcec := d.DecodeElement(_cdbf.CrossAx, &_cgef); _agcec != nil {
					return _agcec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_cdbf.Choice = NewEG_AxSharedChoice()
				if _cgacg := d.DecodeElement(&_cdbf.Choice.Crosses, &_cgef); _cgacg != nil {
					return _cgacg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_cdbf.Choice = NewEG_AxSharedChoice()
				if _dggcg := d.DecodeElement(&_cdbf.Choice.CrossesAt, &_cgef); _dggcg != nil {
					return _dggcg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}:
				_cdbf.CrossBetween = NewCT_CrossBetween()
				if _dbdg := d.DecodeElement(_cdbf.CrossBetween, &_cgef); _dbdg != nil {
					return _dbdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_cdbf.MajorUnit = NewCT_AxisUnit()
				if _fcag := d.DecodeElement(_cdbf.MajorUnit, &_cgef); _fcag != nil {
					return _fcag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_cdbf.MinorUnit = NewCT_AxisUnit()
				if _fada := d.DecodeElement(_cdbf.MinorUnit, &_cgef); _fada != nil {
					return _fada
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}:
				_cdbf.DispUnits = NewCT_DispUnits()
				if _aecbb := d.DecodeElement(_cdbf.DispUnits, &_cgef); _aecbb != nil {
					return _aecbb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdbf.ExtLst = NewCT_ExtensionList()
				if _bfefa := d.DecodeElement(_cdbf.ExtLst, &_cgef); _bfefa != nil {
					return _bfefa
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078\u0020\u0025\u0076", _cgef.Name)
				if _feab := d.Skip(); _feab != nil {
					return _feab
				}
			}
		case _c.EndElement:
			break _gdee
		case _c.CharData:
		}
	}
	return nil
}
func (_aace ST_TickLblPos) Validate() error { return _aace.ValidateWithPath("") }

type CT_LegendPos struct{ ValAttr ST_LegendPos }
type CT_DTable struct {
	ShowHorzBorder *CT_Boolean
	ShowVertBorder *CT_Boolean
	ShowOutline    *CT_Boolean
	ShowKeys       *CT_Boolean
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	ExtLst         *CT_ExtensionList
}

func NewCT_HPercent() *CT_HPercent { _ffce := &CT_HPercent{}; return _ffce }

const (
	ST_PictureFormatUnset      ST_PictureFormat = 0
	ST_PictureFormatStretch    ST_PictureFormat = 1
	ST_PictureFormatStack      ST_PictureFormat = 2
	ST_PictureFormatStackScale ST_PictureFormat = 3
)

// Validate validates the CT_DispUnitsChoice and its children
func (_efecb *CT_DispUnitsChoice) Validate() error {
	return _efecb.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006ei\u0074\u0073C\u0068\u006f\u0069\u0063\u0065")
}
func (_fccg *CT_BubbleScale) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fccg.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_fccg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_DispUnits() *CT_DispUnits { _ecda := &CT_DispUnits{}; return _ecda }
func (_eedfb *CT_HeaderFooter) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _eedfb.AlignWithMarginsAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_eedfb.AlignWithMarginsAttr))})
	}
	if _eedfb.DifferentOddEvenAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_eedfb.DifferentOddEvenAttr))})
	}
	if _eedfb.DifferentFirstAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_eedfb.DifferentFirstAttr))})
	}
	e.EncodeToken(start)
	if _eedfb.OddHeader != nil {
		_face := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006f\u0064\u0064\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_cf.AddPreserveSpaceAttr(&_face, *_eedfb.OddHeader)
		e.EncodeElement(_eedfb.OddHeader, _face)
	}
	if _eedfb.OddFooter != nil {
		_dbdc := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006f\u0064\u0064\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_cf.AddPreserveSpaceAttr(&_dbdc, *_eedfb.OddFooter)
		e.EncodeElement(_eedfb.OddFooter, _dbdc)
	}
	if _eedfb.EvenHeader != nil {
		_egcge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_cf.AddPreserveSpaceAttr(&_egcge, *_eedfb.EvenHeader)
		e.EncodeElement(_eedfb.EvenHeader, _egcge)
	}
	if _eedfb.EvenFooter != nil {
		_gabbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_cf.AddPreserveSpaceAttr(&_gabbc, *_eedfb.EvenFooter)
		e.EncodeElement(_eedfb.EvenFooter, _gabbc)
	}
	if _eedfb.FirstHeader != nil {
		_cdba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_cf.AddPreserveSpaceAttr(&_cdba, *_eedfb.FirstHeader)
		e.EncodeElement(_eedfb.FirstHeader, _cdba)
	}
	if _eedfb.FirstFooter != nil {
		_facb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_cf.AddPreserveSpaceAttr(&_facb, *_eedfb.FirstFooter)
		e.EncodeElement(_eedfb.FirstFooter, _facb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_febbe ST_TimeUnit) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_cdgba := _c.Attr{}
	_cdgba.Name = name
	switch _febbe {
	case ST_TimeUnitUnset:
		_cdgba.Value = ""
	case ST_TimeUnitDays:
		_cdgba.Value = "\u0064\u0061\u0079\u0073"
	case ST_TimeUnitMonths:
		_cdgba.Value = "\u006d\u006f\u006e\u0074\u0068\u0073"
	case ST_TimeUnitYears:
		_cdgba.Value = "\u0079\u0065\u0061r\u0073"
	}
	return _cdgba, nil
}

// Validate validates the CT_PageSetup and its children
func (_fbgd *CT_PageSetup) Validate() error {
	return _fbgd.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070")
}
func (_dbgcg *CT_Protection) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dbgcg.ChartObject != nil {
		_cccda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}}
		e.EncodeElement(_dbgcg.ChartObject, _cccda)
	}
	if _dbgcg.Data != nil {
		_edaea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0061"}}
		e.EncodeElement(_dbgcg.Data, _edaea)
	}
	if _dbgcg.Formatting != nil {
		_adab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}}
		e.EncodeElement(_dbgcg.Formatting, _adab)
	}
	if _dbgcg.Selection != nil {
		_baagc := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_dbgcg.Selection, _baagc)
	}
	if _dbgcg.UserInterface != nil {
		_bgfc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0075s\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}}
		e.EncodeElement(_dbgcg.UserInterface, _bgfc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_aceaf *CT_ScatterStyle) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _aceaf.ValAttr != ST_ScatterStyleUnset {
		_cebfg, _bdgeb := _aceaf.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _bdgeb != nil {
			return _bdgeb
		}
		start.Attr = append(start.Attr, _cebfg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ErrDir and its children, prefixing error messages with path
func (_faaa *CT_ErrDir) ValidateWithPath(path string) error {
	if _faaa.ValAttr == ST_ErrDirUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _fecbc := _faaa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fecbc != nil {
		return _fecbc
	}
	return nil
}

// Validate validates the CT_LayoutMode and its children
func (_adage *CT_LayoutMode) Validate() error {
	return _adage.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065")
}
func (_befbd ST_LayoutMode) String() string {
	switch _befbd {
	case 0:
		return ""
	case 1:
		return "\u0065\u0064\u0067\u0065"
	case 2:
		return "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return ""
}

type CT_Bar3DChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	GapDepth   *CT_GapAmount
	Shape      *CT_Shape
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_bbcgd *CT_BarGrouping) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bbcgd.ValAttr != ST_BarGroupingUnset {
		_bdc, _gcff := _bbcgd.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _gcff != nil {
			return _gcff
		}
		start.Attr = append(start.Attr, _bdc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_DLblChoice struct {
	Delete         *CT_Boolean
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_deed ST_Thickness) String() string {
	if _deed.ST_ThicknessPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_deed.ST_ThicknessPercent)
	}
	if _deed.Uint32 != nil {
		return _aa.Sprintf("\u0025\u0076", *_deed.Uint32)
	}
	return ""
}

// Validate validates the CT_UpDownBars and its children
func (_fggbc *CT_UpDownBars) Validate() error {
	return _fggbc.ValidateWithPath("\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073")
}
func (_edbe *CT_BarDir) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _fac := range start.Attr {
		if _fac.Name.Local == "\u0076\u0061\u006c" {
			_edbe.ValAttr.UnmarshalXMLAttr(_fac)
			continue
		}
	}
	for {
		_gbb, _ccd := d.Token()
		if _ccd != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0042\u0061\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _ccd)
		}
		if _acab, _fegc := _gbb.(_c.EndElement); _fegc && _acab.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_UpDownBars struct {
	GapWidth *CT_GapAmount
	UpBars   *CT_UpDownBar
	DownBars *CT_UpDownBar
	ExtLst   *CT_ExtensionList
}
type CT_SurfaceSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_d.CT_ShapeProperties
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_DispUnits and its children, prefixing error messages with path
func (_fdca *CT_DispUnits) ValidateWithPath(path string) error {
	if _fdca.Choice != nil {
		if _cbea := _fdca.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _cbea != nil {
			return _cbea
		}
	}
	if _fdca.DispUnitsLbl != nil {
		if _aeacg := _fdca.DispUnitsLbl.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"); _aeacg != nil {
			return _aeacg
		}
	}
	if _fdca.ExtLst != nil {
		if _dege := _fdca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dege != nil {
			return _dege
		}
	}
	return nil
}

const ST_ThicknessPercentPattern = "\u0028[\u0030\u002d\u0039\u005d\u002b\u0029%"

func (_acaf *CT_BubbleScale) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _caee := range start.Attr {
		if _caee.Name.Local == "\u0076\u0061\u006c" {
			_fadg, _adga := ParseUnionST_BubbleScale(_caee.Value)
			if _adga != nil {
				return _adga
			}
			_acaf.ValAttr = &_fadg
			continue
		}
	}
	for {
		_edfb, _edde := d.Token()
		if _edde != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065:\u0020\u0025\u0073", _edde)
		}
		if _gbg, _bcfg := _edfb.(_c.EndElement); _bcfg && _gbg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the UserShapes and its children, prefixing error messages with path
func (_eddfg *UserShapes) ValidateWithPath(path string) error {
	if _cgdc := _eddfg.CT_Drawing.ValidateWithPath(path); _cgdc != nil {
		return _cgdc
	}
	return nil
}

type EG_LineChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}
type ST_BarGrouping byte

func (_egabb *CT_SplitType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _egabb.ValAttr != ST_SplitTypeUnset {
		_feged, _cfeg := _egabb.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _cfeg != nil {
			return _cfeg
		}
		start.Attr = append(start.Attr, _feged)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BuiltInUnit and its children, prefixing error messages with path
func (_cded *CT_BuiltInUnit) ValidateWithPath(path string) error {
	if _deff := _cded.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _deff != nil {
		return _deff
	}
	return nil
}

// ValidateWithPath validates the CT_DispUnitsLbl and its children, prefixing error messages with path
func (_daeag *CT_DispUnitsLbl) ValidateWithPath(path string) error {
	if _daeag.Layout != nil {
		if _gdba := _daeag.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gdba != nil {
			return _gdba
		}
	}
	if _daeag.Tx != nil {
		if _afbb := _daeag.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _afbb != nil {
			return _afbb
		}
	}
	if _daeag.SpPr != nil {
		if _fcbgf := _daeag.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fcbgf != nil {
			return _fcbgf
		}
	}
	if _daeag.TxPr != nil {
		if _aeag := _daeag.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aeag != nil {
			return _aeag
		}
	}
	return nil
}
func (_gaade ST_ScatterStyle) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_gaade.String(), start)
}
func NewCT_TxChoice() *CT_TxChoice { _cfaa := &CT_TxChoice{}; return _cfaa }

type ST_BarDir byte

// ValidateWithPath validates the CT_Line3DChart and its children, prefixing error messages with path
func (_bged *CT_Line3DChart) ValidateWithPath(path string) error {
	if _cfff := _bged.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _cfff != nil {
		return _cfff
	}
	if _bged.VaryColors != nil {
		if _gefg := _bged.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gefg != nil {
			return _gefg
		}
	}
	for _feee, _gbdb := range _bged.Ser {
		if _bcceg := _gbdb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _feee)); _bcceg != nil {
			return _bcceg
		}
	}
	if _bged.DLbls != nil {
		if _cbdd := _bged.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cbdd != nil {
			return _cbdd
		}
	}
	if _bged.DropLines != nil {
		if _cebba := _bged.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cebba != nil {
			return _cebba
		}
	}
	if _bged.GapDepth != nil {
		if _abbea := _bged.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _abbea != nil {
			return _abbea
		}
	}
	for _agebb, _eaee := range _bged.AxId {
		if _ffcdf := _eaee.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _agebb)); _ffcdf != nil {
			return _ffcdf
		}
	}
	if _bged.ExtLst != nil {
		if _ccgeg := _bged.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccgeg != nil {
			return _ccgeg
		}
	}
	return nil
}

// Validate validates the CT_NumDataSource and its children
func (_caggb *CT_NumDataSource) Validate() error {
	return _caggb.ValidateWithPath("\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}
func (_edcd *ST_TickMark) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bfbfd, _cffe := d.Token()
	if _cffe != nil {
		return _cffe
	}
	if _bccef, _dggca := _bfbfd.(_c.EndElement); _dggca && _bccef.Name == start.Name {
		*_edcd = 1
		return nil
	}
	if _cefe, _dgccg := _bfbfd.(_c.CharData); !_dgccg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bfbfd)
	} else {
		switch string(_cefe) {
		case "":
			*_edcd = 0
		case "\u0063\u0072\u006fs\u0073":
			*_edcd = 1
		case "\u0069\u006e":
			*_edcd = 2
		case "\u006e\u006f\u006e\u0065":
			*_edcd = 3
		case "\u006f\u0075\u0074":
			*_edcd = 4
		}
	}
	_bfbfd, _cffe = d.Token()
	if _cffe != nil {
		return _cffe
	}
	if _ggddf, _cgadb := _bfbfd.(_c.EndElement); _cgadb && _ggddf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bfbfd)
}

type CT_RadarSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_d.CT_ShapeProperties
	Marker *CT_Marker
	DPt    []*CT_DPt
	DLbls  *CT_DLbls
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_cbddg *CT_Scaling) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bdbed:
	for {
		_acce, _cfeab := d.Token()
		if _cfeab != nil {
			return _cfeab
		}
		switch _bbeaf := _acce.(type) {
		case _c.StartElement:
			switch _bbeaf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}:
				_cbddg.LogBase = NewCT_LogBase()
				if _addcd := d.DecodeElement(_cbddg.LogBase, &_bbeaf); _addcd != nil {
					return _addcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}:
				_cbddg.Orientation = NewCT_Orientation()
				if _cebf := d.DecodeElement(_cbddg.Orientation, &_bbeaf); _cebf != nil {
					return _cebf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}:
				_cbddg.Max = NewCT_Double()
				if _babb := d.DecodeElement(_cbddg.Max, &_bbeaf); _babb != nil {
					return _babb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}:
				_cbddg.Min = NewCT_Double()
				if _cgbfd := d.DecodeElement(_cbddg.Min, &_bbeaf); _cgbfd != nil {
					return _cgbfd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbddg.ExtLst = NewCT_ExtensionList()
				if _fdba := d.DecodeElement(_cbddg.ExtLst, &_bbeaf); _fdba != nil {
					return _fdba
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0063\u0061\u006c\u0069\u006e\u0067\u0020\u0025\u0076", _bbeaf.Name)
				if _efgbc := d.Skip(); _efgbc != nil {
					return _efgbc
				}
			}
		case _c.EndElement:
			break _bdbed
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_OfPieChart and its children, prefixing error messages with path
func (_eddb *CT_OfPieChart) ValidateWithPath(path string) error {
	if _cddg := _eddb.OfPieType.ValidateWithPath(path + "\u002f\u004f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"); _cddg != nil {
		return _cddg
	}
	if _eddb.VaryColors != nil {
		if _befe := _eddb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _befe != nil {
			return _befe
		}
	}
	for _ggbfg, _gccce := range _eddb.Ser {
		if _gbgbg := _gccce.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ggbfg)); _gbgbg != nil {
			return _gbgbg
		}
	}
	if _eddb.DLbls != nil {
		if _aecfe := _eddb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _aecfe != nil {
			return _aecfe
		}
	}
	if _eddb.GapWidth != nil {
		if _bgdbf := _eddb.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _bgdbf != nil {
			return _bgdbf
		}
	}
	if _eddb.SplitType != nil {
		if _fffgf := _eddb.SplitType.ValidateWithPath(path + "\u002f\u0053\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"); _fffgf != nil {
			return _fffgf
		}
	}
	if _eddb.SplitPos != nil {
		if _aeeef := _eddb.SplitPos.ValidateWithPath(path + "\u002fS\u0070\u006c\u0069\u0074\u0050\u006fs"); _aeeef != nil {
			return _aeeef
		}
	}
	if _eddb.CustSplit != nil {
		if _fbefb := _eddb.CustSplit.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"); _fbefb != nil {
			return _fbefb
		}
	}
	if _eddb.SecondPieSize != nil {
		if _gcbb := _eddb.SecondPieSize.ValidateWithPath(path + "\u002f\u0053\u0065\u0063\u006f\u006e\u0064\u0050\u0069e\u0053\u0069\u007a\u0065"); _gcbb != nil {
			return _gcbb
		}
	}
	for _aaabe, _gefgf := range _eddb.SerLines {
		if _efdc := _gefgf.ValidateWithPath(_aa.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _aaabe)); _efdc != nil {
			return _efdc
		}
	}
	if _eddb.ExtLst != nil {
		if _cfea := _eddb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfea != nil {
			return _cfea
		}
	}
	return nil
}
func NewCT_OfPieType() *CT_OfPieType { _bbccd := &CT_OfPieType{}; return _bbccd }

// ValidateWithPath validates the CT_BandFmt and its children, prefixing error messages with path
func (_fgag *CT_BandFmt) ValidateWithPath(path string) error {
	if _fcce := _fgag.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fcce != nil {
		return _fcce
	}
	if _fgag.SpPr != nil {
		if _ddba := _fgag.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ddba != nil {
			return _ddba
		}
	}
	return nil
}

const ST_SecondPieSizePercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0035\u002d9\u005d\u0029\u007c(\u005b\u0031\u002d\u0039]\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0032\u0030\u0030\u0029\u0025"

func (_ebca *CT_OfPieChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ebca.OfPieType = NewCT_OfPieType()
_gcfbd:
	for {
		_gbbd, _faad := d.Token()
		if _faad != nil {
			return _faad
		}
		switch _abgdf := _gbbd.(type) {
		case _c.StartElement:
			switch _abgdf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}:
				if _gaaf := d.DecodeElement(_ebca.OfPieType, &_abgdf); _gaaf != nil {
					return _gaaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ebca.VaryColors = NewCT_Boolean()
				if _dbcde := d.DecodeElement(_ebca.VaryColors, &_abgdf); _dbcde != nil {
					return _dbcde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bfacc := NewCT_PieSer()
				if _aegf := d.DecodeElement(_bfacc, &_abgdf); _aegf != nil {
					return _aegf
				}
				_ebca.Ser = append(_ebca.Ser, _bfacc)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ebca.DLbls = NewCT_DLbls()
				if _gbaea := d.DecodeElement(_ebca.DLbls, &_abgdf); _gbaea != nil {
					return _gbaea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_ebca.GapWidth = NewCT_GapAmount()
				if _acae := d.DecodeElement(_ebca.GapWidth, &_abgdf); _acae != nil {
					return _acae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}:
				_ebca.SplitType = NewCT_SplitType()
				if _fbcee := d.DecodeElement(_ebca.SplitType, &_abgdf); _fbcee != nil {
					return _fbcee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}:
				_ebca.SplitPos = NewCT_Double()
				if _cdca := d.DecodeElement(_ebca.SplitPos, &_abgdf); _cdca != nil {
					return _cdca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}:
				_ebca.CustSplit = NewCT_CustSplit()
				if _faag := d.DecodeElement(_ebca.CustSplit, &_abgdf); _faag != nil {
					return _faag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}:
				_ebca.SecondPieSize = NewCT_SecondPieSize()
				if _ddbe := d.DecodeElement(_ebca.SecondPieSize, &_abgdf); _ddbe != nil {
					return _ddbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_acfa := NewCT_ChartLines()
				if _dccfd := d.DecodeElement(_acfa, &_abgdf); _dccfd != nil {
					return _dccfd
				}
				_ebca.SerLines = append(_ebca.SerLines, _acfa)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebca.ExtLst = NewCT_ExtensionList()
				if _bgdbg := d.DecodeElement(_ebca.ExtLst, &_abgdf); _bgdbg != nil {
					return _bgdbg
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _abgdf.Name)
				if _ccac := d.Skip(); _ccac != nil {
					return _ccac
				}
			}
		case _c.EndElement:
			break _gcfbd
		case _c.CharData:
		}
	}
	return nil
}
func NewEG_SurfaceChartShared() *EG_SurfaceChartShared {
	_cacfg := &EG_SurfaceChartShared{}
	return _cacfg
}

// Validate validates the CT_DispBlanksAs and its children
func (_cbag *CT_DispBlanksAs) Validate() error {
	return _cbag.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073")
}
func (_fbfg *CT_CrossBetween) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fbfg.ValAttr = ST_CrossBetween(1)
	for _, _fde := range start.Attr {
		if _fde.Name.Local == "\u0076\u0061\u006c" {
			_fbfg.ValAttr.UnmarshalXMLAttr(_fde)
			continue
		}
	}
	for {
		_ebdaf, _cegc := d.Token()
		if _cegc != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0042e\u0074\u0077\u0065e\u006e:\u0020\u0025\u0073", _cegc)
		}
		if _acef, _gbba := _ebdaf.(_c.EndElement); _gbba && _acef.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_DPt and its children
func (_adfd *CT_DPt) Validate() error {
	return _adfd.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0074")
}

type CT_DispUnitsLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	SpPr   *_d.CT_ShapeProperties
	TxPr   *_d.CT_TextBody
}

func NewCT_Order() *CT_Order { _bbff := &CT_Order{}; return _bbff }
func (_cedf *CT_LegendPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cedf.ValAttr != ST_LegendPosUnset {
		_edac, _dcdd := _cedf.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _dcdd != nil {
			return _dcdd
		}
		start.Attr = append(start.Attr, _edac)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cbeag ST_SizeRepresents) String() string {
	switch _cbeag {
	case 0:
		return ""
	case 1:
		return "\u0061\u0072\u0065\u0061"
	case 2:
		return "\u0077"
	}
	return ""
}

// Validate validates the CT_SerTx and its children
func (_dggef *CT_SerTx) Validate() error {
	return _dggef.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078")
}

// ValidateWithPath validates the CT_LineChart and its children, prefixing error messages with path
func (_dfcdd *CT_LineChart) ValidateWithPath(path string) error {
	if _ggga := _dfcdd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _ggga != nil {
		return _ggga
	}
	if _dfcdd.VaryColors != nil {
		if _fbgf := _dfcdd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fbgf != nil {
			return _fbgf
		}
	}
	for _aaagf, _ccgc := range _dfcdd.Ser {
		if _ddff := _ccgc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aaagf)); _ddff != nil {
			return _ddff
		}
	}
	if _dfcdd.DLbls != nil {
		if _cdffc := _dfcdd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cdffc != nil {
			return _cdffc
		}
	}
	if _dfcdd.DropLines != nil {
		if _cfbd := _dfcdd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cfbd != nil {
			return _cfbd
		}
	}
	if _dfcdd.HiLowLines != nil {
		if _adafg := _dfcdd.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _adafg != nil {
			return _adafg
		}
	}
	if _dfcdd.UpDownBars != nil {
		if _afacd := _dfcdd.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _afacd != nil {
			return _afacd
		}
	}
	if _dfcdd.Marker != nil {
		if _afceg := _dfcdd.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _afceg != nil {
			return _afceg
		}
	}
	if _dfcdd.Smooth != nil {
		if _efdg := _dfcdd.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _efdg != nil {
			return _efdg
		}
	}
	for _dfbeg, _gbefb := range _dfcdd.AxId {
		if _bfgc := _gbefb.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dfbeg)); _bfgc != nil {
			return _bfgc
		}
	}
	if _dfcdd.ExtLst != nil {
		if _agad := _dfcdd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agad != nil {
			return _agad
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LblAlgn and its children, prefixing error messages with path
func (_bgfe *CT_LblAlgn) ValidateWithPath(path string) error {
	if _bgfe.ValAttr == ST_LblAlgnUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _adaf := _bgfe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adaf != nil {
		return _adaf
	}
	return nil
}

// ValidateWithPath validates the CT_RotY and its children, prefixing error messages with path
func (_adedd *CT_RotY) ValidateWithPath(path string) error {
	if _adedd.ValAttr != nil {
		if *_adedd.ValAttr < 0 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_adedd.ValAttr)
		}
		if *_adedd.ValAttr > 360 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_adedd.ValAttr)
		}
	}
	return nil
}

type CT_StrVal struct {
	IdxAttr uint32
	V       string
}

func NewCT_Title() *CT_Title { _acdcg := &CT_Title{}; return _acdcg }
func (_feac *EG_AxShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_feac.AxId = NewCT_UnsignedInt()
	_feac.Scaling = NewCT_Scaling()
	_feac.AxPos = NewCT_AxPos()
	_feac.CrossAx = NewCT_UnsignedInt()
_accf:
	for {
		_eccef, _ddfde := d.Token()
		if _ddfde != nil {
			return _ddfde
		}
		switch _aaabeg := _eccef.(type) {
		case _c.StartElement:
			switch _aaabeg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _faec := d.DecodeElement(_feac.AxId, &_aaabeg); _faec != nil {
					return _faec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _eadaa := d.DecodeElement(_feac.Scaling, &_aaabeg); _eadaa != nil {
					return _eadaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_feac.Delete = NewCT_Boolean()
				if _caaa := d.DecodeElement(_feac.Delete, &_aaabeg); _caaa != nil {
					return _caaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _dceed := d.DecodeElement(_feac.AxPos, &_aaabeg); _dceed != nil {
					return _dceed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_feac.MajorGridlines = NewCT_ChartLines()
				if _dgdbg := d.DecodeElement(_feac.MajorGridlines, &_aaabeg); _dgdbg != nil {
					return _dgdbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_feac.MinorGridlines = NewCT_ChartLines()
				if _accbc := d.DecodeElement(_feac.MinorGridlines, &_aaabeg); _accbc != nil {
					return _accbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_feac.Title = NewCT_Title()
				if _cadfde := d.DecodeElement(_feac.Title, &_aaabeg); _cadfde != nil {
					return _cadfde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_feac.NumFmt = NewCT_NumFmt()
				if _fgegf := d.DecodeElement(_feac.NumFmt, &_aaabeg); _fgegf != nil {
					return _fgegf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_feac.MajorTickMark = NewCT_TickMark()
				if _geecd := d.DecodeElement(_feac.MajorTickMark, &_aaabeg); _geecd != nil {
					return _geecd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_feac.MinorTickMark = NewCT_TickMark()
				if _aaeeb := d.DecodeElement(_feac.MinorTickMark, &_aaabeg); _aaeeb != nil {
					return _aaeeb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_feac.TickLblPos = NewCT_TickLblPos()
				if _eeffg := d.DecodeElement(_feac.TickLblPos, &_aaabeg); _eeffg != nil {
					return _eeffg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_feac.SpPr = _d.NewCT_ShapeProperties()
				if _gafbe := d.DecodeElement(_feac.SpPr, &_aaabeg); _gafbe != nil {
					return _gafbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_feac.TxPr = _d.NewCT_TextBody()
				if _fdaaab := d.DecodeElement(_feac.TxPr, &_aaabeg); _fdaaab != nil {
					return _fdaaab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _bbcaeg := d.DecodeElement(_feac.CrossAx, &_aaabeg); _bbcaeg != nil {
					return _bbcaeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_feac.Choice = NewEG_AxSharedChoice()
				if _dcdff := d.DecodeElement(&_feac.Choice.Crosses, &_aaabeg); _dcdff != nil {
					return _dcdff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_feac.Choice = NewEG_AxSharedChoice()
				if _eegbb := d.DecodeElement(&_feac.Choice.CrossesAt, &_aaabeg); _eegbb != nil {
					return _eegbb
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _aaabeg.Name)
				if _cfaab := d.Skip(); _cfaab != nil {
					return _cfaab
				}
			}
		case _c.EndElement:
			break _accf
		case _c.CharData:
		}
	}
	return nil
}
func (_bgbe *CT_Tx) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_bgbe.Choice.MarshalXML(e, _c.StartElement{})
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_ErrDir() *CT_ErrDir { _ccdg := &CT_ErrDir{}; _ccdg.ValAttr = ST_ErrDir(1); return _ccdg }

type ST_OfPieType byte

func (_dadaag ST_LblOffset) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dadaag.ST_LblOffsetPercent != nil {
		e.EncodeToken(_c.CharData(*_dadaag.ST_LblOffsetPercent))
	}
	if _dadaag.ST_LblOffsetUShort != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_dadaag.ST_LblOffsetUShort)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}
func (_abfdg *ST_BubbleScale) ValidateWithPath(path string) error {
	_gefcg := []string{}
	if _abfdg.ST_BubbleScalePercent != nil {
		_gefcg = append(_gefcg, "S\u0054\u005f\u0042\u0075bb\u006ce\u0053\u0063\u0061\u006c\u0065P\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _abfdg.ST_BubbleScaleUInt != nil {
		_gefcg = append(_gefcg, "\u0053T\u005fB\u0075\u0062\u0062\u006c\u0065S\u0063\u0061l\u0065\u0055\u0049\u006e\u0074")
	}
	if len(_gefcg) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gefcg)
	}
	return nil
}
func (_cace *CT_CustSplit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _cace.SecondPiePt != nil {
		_afecb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}}
		for _, _gcdge := range _cace.SecondPiePt {
			e.EncodeElement(_gcdge, _afecb)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ggeb *CT_CrossBetween) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_cggac, _fceg := _ggeb.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _fceg != nil {
		return _fceg
	}
	start.Attr = append(start.Attr, _cggac)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_AxShared and its children, prefixing error messages with path
func (_feadb *EG_AxShared) ValidateWithPath(path string) error {
	if _dgddd := _feadb.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _dgddd != nil {
		return _dgddd
	}
	if _aabbg := _feadb.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _aabbg != nil {
		return _aabbg
	}
	if _feadb.Delete != nil {
		if _fcab := _feadb.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fcab != nil {
			return _fcab
		}
	}
	if _fdagc := _feadb.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _fdagc != nil {
		return _fdagc
	}
	if _feadb.MajorGridlines != nil {
		if _deef := _feadb.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _deef != nil {
			return _deef
		}
	}
	if _feadb.MinorGridlines != nil {
		if _fcegf := _feadb.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fcegf != nil {
			return _fcegf
		}
	}
	if _feadb.Title != nil {
		if _acaad := _feadb.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _acaad != nil {
			return _acaad
		}
	}
	if _feadb.NumFmt != nil {
		if _ecbea := _feadb.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ecbea != nil {
			return _ecbea
		}
	}
	if _feadb.MajorTickMark != nil {
		if _gdead := _feadb.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gdead != nil {
			return _gdead
		}
	}
	if _feadb.MinorTickMark != nil {
		if _cgdda := _feadb.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cgdda != nil {
			return _cgdda
		}
	}
	if _feadb.TickLblPos != nil {
		if _afaae := _feadb.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _afaae != nil {
			return _afaae
		}
	}
	if _feadb.SpPr != nil {
		if _daeaa := _feadb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _daeaa != nil {
			return _daeaa
		}
	}
	if _feadb.TxPr != nil {
		if _gacdf := _feadb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gacdf != nil {
			return _gacdf
		}
	}
	if _fffff := _feadb.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _fffff != nil {
		return _fffff
	}
	if _feadb.Choice != nil {
		if _fefcf := _feadb.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _fefcf != nil {
			return _fefcf
		}
	}
	return nil
}

// Validate validates the Group_DLbls and its children
func (_dadaf *Group_DLbls) Validate() error {
	return _dadaf.ValidateWithPath("G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073")
}

// Validate validates the CT_Surface3DChart and its children
func (_eaffb *CT_Surface3DChart) Validate() error {
	return _eaffb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_OfPieType and its children
func (_ggcga *CT_OfPieType) Validate() error {
	return _ggcga.ValidateWithPath("\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065")
}
func (_debfb *CT_MarkerStyle) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_adebd, _eaff := _debfb.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _eaff != nil {
		return _eaff
	}
	start.Attr = append(start.Attr, _adebd)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_ErrBarType struct{ ValAttr ST_ErrBarType }

func (_fgbgb *CT_Order) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _ebcad := range start.Attr {
		if _ebcad.Name.Local == "\u0076\u0061\u006c" {
			_cdgg, _fcaa := _e.ParseUint(_ebcad.Value, 10, 8)
			if _fcaa != nil {
				return _fcaa
			}
			_bcbg := uint8(_cdgg)
			_fgbgb.ValAttr = &_bcbg
			continue
		}
	}
	for {
		_cgeg, _dedgf := d.Token()
		if _dedgf != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0064\u0065\u0072: \u0025\u0073", _dedgf)
		}
		if _egcdb, _cdfa := _cgeg.(_c.EndElement); _cdfa && _egcdb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gfbb *ST_TrendlineType) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_gfbb = 0
	case "\u0065\u0078\u0070":
		*_gfbb = 1
	case "\u006c\u0069\u006e\u0065\u0061\u0072":
		*_gfbb = 2
	case "\u006c\u006f\u0067":
		*_gfbb = 3
	case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
		*_gfbb = 4
	case "\u0070\u006f\u006c\u0079":
		*_gfbb = 5
	case "\u0070\u006f\u0077e\u0072":
		*_gfbb = 6
	}
	return nil
}
func NewCT_ScatterStyle() *CT_ScatterStyle { _efbcc := &CT_ScatterStyle{}; return _efbcc }

// Validate validates the EG_AxShared and its children
func (_bfcgg *EG_AxShared) Validate() error {
	return _bfcgg.ValidateWithPath("E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_egcgb *ST_Thickness) Validate() error { return _egcgb.ValidateWithPath("") }
func (_fcecb *EG_AxShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_bbbb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_fcecb.AxId, _bbbb)
	_ddbf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_fcecb.Scaling, _ddbf)
	if _fcecb.Delete != nil {
		_feabf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_fcecb.Delete, _feabf)
	}
	_dcgfe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_fcecb.AxPos, _dcgfe)
	if _fcecb.MajorGridlines != nil {
		_fdfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fcecb.MajorGridlines, _fdfa)
	}
	if _fcecb.MinorGridlines != nil {
		_affgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fcecb.MinorGridlines, _affgf)
	}
	if _fcecb.Title != nil {
		_adef := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_fcecb.Title, _adef)
	}
	if _fcecb.NumFmt != nil {
		_fddfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fcecb.NumFmt, _fddfa)
	}
	if _fcecb.MajorTickMark != nil {
		_cade := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_fcecb.MajorTickMark, _cade)
	}
	if _fcecb.MinorTickMark != nil {
		_aecfad := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_fcecb.MinorTickMark, _aecfad)
	}
	if _fcecb.TickLblPos != nil {
		_gdgde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_fcecb.TickLblPos, _gdgde)
	}
	if _fcecb.SpPr != nil {
		_cdgae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fcecb.SpPr, _cdgae)
	}
	if _fcecb.TxPr != nil {
		_abbdg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fcecb.TxPr, _abbdg)
	}
	_fcfab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_fcecb.CrossAx, _fcfab)
	if _fcecb.Choice != nil {
		_fcecb.Choice.MarshalXML(e, _c.StartElement{})
	}
	return nil
}

type CT_ValAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	CrossBetween   *CT_CrossBetween
	MajorUnit      *CT_AxisUnit
	MinorUnit      *CT_AxisUnit
	DispUnits      *CT_DispUnits
	ExtLst         *CT_ExtensionList
}

func (_egfdg *CT_TxChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _egfdg.StrRef != nil {
		_febe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_egfdg.StrRef, _febe)
	}
	if _egfdg.Rich != nil {
		_ccdad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0072\u0069\u0063\u0068"}}
		e.EncodeElement(_egfdg.Rich, _ccdad)
	}
	return nil
}
func (_cdfaf *CT_SerTxChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cbaec:
	for {
		_fcbae, _ggbag := d.Token()
		if _ggbag != nil {
			return _ggbag
		}
		switch _agedg := _fcbae.(type) {
		case _c.StartElement:
			switch _agedg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cdfaf.StrRef = NewCT_StrRef()
				if _gcfaf := d.DecodeElement(_cdfaf.StrRef, &_agedg); _gcfaf != nil {
					return _gcfaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_cdfaf.V = new(string)
				if _cagbd := d.DecodeElement(_cdfaf.V, &_agedg); _cagbd != nil {
					return _cagbd
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _agedg.Name)
				if _bfebf := d.Skip(); _bfebf != nil {
					return _bfebf
				}
			}
		case _c.EndElement:
			break _cbaec
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_SurfaceChart() *CT_SurfaceChart { _cacdd := &CT_SurfaceChart{}; return _cacdd }

// Validate validates the CT_LblOffset and its children
func (_aaeb *CT_LblOffset) Validate() error {
	return _aaeb.ValidateWithPath("\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074")
}

type CT_BarSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_d.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	PictureOptions   *CT_PictureOptions
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          *CT_ErrBars
	Cat              *CT_AxDataSource
	Val              *CT_NumDataSource
	Shape            *CT_Shape
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_TrendlineType and its children, prefixing error messages with path
func (_egdbb *CT_TrendlineType) ValidateWithPath(path string) error {
	if _ecedb := _egdbb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ecedb != nil {
		return _ecedb
	}
	return nil
}
func NewCT_ErrBars() *CT_ErrBars {
	_bgbc := &CT_ErrBars{}
	_bgbc.ErrBarType = NewCT_ErrBarType()
	_bgbc.ErrValType = NewCT_ErrValType()
	return _bgbc
}

// ValidateWithPath validates the CT_BarDir and its children, prefixing error messages with path
func (_acb *CT_BarDir) ValidateWithPath(path string) error {
	if _adg := _acb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adg != nil {
		return _adg
	}
	return nil
}
func (_edgg *CT_AxDataSource) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_edgg.Choice = NewCT_AxDataSourceChoice()
_eegf:
	for {
		_bga, _fec := d.Token()
		if _fec != nil {
			return _fec
		}
		switch _bcf := _bga.(type) {
		case _c.StartElement:
			switch _bcf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_edgg.Choice = NewCT_AxDataSourceChoice()
				if _acf := d.DecodeElement(&_edgg.Choice.MultiLvlStrRef, &_bcf); _acf != nil {
					return _acf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_edgg.Choice = NewCT_AxDataSourceChoice()
				if _dac := d.DecodeElement(&_edgg.Choice.NumRef, &_bcf); _dac != nil {
					return _dac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_edgg.Choice = NewCT_AxDataSourceChoice()
				if _fb := d.DecodeElement(&_edgg.Choice.NumLit, &_bcf); _fb != nil {
					return _fb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_edgg.Choice = NewCT_AxDataSourceChoice()
				if _gbe := d.DecodeElement(&_edgg.Choice.StrRef, &_bcf); _gbe != nil {
					return _gbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_edgg.Choice = NewCT_AxDataSourceChoice()
				if _gcd := d.DecodeElement(&_edgg.Choice.StrLit, &_bcf); _gcd != nil {
					return _gcd
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0078\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025\u0076", _bcf.Name)
				if _cee := d.Skip(); _cee != nil {
					return _cee
				}
			}
		case _c.EndElement:
			break _eegf
		case _c.CharData:
		}
	}
	return nil
}
func (_eabgd ST_Crosses) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_eabgd.String(), start)
}

type CT_LegendEntryChoice struct {
	Delete *CT_Boolean
	TxPr   *_d.CT_TextBody
}

// ValidateWithPath validates the EG_DLblShared and its children, prefixing error messages with path
func (_abceg *EG_DLblShared) ValidateWithPath(path string) error {
	if _abceg.NumFmt != nil {
		if _dgegcg := _abceg.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dgegcg != nil {
			return _dgegcg
		}
	}
	if _abceg.SpPr != nil {
		if _caaea := _abceg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _caaea != nil {
			return _caaea
		}
	}
	if _abceg.TxPr != nil {
		if _dfddb := _abceg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dfddb != nil {
			return _dfddb
		}
	}
	if _abceg.DLblPos != nil {
		if _ecea := _abceg.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _ecea != nil {
			return _ecea
		}
	}
	if _abceg.ShowLegendKey != nil {
		if _fgafe := _abceg.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _fgafe != nil {
			return _fgafe
		}
	}
	if _abceg.ShowVal != nil {
		if _aafde := _abceg.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _aafde != nil {
			return _aafde
		}
	}
	if _abceg.ShowCatName != nil {
		if _gcba := _abceg.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _gcba != nil {
			return _gcba
		}
	}
	if _abceg.ShowSerName != nil {
		if _agacb := _abceg.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _agacb != nil {
			return _agacb
		}
	}
	if _abceg.ShowPercent != nil {
		if _cadfdc := _abceg.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _cadfdc != nil {
			return _cadfdc
		}
	}
	if _abceg.ShowBubbleSize != nil {
		if _adbda := _abceg.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _adbda != nil {
			return _adbda
		}
	}
	return nil
}
func (_bgabf *CT_DateAx) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bgabf.AxId = NewCT_UnsignedInt()
	_bgabf.Scaling = NewCT_Scaling()
	_bgabf.AxPos = NewCT_AxPos()
	_bgabf.CrossAx = NewCT_UnsignedInt()
_dgde:
	for {
		_cbcd, _fgfd := d.Token()
		if _fgfd != nil {
			return _fgfd
		}
		switch _fafe := _cbcd.(type) {
		case _c.StartElement:
			switch _fafe.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _ddga := d.DecodeElement(_bgabf.AxId, &_fafe); _ddga != nil {
					return _ddga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ggge := d.DecodeElement(_bgabf.Scaling, &_fafe); _ggge != nil {
					return _ggge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_bgabf.Delete = NewCT_Boolean()
				if _deea := d.DecodeElement(_bgabf.Delete, &_fafe); _deea != nil {
					return _deea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _gbbf := d.DecodeElement(_bgabf.AxPos, &_fafe); _gbbf != nil {
					return _gbbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_bgabf.MajorGridlines = NewCT_ChartLines()
				if _efgbb := d.DecodeElement(_bgabf.MajorGridlines, &_fafe); _efgbb != nil {
					return _efgbb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_bgabf.MinorGridlines = NewCT_ChartLines()
				if _fcege := d.DecodeElement(_bgabf.MinorGridlines, &_fafe); _fcege != nil {
					return _fcege
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_bgabf.Title = NewCT_Title()
				if _dcab := d.DecodeElement(_bgabf.Title, &_fafe); _dcab != nil {
					return _dcab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_bgabf.NumFmt = NewCT_NumFmt()
				if _efgg := d.DecodeElement(_bgabf.NumFmt, &_fafe); _efgg != nil {
					return _efgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_bgabf.MajorTickMark = NewCT_TickMark()
				if _bfaa := d.DecodeElement(_bgabf.MajorTickMark, &_fafe); _bfaa != nil {
					return _bfaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_bgabf.MinorTickMark = NewCT_TickMark()
				if _fbfd := d.DecodeElement(_bgabf.MinorTickMark, &_fafe); _fbfd != nil {
					return _fbfd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_bgabf.TickLblPos = NewCT_TickLblPos()
				if _bfeec := d.DecodeElement(_bgabf.TickLblPos, &_fafe); _bfeec != nil {
					return _bfeec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bgabf.SpPr = _d.NewCT_ShapeProperties()
				if _ebabe := d.DecodeElement(_bgabf.SpPr, &_fafe); _ebabe != nil {
					return _ebabe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bgabf.TxPr = _d.NewCT_TextBody()
				if _efad := d.DecodeElement(_bgabf.TxPr, &_fafe); _efad != nil {
					return _efad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _dcbg := d.DecodeElement(_bgabf.CrossAx, &_fafe); _dcbg != nil {
					return _dcbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_bgabf.Choice = NewEG_AxSharedChoice()
				if _bdgga := d.DecodeElement(&_bgabf.Choice.Crosses, &_fafe); _bdgga != nil {
					return _bdgga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_bgabf.Choice = NewEG_AxSharedChoice()
				if _ecgg := d.DecodeElement(&_bgabf.Choice.CrossesAt, &_fafe); _ecgg != nil {
					return _ecgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_bgabf.Auto = NewCT_Boolean()
				if _dgfa := d.DecodeElement(_bgabf.Auto, &_fafe); _dgfa != nil {
					return _dgfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_bgabf.LblOffset = NewCT_LblOffset()
				if _eeed := d.DecodeElement(_bgabf.LblOffset, &_fafe); _eeed != nil {
					return _eeed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_bgabf.BaseTimeUnit = NewCT_TimeUnit()
				if _ffea := d.DecodeElement(_bgabf.BaseTimeUnit, &_fafe); _ffea != nil {
					return _ffea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_bgabf.MajorUnit = NewCT_AxisUnit()
				if _agedd := d.DecodeElement(_bgabf.MajorUnit, &_fafe); _agedd != nil {
					return _agedd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_bgabf.MajorTimeUnit = NewCT_TimeUnit()
				if _egcd := d.DecodeElement(_bgabf.MajorTimeUnit, &_fafe); _egcd != nil {
					return _egcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_bgabf.MinorUnit = NewCT_AxisUnit()
				if _eebe := d.DecodeElement(_bgabf.MinorUnit, &_fafe); _eebe != nil {
					return _eebe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_bgabf.MinorTimeUnit = NewCT_TimeUnit()
				if _gcdgc := d.DecodeElement(_bgabf.MinorTimeUnit, &_fafe); _gcdgc != nil {
					return _gcdgc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgabf.ExtLst = NewCT_ExtensionList()
				if _gdfd := d.DecodeElement(_bgabf.ExtLst, &_fafe); _gdfd != nil {
					return _gdfd
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0061\u0074e\u0041\u0078 \u0025\u0076", _fafe.Name)
				if _fceff := d.Skip(); _fceff != nil {
					return _fceff
				}
			}
		case _c.EndElement:
			break _dgde
		case _c.CharData:
		}
	}
	return nil
}
func (_afffb ST_SizeRepresents) ValidateWithPath(path string) error {
	switch _afffb {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afffb))
	}
	return nil
}
func (_cdbg ST_BarDir) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_cafg := _c.Attr{}
	_cafg.Name = name
	switch _cdbg {
	case ST_BarDirUnset:
		_cafg.Value = ""
	case ST_BarDirBar:
		_cafg.Value = "\u0062\u0061\u0072"
	case ST_BarDirCol:
		_cafg.Value = "\u0063\u006f\u006c"
	}
	return _cafg, nil
}
func (_eeadc *CT_PictureOptions) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _eeadc.ApplyToFront != nil {
		_bfgga := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fF\u0072\u006f\u006e\u0074"}}
		e.EncodeElement(_eeadc.ApplyToFront, _bfgga)
	}
	if _eeadc.ApplyToSides != nil {
		_dcge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fS\u0069\u0064\u0065\u0073"}}
		e.EncodeElement(_eeadc.ApplyToSides, _dcge)
	}
	if _eeadc.ApplyToEnd != nil {
		_dbgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061p\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}}
		e.EncodeElement(_eeadc.ApplyToEnd, _dbgf)
	}
	if _eeadc.PictureFormat != nil {
		_begc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}}
		e.EncodeElement(_eeadc.PictureFormat, _begc)
	}
	if _eeadc.PictureStackUnit != nil {
		_aebeg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065S\u0074\u0061c\u006b\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_eeadc.PictureStackUnit, _aebeg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dgbf *CT_ManualLayout) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dgbf.LayoutTarget != nil {
		_ebaeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074\u0054a\u0072\u0067\u0065\u0074"}}
		e.EncodeElement(_dgbf.LayoutTarget, _ebaeb)
	}
	if _dgbf.XMode != nil {
		_cfec := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0078\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dgbf.XMode, _cfec)
	}
	if _dgbf.YMode != nil {
		_edaag := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0079\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dgbf.YMode, _edaag)
	}
	if _dgbf.WMode != nil {
		_beab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0077\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dgbf.WMode, _beab)
	}
	if _dgbf.HMode != nil {
		_acfc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0068\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dgbf.HMode, _acfc)
	}
	if _dgbf.X != nil {
		_gdaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0078"}}
		e.EncodeElement(_dgbf.X, _gdaa)
	}
	if _dgbf.Y != nil {
		_eagd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0079"}}
		e.EncodeElement(_dgbf.Y, _eagd)
	}
	if _dgbf.W != nil {
		_fgdaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0077"}}
		e.EncodeElement(_dgbf.W, _fgdaf)
	}
	if _dgbf.H != nil {
		_eedce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0068"}}
		e.EncodeElement(_dgbf.H, _eedce)
	}
	if _dgbf.ExtLst != nil {
		_bacf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgbf.ExtLst, _bacf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ddcac *CT_Legend) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cgbg:
	for {
		_aacc, _fefcg := d.Token()
		if _fefcg != nil {
			return _fefcg
		}
		switch _acdf := _aacc.(type) {
		case _c.StartElement:
			switch _acdf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}:
				_ddcac.LegendPos = NewCT_LegendPos()
				if _bcegb := d.DecodeElement(_ddcac.LegendPos, &_acdf); _bcegb != nil {
					return _bcegb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}:
				_ceaac := NewCT_LegendEntry()
				if _begb := d.DecodeElement(_ceaac, &_acdf); _begb != nil {
					return _begb
				}
				_ddcac.LegendEntry = append(_ddcac.LegendEntry, _ceaac)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_ddcac.Layout = NewCT_Layout()
				if _fbcfb := d.DecodeElement(_ddcac.Layout, &_acdf); _fbcfb != nil {
					return _fbcfb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_ddcac.Overlay = NewCT_Boolean()
				if _bfeg := d.DecodeElement(_ddcac.Overlay, &_acdf); _bfeg != nil {
					return _bfeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddcac.SpPr = _d.NewCT_ShapeProperties()
				if _dcdg := d.DecodeElement(_ddcac.SpPr, &_acdf); _dcdg != nil {
					return _dcdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ddcac.TxPr = _d.NewCT_TextBody()
				if _gcaa := d.DecodeElement(_ddcac.TxPr, &_acdf); _gcaa != nil {
					return _gcaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddcac.ExtLst = NewCT_ExtensionList()
				if _agae := d.DecodeElement(_ddcac.ExtLst, &_acdf); _agae != nil {
					return _agae
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0065\u0067e\u006e\u0064 \u0025\u0076", _acdf.Name)
				if _afaf := d.Skip(); _afaf != nil {
					return _afaf
				}
			}
		case _c.EndElement:
			break _cgbg
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PieChart and its children, prefixing error messages with path
func (_cbcbg *CT_PieChart) ValidateWithPath(path string) error {
	if _cbcbg.VaryColors != nil {
		if _edab := _cbcbg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _edab != nil {
			return _edab
		}
	}
	for _ggae, _ceeba := range _cbcbg.Ser {
		if _cbecdb := _ceeba.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ggae)); _cbecdb != nil {
			return _cbecdb
		}
	}
	if _cbcbg.DLbls != nil {
		if _febg := _cbcbg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _febg != nil {
			return _febg
		}
	}
	if _cbcbg.FirstSliceAng != nil {
		if _fdbgc := _cbcbg.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _fdbgc != nil {
			return _fdbgc
		}
	}
	if _cbcbg.ExtLst != nil {
		if _afbdb := _cbcbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afbdb != nil {
			return _afbdb
		}
	}
	return nil
}
func (_aggab ST_DLblPos) ValidateWithPath(path string) error {
	switch _aggab {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aggab))
	}
	return nil
}
func NewCT_LineSer() *CT_LineSer {
	_fgda := &CT_LineSer{}
	_fgda.Idx = NewCT_UnsignedInt()
	_fgda.Order = NewCT_UnsignedInt()
	return _fgda
}
func NewEG_PieChartShared() *EG_PieChartShared { _afcac := &EG_PieChartShared{}; return _afcac }

// Validate validates the CT_SerTxChoice and its children
func (_ddgbf *CT_SerTxChoice) Validate() error {
	return _ddgbf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043h\u006f\u0069\u0063\u0065")
}
func NewCT_BandFmt() *CT_BandFmt {
	_daaa := &CT_BandFmt{}
	_daaa.Idx = NewCT_UnsignedInt()
	return _daaa
}

// Validate validates the CT_LegendEntryChoice and its children
func (_gecfd *CT_LegendEntryChoice) Validate() error {
	return _gecfd.ValidateWithPath("C\u0054_\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006et\u0072\u0079\u0043\u0068oi\u0063\u0065")
}

const (
	ST_ScatterStyleUnset        ST_ScatterStyle = 0
	ST_ScatterStyleNone         ST_ScatterStyle = 1
	ST_ScatterStyleLine         ST_ScatterStyle = 2
	ST_ScatterStyleLineMarker   ST_ScatterStyle = 3
	ST_ScatterStyleMarker       ST_ScatterStyle = 4
	ST_ScatterStyleSmooth       ST_ScatterStyle = 5
	ST_ScatterStyleSmoothMarker ST_ScatterStyle = 6
)

// ST_LblOffset is a union type
type ST_LblOffset struct {
	ST_LblOffsetPercent *string
	ST_LblOffsetUShort  *uint16
}

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_cceb *CT_ExtensionList) ValidateWithPath(path string) error {
	for _dedae, _abgf := range _cceb.Ext {
		if _gfcad := _abgf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _dedae)); _gfcad != nil {
			return _gfcad
		}
	}
	return nil
}

const ST_LblOffsetPercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u007c\u0028[1\u002d\u0039\u005d\u005b\u0030\u002d9\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b0\u002d\u0039\u005d\u0029\u007c\u0031\u0030\u00300\u0029\u0025"

func (_ccbf *CT_LogBase) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ccbf.ValAttr = 2
	for _, _fbfc := range start.Attr {
		if _fbfc.Name.Local == "\u0076\u0061\u006c" {
			_gefa, _agbaf := _e.ParseFloat(_fbfc.Value, 64)
			if _agbaf != nil {
				return _agbaf
			}
			_ccbf.ValAttr = _gefa
			continue
		}
	}
	for {
		_ecdbe, _efed := d.Token()
		if _efed != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065\u003a\u0020%\u0073", _efed)
		}
		if _daeg, _adbe := _ecdbe.(_c.EndElement); _adbe && _daeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cfecb *CT_View3D) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _cfecb.RotX != nil {
		_dccae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0058"}}
		e.EncodeElement(_cfecb.RotX, _dccae)
	}
	if _cfecb.HPercent != nil {
		_dgegc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cfecb.HPercent, _dgegc)
	}
	if _cfecb.RotY != nil {
		_gcfg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0059"}}
		e.EncodeElement(_cfecb.RotY, _gcfg)
	}
	if _cfecb.DepthPercent != nil {
		_afdb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u0070\u0074\u0068\u0050\u0065r\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cfecb.DepthPercent, _afdb)
	}
	if _cfecb.RAngAx != nil {
		_feag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0072\u0041\u006e\u0067\u0041\u0078"}}
		e.EncodeElement(_cfecb.RAngAx, _feag)
	}
	if _cfecb.Perspective != nil {
		_cbcbgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_cfecb.Perspective, _cbcbgb)
	}
	if _cfecb.ExtLst != nil {
		_dabac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfecb.ExtLst, _dabac)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dfbbfc *ST_HoleSize) ValidateWithPath(path string) error {
	_bcacd := []string{}
	if _dfbbfc.ST_HoleSizePercent != nil {
		_bcacd = append(_bcacd, "\u0053T\u005fH\u006f\u006c\u0065\u0053\u0069z\u0065\u0050e\u0072\u0063\u0065\u006e\u0074")
	}
	if _dfbbfc.ST_HoleSizeUByte != nil {
		_bcacd = append(_bcacd, "\u0053\u0054_\u0048\u006f\u006ce\u0053\u0069\u007a\u0065\u0055\u0042\u0079\u0074\u0065")
	}
	if len(_bcacd) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bcacd)
	}
	return nil
}
func (_fbef *CT_DLbl) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_eefd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fbef.Idx, _eefd)
	if _fbef.Choice != nil {
		_fbef.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _fbef.ExtLst != nil {
		_cecg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbef.ExtLst, _cecg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ddgda *ST_PageSetupOrientation) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bgceb, _egafa := d.Token()
	if _egafa != nil {
		return _egafa
	}
	if _dabda, _dagfd := _bgceb.(_c.EndElement); _dagfd && _dabda.Name == start.Name {
		*_ddgda = 1
		return nil
	}
	if _ecgc, _fdcdc := _bgceb.(_c.CharData); !_fdcdc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bgceb)
	} else {
		switch string(_ecgc) {
		case "":
			*_ddgda = 0
		case "\u0064e\u0066\u0061\u0075\u006c\u0074":
			*_ddgda = 1
		case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
			*_ddgda = 2
		case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
			*_ddgda = 3
		}
	}
	_bgceb, _egafa = d.Token()
	if _egafa != nil {
		return _egafa
	}
	if _bgfdc, _eadg := _bgceb.(_c.EndElement); _eadg && _bgfdc.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bgceb)
}

// Validate validates the CT_AreaSer and its children
func (_fefe *CT_AreaSer) Validate() error {
	return _fefe.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072")
}

type EG_BarChartShared struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
}
type CT_TickMark struct{ ValAttr ST_TickMark }

func (_ddbdf *ST_LblOffset) ValidateWithPath(path string) error {
	_dfebc := []string{}
	if _ddbdf.ST_LblOffsetPercent != nil {
		_dfebc = append(_dfebc, "\u0053\u0054\u005f\u004cbl\u004f\u0066\u0066\u0073\u0065\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ddbdf.ST_LblOffsetUShort != nil {
		_dfebc = append(_dfebc, "\u0053T\u005fL\u0062\u006c\u004f\u0066\u0066s\u0065\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_dfebc) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dfebc)
	}
	return nil
}
func (_becac ST_LblAlgn) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_affde := _c.Attr{}
	_affde.Name = name
	switch _becac {
	case ST_LblAlgnUnset:
		_affde.Value = ""
	case ST_LblAlgnCtr:
		_affde.Value = "\u0063\u0074\u0072"
	case ST_LblAlgnL:
		_affde.Value = "\u006c"
	case ST_LblAlgnR:
		_affde.Value = "\u0072"
	}
	return _affde, nil
}

// ValidateWithPath validates the CT_HeaderFooter and its children, prefixing error messages with path
func (_fdeg *CT_HeaderFooter) ValidateWithPath(path string) error { return nil }
func NewCT_PlotArea() *CT_PlotArea                                { _dbedc := &CT_PlotArea{}; return _dbedc }

// Validate validates the CT_ErrBarType and its children
func (_dfadb *CT_ErrBarType) Validate() error {
	return _dfadb.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065")
}

var ST_BubbleScalePercentPatternRe = _a.MustCompile(ST_BubbleScalePercentPattern)

type CT_DateAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblOffset      *CT_LblOffset
	BaseTimeUnit   *CT_TimeUnit
	MajorUnit      *CT_AxisUnit
	MajorTimeUnit  *CT_TimeUnit
	MinorUnit      *CT_AxisUnit
	MinorTimeUnit  *CT_TimeUnit
	ExtLst         *CT_ExtensionList
}
type EG_AreaChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

// Validate validates the Chart and its children
func (_debca *Chart) Validate() error { return _debca.ValidateWithPath("\u0043\u0068\u0061r\u0074") }

type ST_PageSetupOrientation byte

// ValidateWithPath validates the CT_PictureStackUnit and its children, prefixing error messages with path
func (_fggdc *CT_PictureStackUnit) ValidateWithPath(path string) error {
	if _fggdc.ValAttr <= 0 {
		return _aa.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _fggdc.ValAttr)
	}
	return nil
}
func (_bcda *CT_BarDir) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bcda.ValAttr != ST_BarDirUnset {
		_cdb, _agbb := _bcda.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _agbb != nil {
			return _agbb
		}
		start.Attr = append(start.Attr, _cdb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SurfaceSer and its children, prefixing error messages with path
func (_gagfb *CT_SurfaceSer) ValidateWithPath(path string) error {
	if _babfe := _gagfb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _babfe != nil {
		return _babfe
	}
	if _ddbce := _gagfb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ddbce != nil {
		return _ddbce
	}
	if _gagfb.Tx != nil {
		if _adced := _gagfb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _adced != nil {
			return _adced
		}
	}
	if _gagfb.SpPr != nil {
		if _acfcd := _gagfb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acfcd != nil {
			return _acfcd
		}
	}
	if _gagfb.Cat != nil {
		if _fddea := _gagfb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _fddea != nil {
			return _fddea
		}
	}
	if _gagfb.Val != nil {
		if _acbdc := _gagfb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _acbdc != nil {
			return _acbdc
		}
	}
	if _gagfb.ExtLst != nil {
		if _cgbc := _gagfb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgbc != nil {
			return _cgbc
		}
	}
	return nil
}
func (_aeeff *CT_LegendEntry) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_aeeff.Idx = NewCT_UnsignedInt()
_dbfe:
	for {
		_gaae, _gfdd := d.Token()
		if _gfdd != nil {
			return _gfdd
		}
		switch _bddg := _gaae.(type) {
		case _c.StartElement:
			switch _bddg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dgcef := d.DecodeElement(_aeeff.Idx, &_bddg); _dgcef != nil {
					return _dgcef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _aeeff.Choice == nil {
					_aeeff.Choice = NewCT_LegendEntryChoice()
				}
				if _fbgc := d.DecodeElement(&_aeeff.Choice.Delete, &_bddg); _fbgc != nil {
					return _fbgc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _aeeff.Choice == nil {
					_aeeff.Choice = NewCT_LegendEntryChoice()
				}
				if _fdcgd := d.DecodeElement(&_aeeff.Choice.TxPr, &_bddg); _fdcgd != nil {
					return _fdcgd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeeff.ExtLst = NewCT_ExtensionList()
				if _fgffa := d.DecodeElement(_aeeff.ExtLst, &_bddg); _fgffa != nil {
					return _fgffa
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045n\u0074r\u0079\u0020\u0025\u0076", _bddg.Name)
				if _gbca := d.Skip(); _gbca != nil {
					return _gbca
				}
			}
		case _c.EndElement:
			break _dbfe
		case _c.CharData:
		}
	}
	return nil
}

type CT_DepthPercent struct{ ValAttr *ST_DepthPercent }

func (_cbecf *CT_Thickness) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _cbecf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cbfg *CT_NumFmt) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _aa.Sprintf("\u0025\u0076", _cbfg.FormatCodeAttr)})
	if _cbfg.SourceLinkedAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_cbfg.SourceLinkedAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DispBlanksAs and its children, prefixing error messages with path
func (_cagdc *CT_DispBlanksAs) ValidateWithPath(path string) error {
	if _dgca := _cagdc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dgca != nil {
		return _dgca
	}
	return nil
}

// ValidateWithPath validates the CT_HoleSize and its children, prefixing error messages with path
func (_acgef *CT_HoleSize) ValidateWithPath(path string) error {
	if _acgef.ValAttr != nil {
		if _caeef := _acgef.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _caeef != nil {
			return _caeef
		}
	}
	return nil
}
func (_dadc *CT_DLblChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cfge:
	for {
		_gebee, _ggfa := d.Token()
		if _ggfa != nil {
			return _ggfa
		}
		switch _gbae := _gebee.(type) {
		case _c.StartElement:
			switch _gbae.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_dadc.Delete = NewCT_Boolean()
				if _fegg := d.DecodeElement(_dadc.Delete, &_gbae); _fegg != nil {
					return _fegg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_dadc.Layout = NewCT_Layout()
				if _ggcd := d.DecodeElement(_dadc.Layout, &_gbae); _ggcd != nil {
					return _ggcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_dadc.Tx = NewCT_Tx()
				if _afda := d.DecodeElement(_dadc.Tx, &_gbae); _afda != nil {
					return _afda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_dadc.NumFmt = NewCT_NumFmt()
				if _eccg := d.DecodeElement(_dadc.NumFmt, &_gbae); _eccg != nil {
					return _eccg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dadc.SpPr = _d.NewCT_ShapeProperties()
				if _ceac := d.DecodeElement(_dadc.SpPr, &_gbae); _ceac != nil {
					return _ceac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dadc.TxPr = _d.NewCT_TextBody()
				if _cfga := d.DecodeElement(_dadc.TxPr, &_gbae); _cfga != nil {
					return _cfga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_dadc.DLblPos = NewCT_DLblPos()
				if _cacfe := d.DecodeElement(_dadc.DLblPos, &_gbae); _cacfe != nil {
					return _cacfe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_dadc.ShowLegendKey = NewCT_Boolean()
				if _aeba := d.DecodeElement(_dadc.ShowLegendKey, &_gbae); _aeba != nil {
					return _aeba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_dadc.ShowVal = NewCT_Boolean()
				if _dddf := d.DecodeElement(_dadc.ShowVal, &_gbae); _dddf != nil {
					return _dddf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_dadc.ShowCatName = NewCT_Boolean()
				if _fcddg := d.DecodeElement(_dadc.ShowCatName, &_gbae); _fcddg != nil {
					return _fcddg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_dadc.ShowSerName = NewCT_Boolean()
				if _deda := d.DecodeElement(_dadc.ShowSerName, &_gbae); _deda != nil {
					return _deda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_dadc.ShowPercent = NewCT_Boolean()
				if _abb := d.DecodeElement(_dadc.ShowPercent, &_gbae); _abb != nil {
					return _abb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_dadc.ShowBubbleSize = NewCT_Boolean()
				if _gfa := d.DecodeElement(_dadc.ShowBubbleSize, &_gbae); _gfa != nil {
					return _gfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_dadc.Separator = new(string)
				if _bbab := d.DecodeElement(_dadc.Separator, &_gbae); _bbab != nil {
					return _bbab
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044L\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _gbae.Name)
				if _fbg := d.Skip(); _fbg != nil {
					return _fbg
				}
			}
		case _c.EndElement:
			break _cfge
		case _c.CharData:
		}
	}
	return nil
}
func (_fffbb ST_PageSetupOrientation) String() string {
	switch _fffbb {
	case 0:
		return ""
	case 1:
		return "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case 2:
		return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case 3:
		return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return ""
}
func (_dedaf ST_HPercent) String() string {
	if _dedaf.ST_HPercentWithSymbol != nil {
		return _aa.Sprintf("\u0025\u0076", *_dedaf.ST_HPercentWithSymbol)
	}
	if _dedaf.ST_HPercentUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_dedaf.ST_HPercentUShort)
	}
	return ""
}
func (_bbgad ST_BarDir) ValidateWithPath(path string) error {
	switch _bbgad {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbgad))
	}
	return nil
}
func (_aeecd *ST_MarkerStyle) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_aeecd = 0
	case "\u0063\u0069\u0072\u0063\u006c\u0065":
		*_aeecd = 1
	case "\u0064\u0061\u0073\u0068":
		*_aeecd = 2
	case "\u0064i\u0061\u006d\u006f\u006e\u0064":
		*_aeecd = 3
	case "\u0064\u006f\u0074":
		*_aeecd = 4
	case "\u006e\u006f\u006e\u0065":
		*_aeecd = 5
	case "\u0070i\u0063\u0074\u0075\u0072\u0065":
		*_aeecd = 6
	case "\u0070\u006c\u0075\u0073":
		*_aeecd = 7
	case "\u0073\u0071\u0075\u0061\u0072\u0065":
		*_aeecd = 8
	case "\u0073\u0074\u0061\u0072":
		*_aeecd = 9
	case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
		*_aeecd = 10
	case "\u0078":
		*_aeecd = 11
	case "\u0061\u0075\u0074\u006f":
		*_aeecd = 12
	}
	return nil
}
func (_cccf *CT_Tx) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cccf.Choice = NewCT_TxChoice()
_adcfe:
	for {
		_bbegb, _aggcg := d.Token()
		if _aggcg != nil {
			return _aggcg
		}
		switch _aacaf := _bbegb.(type) {
		case _c.StartElement:
			switch _aacaf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cccf.Choice = NewCT_TxChoice()
				if _geggd := d.DecodeElement(&_cccf.Choice.StrRef, &_aacaf); _geggd != nil {
					return _geggd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_cccf.Choice = NewCT_TxChoice()
				if _fccge := d.DecodeElement(&_cccf.Choice.Rich, &_aacaf); _fccge != nil {
					return _fccge
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fT\u0078 \u0025\u0076", _aacaf.Name)
				if _dadfd := d.Skip(); _dadfd != nil {
					return _dadfd
				}
			}
		case _c.EndElement:
			break _adcfe
		case _c.CharData:
		}
	}
	return nil
}
func (_bffdc *ST_PictureFormat) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_faeda, _adcgafa := d.Token()
	if _adcgafa != nil {
		return _adcgafa
	}
	if _bfaeb, _fgebf := _faeda.(_c.EndElement); _fgebf && _bfaeb.Name == start.Name {
		*_bffdc = 1
		return nil
	}
	if _fbdbc, _gceafb := _faeda.(_c.CharData); !_gceafb {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _faeda)
	} else {
		switch string(_fbdbc) {
		case "":
			*_bffdc = 0
		case "\u0073t\u0072\u0065\u0074\u0063\u0068":
			*_bffdc = 1
		case "\u0073\u0074\u0061c\u006b":
			*_bffdc = 2
		case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
			*_bffdc = 3
		}
	}
	_faeda, _adcgafa = d.Token()
	if _adcgafa != nil {
		return _adcgafa
	}
	if _ccgcgd, _ffaf := _faeda.(_c.EndElement); _ffaf && _ccgcgd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _faeda)
}

type EG_LegendEntryData struct{ TxPr *_d.CT_TextBody }

// ST_Overlap is a union type
type ST_Overlap struct {
	ST_OverlapPercent *string
	ST_OverlapByte    *int8
}

func (_gegg *CT_NumVal) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0069\u0064\u0078"}, Value: _aa.Sprintf("\u0025\u0076", _gegg.IdxAttr)})
	if _gegg.FormatCodeAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _aa.Sprintf("\u0025\u0076", *_gegg.FormatCodeAttr)})
	}
	e.EncodeToken(start)
	_gade := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076"}}
	_cf.AddPreserveSpaceAttr(&_gade, _gegg.V)
	e.EncodeElement(_gegg.V, _gade)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bccgc *CT_PictureStackUnit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bccgc.ValAttr = 0 + 1
	for _, _ccbe := range start.Attr {
		if _ccbe.Name.Local == "\u0076\u0061\u006c" {
			_daecf, _fbedg := _e.ParseFloat(_ccbe.Value, 64)
			if _fbedg != nil {
				return _fbedg
			}
			_bccgc.ValAttr = _daecf
			continue
		}
	}
	for {
		_bada, _cgcbc := d.Token()
		if _cgcbc != nil {
			return _aa.Errorf("\u0070\u0061\u0072s\u0069\u006e\u0067\u0020C\u0054\u005f\u0050\u0069\u0063\u0074\u0075r\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _cgcbc)
		}
		if _abced, _bceae := _bada.(_c.EndElement); _bceae && _abced.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Chart struct {
	Title            *CT_Title
	AutoTitleDeleted *CT_Boolean
	PivotFmts        *CT_PivotFmts
	View3D           *CT_View3D
	Floor            *CT_Surface
	SideWall         *CT_Surface
	BackWall         *CT_Surface
	PlotArea         *CT_PlotArea
	Legend           *CT_Legend
	PlotVisOnly      *CT_Boolean
	DispBlanksAs     *CT_DispBlanksAs
	ShowDLblsOverMax *CT_Boolean
	ExtLst           *CT_ExtensionList
}
type CT_PivotFmts struct{ PivotFmt []*CT_PivotFmt }
type CT_Crosses struct{ ValAttr ST_Crosses }

func NewCT_PlotAreaChoice1() *CT_PlotAreaChoice1 { _aedb := &CT_PlotAreaChoice1{}; return _aedb }
func (_cdda ST_DLblPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_cdda.String(), start)
}
func NewCT_PieChart() *CT_PieChart { _faaef := &CT_PieChart{}; return _faaef }

// Validate validates the CT_AreaChart and its children
func (_aaab *CT_AreaChart) Validate() error {
	return _aaab.ValidateWithPath("\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074")
}
func (_bbfcc *CT_StrRef) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_caafb:
	for {
		_feceb, _ffdgd := d.Token()
		if _ffdgd != nil {
			return _ffdgd
		}
		switch _cefc := _feceb.(type) {
		case _c.StartElement:
			switch _cefc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _bggdag := d.DecodeElement(&_bbfcc.F, &_cefc); _bggdag != nil {
					return _bggdag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_bbfcc.StrCache = NewCT_StrData()
				if _fcgd := d.DecodeElement(_bbfcc.StrCache, &_cefc); _fcgd != nil {
					return _fcgd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbfcc.ExtLst = NewCT_ExtensionList()
				if _eacbf := d.DecodeElement(_bbfcc.ExtLst, &_cefc); _eacbf != nil {
					return _eacbf
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072R\u0065\u0066 \u0025\u0076", _cefc.Name)
				if _gcbbe := d.Skip(); _gcbbe != nil {
					return _gcbbe
				}
			}
		case _c.EndElement:
			break _caafb
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_bbaf *CT_Lvl) ValidateWithPath(path string) error {
	for _aabde, _abfb := range _bbaf.Pt {
		if _fgeg := _abfb.ValidateWithPath(_aa.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _aabde)); _fgeg != nil {
			return _fgeg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumVal and its children, prefixing error messages with path
func (_cgbb *CT_NumVal) ValidateWithPath(path string) error { return nil }
func (_bbdb *ST_ErrDir) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gdcf, _ecfbd := d.Token()
	if _ecfbd != nil {
		return _ecfbd
	}
	if _bfede, _becffg := _gdcf.(_c.EndElement); _becffg && _bfede.Name == start.Name {
		*_bbdb = 1
		return nil
	}
	if _fedbg, _fcfccg := _gdcf.(_c.CharData); !_fcfccg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdcf)
	} else {
		switch string(_fedbg) {
		case "":
			*_bbdb = 0
		case "\u0078":
			*_bbdb = 1
		case "\u0079":
			*_bbdb = 2
		}
	}
	_gdcf, _ecfbd = d.Token()
	if _ecfbd != nil {
		return _ecfbd
	}
	if _fcefb, _fdgfc := _gdcf.(_c.EndElement); _fdgfc && _fcefb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdcf)
}
func (_ccfgg *CT_MultiLvlStrRef) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_caadb:
	for {
		_ccada, _cgcd := d.Token()
		if _cgcd != nil {
			return _cgcd
		}
		switch _dfcfg := _ccada.(type) {
		case _c.StartElement:
			switch _dfcfg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _dgag := d.DecodeElement(&_ccfgg.F, &_dfcfg); _dgag != nil {
					return _dgag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_ccfgg.MultiLvlStrCache = NewCT_MultiLvlStrData()
				if _fddd := d.DecodeElement(_ccfgg.MultiLvlStrCache, &_dfcfg); _fddd != nil {
					return _fddd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccfgg.ExtLst = NewCT_ExtensionList()
				if _fgec := d.DecodeElement(_ccfgg.ExtLst, &_dfcfg); _fgec != nil {
					return _fgec
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066\u0020\u0025\u0076", _dfcfg.Name)
				if _ebec := d.Skip(); _ebec != nil {
					return _ebec
				}
			}
		case _c.EndElement:
			break _caadb
		case _c.CharData:
		}
	}
	return nil
}

const (
	ST_LegendPosUnset ST_LegendPos = 0
	ST_LegendPosB     ST_LegendPos = 1
	ST_LegendPosTr    ST_LegendPos = 2
	ST_LegendPosL     ST_LegendPos = 3
	ST_LegendPosR     ST_LegendPos = 4
	ST_LegendPosT     ST_LegendPos = 5
)

type CT_PlotAreaChoice1 struct {
	ValAx  []*CT_ValAx
	CatAx  []*CT_CatAx
	DateAx []*CT_DateAx
	SerAx  []*CT_SerAx
}

// Validate validates the CT_SurfaceSer and its children
func (_fgabb *CT_SurfaceSer) Validate() error {
	return _fgabb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072")
}

const (
	ST_SplitTypeUnset   ST_SplitType = 0
	ST_SplitTypeAuto    ST_SplitType = 1
	ST_SplitTypeCust    ST_SplitType = 2
	ST_SplitTypePercent ST_SplitType = 3
	ST_SplitTypePos     ST_SplitType = 4
	ST_SplitTypeVal     ST_SplitType = 5
)

func (_dadfb ST_CrossBetween) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_dadfb.String(), start)
}
func NewCT_BandFmts() *CT_BandFmts { _adff := &CT_BandFmts{}; return _adff }
func (_ebdgb *CT_ManualLayout) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cfaeg:
	for {
		_eegc, _acafb := d.Token()
		if _acafb != nil {
			return _acafb
		}
		switch _ddbc := _eegc.(type) {
		case _c.StartElement:
			switch _ddbc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}:
				_ebdgb.LayoutTarget = NewCT_LayoutTarget()
				if _decbf := d.DecodeElement(_ebdgb.LayoutTarget, &_ddbc); _decbf != nil {
					return _decbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}:
				_ebdgb.XMode = NewCT_LayoutMode()
				if _gagc := d.DecodeElement(_ebdgb.XMode, &_ddbc); _gagc != nil {
					return _gagc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}:
				_ebdgb.YMode = NewCT_LayoutMode()
				if _fcbbg := d.DecodeElement(_ebdgb.YMode, &_ddbc); _fcbbg != nil {
					return _fcbbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}:
				_ebdgb.WMode = NewCT_LayoutMode()
				if _dgeg := d.DecodeElement(_ebdgb.WMode, &_ddbc); _dgeg != nil {
					return _dgeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}:
				_ebdgb.HMode = NewCT_LayoutMode()
				if _aaba := d.DecodeElement(_ebdgb.HMode, &_ddbc); _aaba != nil {
					return _aaba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}:
				_ebdgb.X = NewCT_Double()
				if _cbdda := d.DecodeElement(_ebdgb.X, &_ddbc); _cbdda != nil {
					return _cbdda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}:
				_ebdgb.Y = NewCT_Double()
				if _aaecbc := d.DecodeElement(_ebdgb.Y, &_ddbc); _aaecbc != nil {
					return _aaecbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}:
				_ebdgb.W = NewCT_Double()
				if _gfdf := d.DecodeElement(_ebdgb.W, &_ddbc); _gfdf != nil {
					return _gfdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}:
				_ebdgb.H = NewCT_Double()
				if _affcb := d.DecodeElement(_ebdgb.H, &_ddbc); _affcb != nil {
					return _affcb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebdgb.ExtLst = NewCT_ExtensionList()
				if _gaggg := d.DecodeElement(_ebdgb.ExtLst, &_ddbc); _gaggg != nil {
					return _gaggg
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074\u0020\u0025\u0076", _ddbc.Name)
				if _ebcfd := d.Skip(); _ebcfd != nil {
					return _ebcfd
				}
			}
		case _c.EndElement:
			break _cfaeg
		case _c.CharData:
		}
	}
	return nil
}
func (_ebffa *CT_DLblChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ebffa.Delete != nil {
		_adfe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ebffa.Delete, _adfe)
	}
	if _ebffa.Layout != nil {
		_bedbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_ebffa.Layout, _bedbf)
	}
	if _ebffa.Tx != nil {
		_aeef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ebffa.Tx, _aeef)
	}
	if _ebffa.NumFmt != nil {
		_ggad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ebffa.NumFmt, _ggad)
	}
	if _ebffa.SpPr != nil {
		_aafc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebffa.SpPr, _aafc)
	}
	if _ebffa.TxPr != nil {
		_aaef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ebffa.TxPr, _aaef)
	}
	if _ebffa.DLblPos != nil {
		_eedg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_ebffa.DLblPos, _eedg)
	}
	if _ebffa.ShowLegendKey != nil {
		_ccad := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_ebffa.ShowLegendKey, _ccad)
	}
	if _ebffa.ShowVal != nil {
		_ggbec := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_ebffa.ShowVal, _ggbec)
	}
	if _ebffa.ShowCatName != nil {
		_eeae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ebffa.ShowCatName, _eeae)
	}
	if _ebffa.ShowSerName != nil {
		_eege := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ebffa.ShowSerName, _eege)
	}
	if _ebffa.ShowPercent != nil {
		_bgcf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_ebffa.ShowPercent, _bgcf)
	}
	if _ebffa.ShowBubbleSize != nil {
		_efbg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ebffa.ShowBubbleSize, _efbg)
	}
	if _ebffa.Separator != nil {
		_degb := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_cf.AddPreserveSpaceAttr(&_degb, *_ebffa.Separator)
		e.EncodeElement(_ebffa.Separator, _degb)
	}
	return nil
}
func (_fbgb *CT_Perspective) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bgcaf := range start.Attr {
		if _bgcaf.Name.Local == "\u0076\u0061\u006c" {
			_abdb, _ebaaa := _e.ParseUint(_bgcaf.Value, 10, 8)
			if _ebaaa != nil {
				return _ebaaa
			}
			_efaag := uint8(_abdb)
			_fbgb.ValAttr = &_efaag
			continue
		}
	}
	for {
		_ddabf, _gffb := d.Token()
		if _gffb != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065:\u0020\u0025\u0073", _gffb)
		}
		if _feae, _gagfd := _ddabf.(_c.EndElement); _gagfd && _feae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cegce *CT_ExternalData) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _aa.Sprintf("\u0025\u0076", _cegce.IdAttr)})
	e.EncodeToken(start)
	if _cegce.AutoUpdate != nil {
		_feeaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061u\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}}
		e.EncodeElement(_cegce.AutoUpdate, _feeaf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type ST_LayoutMode byte

func (_feb *CT_Chart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _feb.Title != nil {
		_dgda := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_feb.Title, _dgda)
	}
	if _feb.AutoTitleDeleted != nil {
		_gcgc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0061u\u0074\u006f\u0054\u0069\u0074l\u0065\u0044e\u006c\u0065\u0074\u0065\u0064"}}
		e.EncodeElement(_feb.AutoTitleDeleted, _gcgc)
	}
	if _feb.PivotFmts != nil {
		_ddca := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_feb.PivotFmts, _ddca)
	}
	if _feb.View3D != nil {
		_bgff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076\u0069\u0065\u0077\u0033\u0044"}}
		e.EncodeElement(_feb.View3D, _bgff)
	}
	if _feb.Floor != nil {
		_efcb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0066\u006c\u006f\u006f\u0072"}}
		e.EncodeElement(_feb.Floor, _efcb)
	}
	if _feb.SideWall != nil {
		_geec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_feb.SideWall, _geec)
	}
	if _feb.BackWall != nil {
		_cgdd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_feb.BackWall, _cgdd)
	}
	_edaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}}
	e.EncodeElement(_feb.PlotArea, _edaf)
	if _feb.Legend != nil {
		_bede := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064"}}
		e.EncodeElement(_feb.Legend, _bede)
	}
	if _feb.PlotVisOnly != nil {
		_bgffb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}}
		e.EncodeElement(_feb.PlotVisOnly, _bgffb)
	}
	if _feb.DispBlanksAs != nil {
		_adcbe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0042\u006c\u0061n\u006b\u0073\u0041\u0073"}}
		e.EncodeElement(_feb.DispBlanksAs, _adcbe)
	}
	if _feb.ShowDLblsOverMax != nil {
		_gabg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073h\u006f\u0077\u0044\u004c\u0062l\u0073\u004fv\u0065\u0072\u004d\u0061\u0078"}}
		e.EncodeElement(_feb.ShowDLblsOverMax, _gabg)
	}
	if _feb.ExtLst != nil {
		_ffag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_feb.ExtLst, _ffag)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SerTxChoice and its children, prefixing error messages with path
func (_ebecd *CT_SerTxChoice) ValidateWithPath(path string) error {
	if _ebecd.StrRef != nil {
		if _ccfgc := _ebecd.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _ccfgc != nil {
			return _ccfgc
		}
	}
	return nil
}
func (_bddgd ST_Orientation) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_bddgd.String(), start)
}

const (
	ST_CrossesUnset    ST_Crosses = 0
	ST_CrossesAutoZero ST_Crosses = 1
	ST_CrossesMax      ST_Crosses = 2
	ST_CrossesMin      ST_Crosses = 3
)

func (_bcbf *CT_Layout) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_dacg:
	for {
		_abfae, _efag := d.Token()
		if _efag != nil {
			return _efag
		}
		switch _adagc := _abfae.(type) {
		case _c.StartElement:
			switch _adagc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}:
				_bcbf.ManualLayout = NewCT_ManualLayout()
				if _bdbf := d.DecodeElement(_bcbf.ManualLayout, &_adagc); _bdbf != nil {
					return _bdbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcbf.ExtLst = NewCT_ExtensionList()
				if _efbfb := d.DecodeElement(_bcbf.ExtLst, &_adagc); _efbfb != nil {
					return _efbfb
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0061\u0079o\u0075\u0074 \u0025\u0076", _adagc.Name)
				if _bedaa := d.Skip(); _bedaa != nil {
					return _bedaa
				}
			}
		case _c.EndElement:
			break _dacg
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Thickness() *CT_Thickness { _dgagf := &CT_Thickness{}; return _dgagf }

// ValidateWithPath validates the CT_ChartLines and its children, prefixing error messages with path
func (_bcg *CT_ChartLines) ValidateWithPath(path string) error {
	if _bcg.SpPr != nil {
		if _dagd := _bcg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dagd != nil {
			return _dagd
		}
	}
	return nil
}
func (_aaege *CT_PlotArea) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_eafge:
	for {
		_bgdcg, _abbef := d.Token()
		if _abbef != nil {
			return _abbef
		}
		switch _eade := _bgdcg.(type) {
		case _c.StartElement:
			switch _eade.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_aaege.Layout = NewCT_Layout()
				if _bcecfa := d.DecodeElement(_aaege.Layout, &_eade); _bcecfa != nil {
					return _bcecfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_fggf := NewCT_PlotAreaChoice()
				if _fbcb := d.DecodeElement(&_fggf.AreaChart, &_eade); _fbcb != nil {
					return _fbcb
				}
				_aaege.Choice = append(_aaege.Choice, _fggf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gbged := NewCT_PlotAreaChoice()
				if _ddaf := d.DecodeElement(&_gbged.Area3DChart, &_eade); _ddaf != nil {
					return _ddaf
				}
				_aaege.Choice = append(_aaege.Choice, _gbged)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_ecbca := NewCT_PlotAreaChoice()
				if _cfaeb := d.DecodeElement(&_ecbca.LineChart, &_eade); _cfaeb != nil {
					return _cfaeb
				}
				_aaege.Choice = append(_aaege.Choice, _ecbca)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fabef := NewCT_PlotAreaChoice()
				if _gacde := d.DecodeElement(&_fabef.Line3DChart, &_eade); _gacde != nil {
					return _gacde
				}
				_aaege.Choice = append(_aaege.Choice, _fabef)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_cafc := NewCT_PlotAreaChoice()
				if _dagg := d.DecodeElement(&_cafc.StockChart, &_eade); _dagg != nil {
					return _dagg
				}
				_aaege.Choice = append(_aaege.Choice, _cafc)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_abgg := NewCT_PlotAreaChoice()
				if _babgf := d.DecodeElement(&_abgg.RadarChart, &_eade); _babgf != nil {
					return _babgf
				}
				_aaege.Choice = append(_aaege.Choice, _abgg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_gagag := NewCT_PlotAreaChoice()
				if _gffa := d.DecodeElement(&_gagag.ScatterChart, &_eade); _gffa != nil {
					return _gffa
				}
				_aaege.Choice = append(_aaege.Choice, _gagag)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_cegf := NewCT_PlotAreaChoice()
				if _fbcgc := d.DecodeElement(&_cegf.PieChart, &_eade); _fbcgc != nil {
					return _fbcgc
				}
				_aaege.Choice = append(_aaege.Choice, _cegf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fdcb := NewCT_PlotAreaChoice()
				if _geggb := d.DecodeElement(&_fdcb.Pie3DChart, &_eade); _geggb != nil {
					return _geggb
				}
				_aaege.Choice = append(_aaege.Choice, _fdcb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_egcgg := NewCT_PlotAreaChoice()
				if _bgacg := d.DecodeElement(&_egcgg.DoughnutChart, &_eade); _bgacg != nil {
					return _bgacg
				}
				_aaege.Choice = append(_aaege.Choice, _egcgg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_ddeb := NewCT_PlotAreaChoice()
				if _bbcec := d.DecodeElement(&_ddeb.BarChart, &_eade); _bbcec != nil {
					return _bbcec
				}
				_aaege.Choice = append(_aaege.Choice, _ddeb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_effg := NewCT_PlotAreaChoice()
				if _eagb := d.DecodeElement(&_effg.Bar3DChart, &_eade); _eagb != nil {
					return _eagb
				}
				_aaege.Choice = append(_aaege.Choice, _effg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_ebcgb := NewCT_PlotAreaChoice()
				if _agbac := d.DecodeElement(&_ebcgb.OfPieChart, &_eade); _agbac != nil {
					return _agbac
				}
				_aaege.Choice = append(_aaege.Choice, _ebcgb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gdcgf := NewCT_PlotAreaChoice()
				if _cadfg := d.DecodeElement(&_gdcgf.SurfaceChart, &_eade); _cadfg != nil {
					return _cadfg
				}
				_aaege.Choice = append(_aaege.Choice, _gdcgf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_daed := NewCT_PlotAreaChoice()
				if _fdbc := d.DecodeElement(&_daed.Surface3DChart, &_eade); _fdbc != nil {
					return _fdbc
				}
				_aaege.Choice = append(_aaege.Choice, _daed)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_aebge := NewCT_PlotAreaChoice()
				if _eefda := d.DecodeElement(&_aebge.BubbleChart, &_eade); _eefda != nil {
					return _eefda
				}
				_aaege.Choice = append(_aaege.Choice, _aebge)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				if _aaege.CChoice == nil {
					_aaege.CChoice = NewCT_PlotAreaChoice1()
				}
				if _egddd := d.DecodeElement(&_aaege.CChoice.ValAx, &_eade); _egddd != nil {
					return _egddd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				if _aaege.CChoice == nil {
					_aaege.CChoice = NewCT_PlotAreaChoice1()
				}
				if _bdff := d.DecodeElement(&_aaege.CChoice.CatAx, &_eade); _bdff != nil {
					return _bdff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				if _aaege.CChoice == nil {
					_aaege.CChoice = NewCT_PlotAreaChoice1()
				}
				if _gbaa := d.DecodeElement(&_aaege.CChoice.DateAx, &_eade); _gbaa != nil {
					return _gbaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				if _aaege.CChoice == nil {
					_aaege.CChoice = NewCT_PlotAreaChoice1()
				}
				if _edffd := d.DecodeElement(&_aaege.CChoice.SerAx, &_eade); _edffd != nil {
					return _edffd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}:
				_aaege.DTable = NewCT_DTable()
				if _eeadcc := d.DecodeElement(_aaege.DTable, &_eade); _eeadcc != nil {
					return _eeadcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aaege.SpPr = _d.NewCT_ShapeProperties()
				if _egaca := d.DecodeElement(_aaege.SpPr, &_eade); _egaca != nil {
					return _egaca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aaege.ExtLst = NewCT_ExtensionList()
				if _cedc := d.DecodeElement(_aaege.ExtLst, &_eade); _cedc != nil {
					return _cedc
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0020\u0025\u0076", _eade.Name)
				if _bgffe := d.Skip(); _bgffe != nil {
					return _bgffe
				}
			}
		case _c.EndElement:
			break _eafge
		case _c.CharData:
		}
	}
	return nil
}
func (_gfefb ST_ScatterStyle) String() string {
	switch _gfefb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0069\u006e\u0065"
	case 3:
		return "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case 4:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 5:
		return "\u0073\u006d\u006f\u006f\u0074\u0068"
	case 6:
		return "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return ""
}
func NewCT_FirstSliceAng() *CT_FirstSliceAng { _bfaef := &CT_FirstSliceAng{}; return _bfaef }
func (_gfaf *CT_RadarChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gfaf.RadarStyle = NewCT_RadarStyle()
_fgaf:
	for {
		_fcced, _ddggc := d.Token()
		if _ddggc != nil {
			return _ddggc
		}
		switch _eeedc := _fcced.(type) {
		case _c.StartElement:
			switch _eeedc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _eddef := d.DecodeElement(_gfaf.RadarStyle, &_eeedc); _eddef != nil {
					return _eddef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gfaf.VaryColors = NewCT_Boolean()
				if _eaeg := d.DecodeElement(_gfaf.VaryColors, &_eeedc); _eaeg != nil {
					return _eaeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggdg := NewCT_RadarSer()
				if _cgdbb := d.DecodeElement(_ggdg, &_eeedc); _cgdbb != nil {
					return _cgdbb
				}
				_gfaf.Ser = append(_gfaf.Ser, _ggdg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gfaf.DLbls = NewCT_DLbls()
				if _dgaga := d.DecodeElement(_gfaf.DLbls, &_eeedc); _dgaga != nil {
					return _dgaga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_dggga := NewCT_UnsignedInt()
				if _gaaee := d.DecodeElement(_dggga, &_eeedc); _gaaee != nil {
					return _gaaee
				}
				_gfaf.AxId = append(_gfaf.AxId, _dggga)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfaf.ExtLst = NewCT_ExtensionList()
				if _efaf := d.DecodeElement(_gfaf.ExtLst, &_eeedc); _efaf != nil {
					return _efaf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _eeedc.Name)
				if _deecd := d.Skip(); _deecd != nil {
					return _deecd
				}
			}
		case _c.EndElement:
			break _fgaf
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_UpDownBar and its children
func (_gbefd *CT_UpDownBar) Validate() error {
	return _gbefd.ValidateWithPath("\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072")
}
func NewCT_Marker() *CT_Marker             { _agafg := &CT_Marker{}; return _agafg }
func NewCT_LayoutTarget() *CT_LayoutTarget { _efgbg := &CT_LayoutTarget{}; return _efgbg }
func (_aedgd *CT_PictureFormat) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_aedgd.ValAttr = ST_PictureFormat(1)
	for _, _fdfb := range start.Attr {
		if _fdfb.Name.Local == "\u0076\u0061\u006c" {
			_aedgd.ValAttr.UnmarshalXMLAttr(_fdfb)
			continue
		}
	}
	for {
		_aceb, _fcbf := d.Token()
		if _fcbf != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074u\u0072e\u0046\u006f\u0072\u006d\u0061\u0074\u003a \u0025\u0073", _fcbf)
		}
		if _cfbg, _deba := _aceb.(_c.EndElement); _deba && _cfbg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dbcbc *EG_SerShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_ddeaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dbcbc.Idx, _ddeaf)
	_babbf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_dbcbc.Order, _babbf)
	if _dbcbc.Tx != nil {
		_gbdde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dbcbc.Tx, _gbdde)
	}
	if _dbcbc.SpPr != nil {
		_affgc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dbcbc.SpPr, _affgc)
	}
	return nil
}
func NewCT_RadarStyle() *CT_RadarStyle { _facg := &CT_RadarStyle{}; return _facg }
func (_dgfgc ST_LayoutTarget) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_edbeb := _c.Attr{}
	_edbeb.Name = name
	switch _dgfgc {
	case ST_LayoutTargetUnset:
		_edbeb.Value = ""
	case ST_LayoutTargetInner:
		_edbeb.Value = "\u0069\u006e\u006ee\u0072"
	case ST_LayoutTargetOuter:
		_edbeb.Value = "\u006f\u0075\u0074e\u0072"
	}
	return _edbeb, nil
}
func (_dfbaa *EG_LineChartShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dfbaa.Grouping = NewCT_Grouping()
_abade:
	for {
		_bgggc, _abffa := d.Token()
		if _abffa != nil {
			return _abffa
		}
		switch _gbgae := _bgggc.(type) {
		case _c.StartElement:
			switch _gbgae.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _ddfef := d.DecodeElement(_dfbaa.Grouping, &_gbgae); _ddfef != nil {
					return _ddfef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dfbaa.VaryColors = NewCT_Boolean()
				if _bdfbb := d.DecodeElement(_dfbaa.VaryColors, &_gbgae); _bdfbb != nil {
					return _bdfbb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_caaead := NewCT_LineSer()
				if _faef := d.DecodeElement(_caaead, &_gbgae); _faef != nil {
					return _faef
				}
				_dfbaa.Ser = append(_dfbaa.Ser, _caaead)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dfbaa.DLbls = NewCT_DLbls()
				if _gagce := d.DecodeElement(_dfbaa.DLbls, &_gbgae); _gagce != nil {
					return _gagce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_dfbaa.DropLines = NewCT_ChartLines()
				if _bfca := d.DecodeElement(_dfbaa.DropLines, &_gbgae); _bfca != nil {
					return _bfca
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0069\u006e\u0065\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _gbgae.Name)
				if _ebgeg := d.Skip(); _ebgeg != nil {
					return _ebgeg
				}
			}
		case _c.EndElement:
			break _abade
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_MarkerSize and its children
func (_gebec *CT_MarkerSize) Validate() error {
	return _gebec.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065")
}
func (_ceaa *CT_DispUnitsChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ggebf:
	for {
		_aaae, _ffaa := d.Token()
		if _ffaa != nil {
			return _ffaa
		}
		switch _ggbdd := _aaae.(type) {
		case _c.StartElement:
			switch _ggbdd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_ceaa.CustUnit = NewCT_Double()
				if _dfdb := d.DecodeElement(_ceaa.CustUnit, &_ggbdd); _dfdb != nil {
					return _dfdb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_ceaa.BuiltInUnit = NewCT_BuiltInUnit()
				if _debc := d.DecodeElement(_ceaa.BuiltInUnit, &_ggbdd); _debc != nil {
					return _debc
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0055\u006ei\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ggbdd.Name)
				if _cdgd := d.Skip(); _cdgd != nil {
					return _cdgd
				}
			}
		case _c.EndElement:
			break _ggebf
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ExternalData and its children
func (_ggbde *CT_ExternalData) Validate() error {
	return _ggbde.ValidateWithPath("\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061")
}

// ValidateWithPath validates the CT_CatAx and its children, prefixing error messages with path
func (_egde *CT_CatAx) ValidateWithPath(path string) error {
	if _abgca := _egde.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _abgca != nil {
		return _abgca
	}
	if _ffbc := _egde.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _ffbc != nil {
		return _ffbc
	}
	if _egde.Delete != nil {
		if _cfd := _egde.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _cfd != nil {
			return _cfd
		}
	}
	if _afb := _egde.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _afb != nil {
		return _afb
	}
	if _egde.MajorGridlines != nil {
		if _afde := _egde.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _afde != nil {
			return _afde
		}
	}
	if _egde.MinorGridlines != nil {
		if _cagd := _egde.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cagd != nil {
			return _cagd
		}
	}
	if _egde.Title != nil {
		if _cef := _egde.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _cef != nil {
			return _cef
		}
	}
	if _egde.NumFmt != nil {
		if _cdgc := _egde.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cdgc != nil {
			return _cdgc
		}
	}
	if _egde.MajorTickMark != nil {
		if _fecge := _egde.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fecge != nil {
			return _fecge
		}
	}
	if _egde.MinorTickMark != nil {
		if _cedb := _egde.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cedb != nil {
			return _cedb
		}
	}
	if _egde.TickLblPos != nil {
		if _dfad := _egde.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _dfad != nil {
			return _dfad
		}
	}
	if _egde.SpPr != nil {
		if _abge := _egde.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _abge != nil {
			return _abge
		}
	}
	if _egde.TxPr != nil {
		if _ddd := _egde.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ddd != nil {
			return _ddd
		}
	}
	if _gcae := _egde.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _gcae != nil {
		return _gcae
	}
	if _egde.Choice != nil {
		if _gbdd := _egde.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gbdd != nil {
			return _gbdd
		}
	}
	if _egde.Auto != nil {
		if _efgb := _egde.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _efgb != nil {
			return _efgb
		}
	}
	if _egde.LblAlgn != nil {
		if _ddda := _egde.LblAlgn.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u0041\u006c\u0067\u006e"); _ddda != nil {
			return _ddda
		}
	}
	if _egde.LblOffset != nil {
		if _gedg := _egde.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _gedg != nil {
			return _gedg
		}
	}
	if _egde.TickLblSkip != nil {
		if _bgcd := _egde.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _bgcd != nil {
			return _bgcd
		}
	}
	if _egde.TickMarkSkip != nil {
		if _eaf := _egde.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _eaf != nil {
			return _eaf
		}
	}
	if _egde.NoMultiLvlLbl != nil {
		if _eage := _egde.NoMultiLvlLbl.ValidateWithPath(path + "\u002f\u004e\u006f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u004c\u0062\u006c"); _eage != nil {
			return _eage
		}
	}
	if _egde.ExtLst != nil {
		if _aadd := _egde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aadd != nil {
			return _aadd
		}
	}
	return nil
}
func (_eefe *CT_ExtensionList) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _eefe.Ext != nil {
		_dfeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065x\u0074"}}
		for _, _egff := range _eefe.Ext {
			e.EncodeElement(_egff, _dfeb)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fefed *CT_RadarSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fefed.Idx = NewCT_UnsignedInt()
	_fefed.Order = NewCT_UnsignedInt()
_bdfb:
	for {
		_edffe, _gbgbgf := d.Token()
		if _gbgbgf != nil {
			return _gbgbgf
		}
		switch _cagag := _edffe.(type) {
		case _c.StartElement:
			switch _cagag.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gdfdg := d.DecodeElement(_fefed.Idx, &_cagag); _gdfdg != nil {
					return _gdfdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _aaddb := d.DecodeElement(_fefed.Order, &_cagag); _aaddb != nil {
					return _aaddb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fefed.Tx = NewCT_SerTx()
				if _gfegf := d.DecodeElement(_fefed.Tx, &_cagag); _gfegf != nil {
					return _gfegf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fefed.SpPr = _d.NewCT_ShapeProperties()
				if _cead := d.DecodeElement(_fefed.SpPr, &_cagag); _cead != nil {
					return _cead
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_fefed.Marker = NewCT_Marker()
				if _aabe := d.DecodeElement(_fefed.Marker, &_cagag); _aabe != nil {
					return _aabe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ddgd := NewCT_DPt()
				if _egeeb := d.DecodeElement(_ddgd, &_cagag); _egeeb != nil {
					return _egeeb
				}
				_fefed.DPt = append(_fefed.DPt, _ddgd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fefed.DLbls = NewCT_DLbls()
				if _cbbaf := d.DecodeElement(_fefed.DLbls, &_cagag); _cbbaf != nil {
					return _cbbaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_fefed.Cat = NewCT_AxDataSource()
				if _beba := d.DecodeElement(_fefed.Cat, &_cagag); _beba != nil {
					return _beba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_fefed.Val = NewCT_NumDataSource()
				if _fbedgc := d.DecodeElement(_fefed.Val, &_cagag); _fbedgc != nil {
					return _fbedgc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fefed.ExtLst = NewCT_ExtensionList()
				if _aaegd := d.DecodeElement(_fefed.ExtLst, &_cagag); _aaegd != nil {
					return _aaegd
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072\u0020\u0025\u0076", _cagag.Name)
				if _fcbd := d.Skip(); _fcbd != nil {
					return _fcbd
				}
			}
		case _c.EndElement:
			break _bdfb
		case _c.CharData:
		}
	}
	return nil
}
func (_agdfb *CT_PivotSource) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_adaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
	_cf.AddPreserveSpaceAttr(&_adaa, _agdfb.Name)
	e.EncodeElement(_agdfb.Name, _adaa)
	_gacg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0066\u006d\u0074\u0049\u0064"}}
	e.EncodeElement(_agdfb.FmtId, _gacg)
	if _agdfb.ExtLst != nil {
		_edee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _abee := range _agdfb.ExtLst {
			e.EncodeElement(_abee, _edee)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

var ST_DepthPercentWithSymbolPatternRe = _a.MustCompile(ST_DepthPercentWithSymbolPattern)

// ValidateWithPath validates the CT_HPercent and its children, prefixing error messages with path
func (_gdbe *CT_HPercent) ValidateWithPath(path string) error {
	if _gdbe.ValAttr != nil {
		if _ccbbb := _gdbe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ccbbb != nil {
			return _ccbbb
		}
	}
	return nil
}
func (_fefce ST_BarGrouping) ValidateWithPath(path string) error {
	switch _fefce {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fefce))
	}
	return nil
}
func NewCT_LayoutMode() *CT_LayoutMode { _cfgc := &CT_LayoutMode{}; return _cfgc }

// Validate validates the CT_LblAlgn and its children
func (_fcfd *CT_LblAlgn) Validate() error {
	return _fcfd.ValidateWithPath("\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e")
}

// ValidateWithPath validates the CT_DLbls and its children, prefixing error messages with path
func (_gdffg *CT_DLbls) ValidateWithPath(path string) error {
	for _cgfg, _afce := range _gdffg.DLbl {
		if _afgc := _afce.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0044\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _cgfg)); _afgc != nil {
			return _afgc
		}
	}
	if _gdffg.Choice != nil {
		if _gfgfd := _gdffg.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gfgfd != nil {
			return _gfgfd
		}
	}
	if _gdffg.ExtLst != nil {
		if _acge := _gdffg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acge != nil {
			return _acge
		}
	}
	return nil
}
func (_bebe *CT_Double) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _egdc := range start.Attr {
		if _egdc.Name.Local == "\u0076\u0061\u006c" {
			_cgff, _cgbf := _e.ParseFloat(_egdc.Value, 64)
			if _cgbf != nil {
				return _cgbf
			}
			_bebe.ValAttr = _cgff
			continue
		}
	}
	for {
		_gdbdb, _gebg := d.Token()
		if _gebg != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0044\u006f\u0075b\u006c\u0065\u003a\u0020\u0025\u0073", _gebg)
		}
		if _dgce, _fgdc := _gdbdb.(_c.EndElement); _fgdc && _dgce.Name == start.Name {
			break
		}
	}
	return nil
}
func NewEG_AreaChartShared() *EG_AreaChartShared { _cbbg := &EG_AreaChartShared{}; return _cbbg }
func (_facfb *CT_DTable) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _facfb.ShowHorzBorder != nil {
		_fdgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077H\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_facfb.ShowHorzBorder, _fdgg)
	}
	if _facfb.ShowVertBorder != nil {
		_efcef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077V\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_facfb.ShowVertBorder, _efcef)
	}
	if _facfb.ShowOutline != nil {
		_daf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}}
		e.EncodeElement(_facfb.ShowOutline, _daf)
	}
	if _facfb.ShowKeys != nil {
		_acea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}}
		e.EncodeElement(_facfb.ShowKeys, _acea)
	}
	if _facfb.SpPr != nil {
		_gfcac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_facfb.SpPr, _gfcac)
	}
	if _facfb.TxPr != nil {
		_ebcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_facfb.TxPr, _ebcg)
	}
	if _facfb.ExtLst != nil {
		_afgcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_facfb.ExtLst, _afgcd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type ST_ErrValType byte
type CT_Lvl struct{ Pt []*CT_StrVal }
type CT_RadarChart struct {
	RadarStyle *CT_RadarStyle
	VaryColors *CT_Boolean
	Ser        []*CT_RadarSer
	DLbls      *CT_DLbls
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}
type CT_TextLanguageID struct{ ValAttr string }

func (_ecce *CT_ExternalData) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _fgef := range start.Attr {
		if _fgef.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _fgef.Name.Local == "\u0069\u0064" || _fgef.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _fgef.Name.Local == "\u0069\u0064" {
			_gafca, _debb := _fgef.Value, error(nil)
			if _debb != nil {
				return _debb
			}
			_ecce.IdAttr = _gafca
			continue
		}
	}
_dgabe:
	for {
		_cacb, _bgccd := d.Token()
		if _bgccd != nil {
			return _bgccd
		}
		switch _cbgcb := _cacb.(type) {
		case _c.StartElement:
			switch _cbgcb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}:
				_ecce.AutoUpdate = NewCT_Boolean()
				if _baac := d.DecodeElement(_ecce.AutoUpdate, &_cbgcb); _baac != nil {
					return _baac
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _cbgcb.Name)
				if _aceg := d.Skip(); _aceg != nil {
					return _aceg
				}
			}
		case _c.EndElement:
			break _dgabe
		case _c.CharData:
		}
	}
	return nil
}
func (_fadcd ST_OfPieType) ValidateWithPath(path string) error {
	switch _fadcd {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fadcd))
	}
	return nil
}
func (_ebgb *CT_Legend) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _ebgb.LegendPos != nil {
		_gfbg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"}}
		e.EncodeElement(_ebgb.LegendPos, _gfbg)
	}
	if _ebgb.LegendEntry != nil {
		_fdcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}}
		for _, _dbfc := range _ebgb.LegendEntry {
			e.EncodeElement(_dbfc, _fdcg)
		}
	}
	if _ebgb.Layout != nil {
		_ecde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_ebgb.Layout, _ecde)
	}
	if _ebgb.Overlay != nil {
		_affe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_ebgb.Overlay, _affe)
	}
	if _ebgb.SpPr != nil {
		_gcdd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebgb.SpPr, _gcdd)
	}
	if _ebgb.TxPr != nil {
		_ddde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ebgb.TxPr, _ddde)
	}
	if _ebgb.ExtLst != nil {
		_bdgec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebgb.ExtLst, _bdgec)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ebcd *CT_CustSplit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bgee:
	for {
		_cgeb, _gedf := d.Token()
		if _gedf != nil {
			return _gedf
		}
		switch _efdb := _cgeb.(type) {
		case _c.StartElement:
			switch _efdb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}:
				_fgff := NewCT_UnsignedInt()
				if _adbf := d.DecodeElement(_fgff, &_efdb); _adbf != nil {
					return _adbf
				}
				_ebcd.SecondPiePt = append(_ebcd.SecondPiePt, _fgff)
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u0075\u0073t\u0053\u0070\u006c\u0069\u0074\u0020\u0025\u0076", _efdb.Name)
				if _agaf := d.Skip(); _agaf != nil {
					return _agaf
				}
			}
		case _c.EndElement:
			break _bgee
		case _c.CharData:
		}
	}
	return nil
}
func (_cfcdb ST_Orientation) String() string {
	switch _cfcdb {
	case 0:
		return ""
	case 1:
		return "\u006d\u0061\u0078\u004d\u0069\u006e"
	case 2:
		return "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return ""
}
func (_bcdgb *ST_BarGrouping) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_bcdgb = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_bcdgb = 1
	case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
		*_bcdgb = 2
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_bcdgb = 3
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_bcdgb = 4
	}
	return nil
}
func NewCT_LblOffset() *CT_LblOffset { _afcg := &CT_LblOffset{}; return _afcg }
func NewCT_BarSer() *CT_BarSer {
	_fca := &CT_BarSer{}
	_fca.Idx = NewCT_UnsignedInt()
	_fca.Order = NewCT_UnsignedInt()
	return _fca
}
func (_bcdec ST_RadarStyle) ValidateWithPath(path string) error {
	switch _bcdec {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcdec))
	}
	return nil
}

type CT_RadarStyle struct{ ValAttr ST_RadarStyle }
type CT_PageSetup struct {
	PaperSizeAttr          *uint32
	PaperHeightAttr        *string
	PaperWidthAttr         *string
	FirstPageNumberAttr    *uint32
	OrientationAttr        ST_PageSetupOrientation
	BlackAndWhiteAttr      *bool
	DraftAttr              *bool
	UseFirstPageNumberAttr *bool
	HorizontalDpiAttr      *int32
	VerticalDpiAttr        *int32
	CopiesAttr             *uint32
}

func (_dddae *CT_StockChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ffdfa:
	for {
		_cfdb, _defeg := d.Token()
		if _defeg != nil {
			return _defeg
		}
		switch _fbdd := _cfdb.(type) {
		case _c.StartElement:
			switch _fbdd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_begdc := NewCT_LineSer()
				if _ggdc := d.DecodeElement(_begdc, &_fbdd); _ggdc != nil {
					return _ggdc
				}
				_dddae.Ser = append(_dddae.Ser, _begdc)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dddae.DLbls = NewCT_DLbls()
				if _eacbag := d.DecodeElement(_dddae.DLbls, &_fbdd); _eacbag != nil {
					return _eacbag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_dddae.DropLines = NewCT_ChartLines()
				if _eaad := d.DecodeElement(_dddae.DropLines, &_fbdd); _eaad != nil {
					return _eaad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_dddae.HiLowLines = NewCT_ChartLines()
				if _dgaag := d.DecodeElement(_dddae.HiLowLines, &_fbdd); _dgaag != nil {
					return _dgaag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_dddae.UpDownBars = NewCT_UpDownBars()
				if _ffad := d.DecodeElement(_dddae.UpDownBars, &_fbdd); _ffad != nil {
					return _ffad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_acdba := NewCT_UnsignedInt()
				if _ebefc := d.DecodeElement(_acdba, &_fbdd); _ebefc != nil {
					return _ebefc
				}
				_dddae.AxId = append(_dddae.AxId, _acdba)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dddae.ExtLst = NewCT_ExtensionList()
				if _cdfc := d.DecodeElement(_dddae.ExtLst, &_fbdd); _cdfc != nil {
					return _cdfc
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _fbdd.Name)
				if _dgdbb := d.Skip(); _dgdbb != nil {
					return _dgdbb
				}
			}
		case _c.EndElement:
			break _ffdfa
		case _c.CharData:
		}
	}
	return nil
}
func (_cecgg *CT_Layout) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _cecgg.ManualLayout != nil {
		_fega := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u006e\u0075\u0061\u006c\u004ca\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_cecgg.ManualLayout, _fega)
	}
	if _cecgg.ExtLst != nil {
		_aaaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cecgg.ExtLst, _aaaa)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_HeaderFooter and its children
func (_cffc *CT_HeaderFooter) Validate() error {
	return _cffc.ValidateWithPath("\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072")
}
func NewCT_LblAlgn() *CT_LblAlgn { _adee := &CT_LblAlgn{}; _adee.ValAttr = ST_LblAlgn(1); return _adee }

// Validate validates the ChartSpace and its children
func (_daacb *ChartSpace) Validate() error {
	return _daacb.ValidateWithPath("\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}
func NewChartSpace() *ChartSpace {
	_aebdd := &ChartSpace{}
	_aebdd.CT_ChartSpace = *NewCT_ChartSpace()
	return _aebdd
}
func ParseUnionST_SecondPieSize(s string) (ST_SecondPieSize, error) {
	if ST_SecondPieSizePercentPatternRe.MatchString(s) {
		return ST_SecondPieSize{ST_SecondPieSizePercent: &s}, nil
	}
	_bggdb, _bgcdc := _e.ParseUint(s, 10, 16)
	if _bgcdc != nil {
		return ST_SecondPieSize{}, _bgcdc
	}
	_ecgd := uint16(_bggdb)
	return ST_SecondPieSize{ST_SecondPieSizeUShort: &_ecgd}, nil
}

var ST_HPercentWithSymbolPatternRe = _a.MustCompile(ST_HPercentWithSymbolPattern)

func (_dfea *CT_PlotAreaChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dfea.AreaChart != nil {
		_fgac := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0061\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.AreaChart, _fgac)
	}
	if _dfea.Area3DChart != nil {
		_efga := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.Area3DChart, _efga)
	}
	if _dfea.LineChart != nil {
		_fead := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.LineChart, _fead)
	}
	if _dfea.Line3DChart != nil {
		_bbgfe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.Line3DChart, _bbgfe)
	}
	if _dfea.StockChart != nil {
		_agccd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.StockChart, _agccd)
	}
	if _dfea.RadarChart != nil {
		_gaaef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.RadarChart, _gaaef)
	}
	if _dfea.ScatterChart != nil {
		_dgac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.ScatterChart, _dgac)
	}
	if _dfea.PieChart != nil {
		_bgaff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.PieChart, _bgaff)
	}
	if _dfea.Pie3DChart != nil {
		_dcccd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.Pie3DChart, _dcccd)
	}
	if _dfea.DoughnutChart != nil {
		_fbfaa := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064o\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.DoughnutChart, _fbfaa)
	}
	if _dfea.BarChart != nil {
		_caef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.BarChart, _caef)
	}
	if _dfea.Bar3DChart != nil {
		_adfeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.Bar3DChart, _adfeg)
	}
	if _dfea.OfPieChart != nil {
		_gbbed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.OfPieChart, _gbbed)
	}
	if _dfea.SurfaceChart != nil {
		_fdgc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0075\u0072\u0066\u0061\u0063\u0065C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.SurfaceChart, _fdgc)
	}
	if _dfea.Surface3DChart != nil {
		_gbcf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0075\u0072\u0066a\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.Surface3DChart, _gbcf)
	}
	if _dfea.BubbleChart != nil {
		_fffa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dfea.BubbleChart, _fffa)
	}
	return nil
}
func (_cg *CT_Area3DChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _cg.Grouping != nil {
		_fd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_cg.Grouping, _fd)
	}
	if _cg.VaryColors != nil {
		_fg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cg.VaryColors, _fg)
	}
	if _cg.Ser != nil {
		_bd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cc := range _cg.Ser {
			e.EncodeElement(_cc, _bd)
		}
	}
	if _cg.DLbls != nil {
		_ed := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cg.DLbls, _ed)
	}
	if _cg.DropLines != nil {
		_g := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cg.DropLines, _g)
	}
	if _cg.GapDepth != nil {
		_eg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_cg.GapDepth, _eg)
	}
	_ge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _de := range _cg.AxId {
		e.EncodeElement(_de, _ge)
	}
	if _cg.ExtLst != nil {
		_eb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cg.ExtLst, _eb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_ExternalData struct {
	IdAttr     string
	AutoUpdate *CT_Boolean
}

func NewCT_LogBase() *CT_LogBase { _afebe := &CT_LogBase{}; _afebe.ValAttr = 2; return _afebe }

// ValidateWithPath validates the CT_View3D and its children, prefixing error messages with path
func (_cegae *CT_View3D) ValidateWithPath(path string) error {
	if _cegae.RotX != nil {
		if _fgafa := _cegae.RotX.ValidateWithPath(path + "\u002f\u0052\u006ft\u0058"); _fgafa != nil {
			return _fgafa
		}
	}
	if _cegae.HPercent != nil {
		if _egacg := _cegae.HPercent.ValidateWithPath(path + "\u002fH\u0050\u0065\u0072\u0063\u0065\u006et"); _egacg != nil {
			return _egacg
		}
	}
	if _cegae.RotY != nil {
		if _gbbcf := _cegae.RotY.ValidateWithPath(path + "\u002f\u0052\u006ft\u0059"); _gbbcf != nil {
			return _gbbcf
		}
	}
	if _cegae.DepthPercent != nil {
		if _fgae := _cegae.DepthPercent.ValidateWithPath(path + "\u002f\u0044\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fgae != nil {
			return _fgae
		}
	}
	if _cegae.RAngAx != nil {
		if _bdgca := _cegae.RAngAx.ValidateWithPath(path + "\u002fR\u0041\u006e\u0067\u0041\u0078"); _bdgca != nil {
			return _bdgca
		}
	}
	if _cegae.Perspective != nil {
		if _adbbe := _cegae.Perspective.ValidateWithPath(path + "\u002f\u0050\u0065r\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"); _adbbe != nil {
			return _adbbe
		}
	}
	if _cegae.ExtLst != nil {
		if _ddbg := _cegae.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddbg != nil {
			return _ddbg
		}
	}
	return nil
}
func (_gcdfe *CT_Lvl) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_fedda:
	for {
		_egeeg, _adeb := d.Token()
		if _adeb != nil {
			return _adeb
		}
		switch _dgfb := _egeeg.(type) {
		case _c.StartElement:
			switch _dgfb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_cgcf := NewCT_StrVal()
				if _gcac := d.DecodeElement(_cgcf, &_dgfb); _gcac != nil {
					return _gcac
				}
				_gcdfe.Pt = append(_gcdfe.Pt, _cgcf)
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0076\u006c\u0020\u0025\u0076", _dgfb.Name)
				if _agaag := d.Skip(); _agaag != nil {
					return _agaag
				}
			}
		case _c.EndElement:
			break _fedda
		case _c.CharData:
		}
	}
	return nil
}
func (_befea ST_OfPieType) Validate() error { return _befea.ValidateWithPath("") }

type CT_SizeRepresents struct{ ValAttr ST_SizeRepresents }

// ValidateWithPath validates the CT_Pie3DChart and its children, prefixing error messages with path
func (_bedg *CT_Pie3DChart) ValidateWithPath(path string) error {
	if _bedg.VaryColors != nil {
		if _aefg := _bedg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _aefg != nil {
			return _aefg
		}
	}
	for _ddcaa, _fbfae := range _bedg.Ser {
		if _facd := _fbfae.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ddcaa)); _facd != nil {
			return _facd
		}
	}
	if _bedg.DLbls != nil {
		if _deaca := _bedg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _deaca != nil {
			return _deaca
		}
	}
	if _bedg.ExtLst != nil {
		if _bcbga := _bedg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcbga != nil {
			return _bcbga
		}
	}
	return nil
}
func (_cfeee *CT_Trendline) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cfeee.TrendlineType = NewCT_TrendlineType()
_cacee:
	for {
		_fbcgcf, _aceed := d.Token()
		if _aceed != nil {
			return _aceed
		}
		switch _abaf := _fbcgcf.(type) {
		case _c.StartElement:
			switch _abaf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				_cfeee.Name = new(string)
				if _cdfce := d.DecodeElement(_cfeee.Name, &_abaf); _cdfce != nil {
					return _cdfce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cfeee.SpPr = _d.NewCT_ShapeProperties()
				if _gfbac := d.DecodeElement(_cfeee.SpPr, &_abaf); _gfbac != nil {
					return _gfbac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}:
				if _baagfg := d.DecodeElement(_cfeee.TrendlineType, &_abaf); _baagfg != nil {
					return _baagfg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				_cfeee.Order = NewCT_Order()
				if _gdaee := d.DecodeElement(_cfeee.Order, &_abaf); _gdaee != nil {
					return _gdaee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}:
				_cfeee.Period = NewCT_Period()
				if _dccgg := d.DecodeElement(_cfeee.Period, &_abaf); _dccgg != nil {
					return _dccgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}:
				_cfeee.Forward = NewCT_Double()
				if _gecbf := d.DecodeElement(_cfeee.Forward, &_abaf); _gecbf != nil {
					return _gecbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}:
				_cfeee.Backward = NewCT_Double()
				if _dafd := d.DecodeElement(_cfeee.Backward, &_abaf); _dafd != nil {
					return _dafd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}:
				_cfeee.Intercept = NewCT_Double()
				if _fcdgd := d.DecodeElement(_cfeee.Intercept, &_abaf); _fcdgd != nil {
					return _fcdgd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}:
				_cfeee.DispRSqr = NewCT_Boolean()
				if _bcbdf := d.DecodeElement(_cfeee.DispRSqr, &_abaf); _bcbdf != nil {
					return _bcbdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}:
				_cfeee.DispEq = NewCT_Boolean()
				if _cgaa := d.DecodeElement(_cfeee.DispEq, &_abaf); _cgaa != nil {
					return _cgaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}:
				_cfeee.TrendlineLbl = NewCT_TrendlineLbl()
				if _aaadc := d.DecodeElement(_cfeee.TrendlineLbl, &_abaf); _aaadc != nil {
					return _aaadc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfeee.ExtLst = NewCT_ExtensionList()
				if _abdcb := d.DecodeElement(_cfeee.ExtLst, &_abaf); _abdcb != nil {
					return _abdcb
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0020\u0025\u0076", _abaf.Name)
				if _ggeef := d.Skip(); _ggeef != nil {
					return _ggeef
				}
			}
		case _c.EndElement:
			break _cacee
		case _c.CharData:
		}
	}
	return nil
}
func (_dbbg *CT_LineChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_baff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_dbbg.Grouping, _baff)
	if _dbbg.VaryColors != nil {
		_ecebg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dbbg.VaryColors, _ecebg)
	}
	if _dbbg.Ser != nil {
		_gagg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fcdg := range _dbbg.Ser {
			e.EncodeElement(_fcdg, _gagg)
		}
	}
	if _dbbg.DLbls != nil {
		_gfgc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dbbg.DLbls, _gfgc)
	}
	if _dbbg.DropLines != nil {
		_daaba := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dbbg.DropLines, _daaba)
	}
	if _dbbg.HiLowLines != nil {
		_geda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dbbg.HiLowLines, _geda)
	}
	if _dbbg.UpDownBars != nil {
		_dbcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_dbbg.UpDownBars, _dbcc)
	}
	if _dbbg.Marker != nil {
		_bddc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_dbbg.Marker, _bddc)
	}
	if _dbbg.Smooth != nil {
		_egeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_dbbg.Smooth, _egeg)
	}
	_dafc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ggfcg := range _dbbg.AxId {
		e.EncodeElement(_ggfcg, _dafc)
	}
	if _dbbg.ExtLst != nil {
		_gdab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbbg.ExtLst, _gdab)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bbcb *CT_DLbls) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_aefb:
	for {
		_fccff, _bgcc := d.Token()
		if _bgcc != nil {
			return _bgcc
		}
		switch _cbfa := _fccff.(type) {
		case _c.StartElement:
			switch _cbfa.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_cabc := NewCT_DLbl()
				if _eabc := d.DecodeElement(_cabc, &_cbfa); _eabc != nil {
					return _eabc
				}
				_bbcb.DLbl = append(_bbcb.DLbl, _cabc)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _agaa := d.DecodeElement(&_bbcb.Choice.Delete, &_cbfa); _agaa != nil {
					return _agaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _gfbe := d.DecodeElement(&_bbcb.Choice.NumFmt, &_cbfa); _gfbe != nil {
					return _gfbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _dacag := d.DecodeElement(&_bbcb.Choice.SpPr, &_cbfa); _dacag != nil {
					return _dacag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _bgda := d.DecodeElement(&_bbcb.Choice.TxPr, &_cbfa); _bgda != nil {
					return _bgda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _fgbg := d.DecodeElement(&_bbcb.Choice.DLblPos, &_cbfa); _fgbg != nil {
					return _fgbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _efff := d.DecodeElement(&_bbcb.Choice.ShowLegendKey, &_cbfa); _efff != nil {
					return _efff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _dgec := d.DecodeElement(&_bbcb.Choice.ShowVal, &_cbfa); _dgec != nil {
					return _dgec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _ggfc := d.DecodeElement(&_bbcb.Choice.ShowCatName, &_cbfa); _ggfc != nil {
					return _ggfc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _cegb := d.DecodeElement(&_bbcb.Choice.ShowSerName, &_cbfa); _cegb != nil {
					return _cegb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _aded := d.DecodeElement(&_bbcb.Choice.ShowPercent, &_cbfa); _aded != nil {
					return _aded
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _abbe := d.DecodeElement(&_bbcb.Choice.ShowBubbleSize, &_cbfa); _abbe != nil {
					return _abbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _fggd := d.DecodeElement(&_bbcb.Choice.Separator, &_cbfa); _fggd != nil {
					return _fggd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _afg := d.DecodeElement(&_bbcb.Choice.ShowLeaderLines, &_cbfa); _afg != nil {
					return _afg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _bbcb.Choice == nil {
					_bbcb.Choice = NewCT_DLblsChoice()
				}
				if _ccge := d.DecodeElement(&_bbcb.Choice.LeaderLines, &_cbfa); _ccge != nil {
					return _ccge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbcb.ExtLst = NewCT_ExtensionList()
				if _fdgd := d.DecodeElement(_bbcb.ExtLst, &_cbfa); _fdgd != nil {
					return _fdgd
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _cbfa.Name)
				if _geg := d.Skip(); _geg != nil {
					return _geg
				}
			}
		case _c.EndElement:
			break _aefb
		case _c.CharData:
		}
	}
	return nil
}
func ParseUnionST_HoleSize(s string) (ST_HoleSize, error) {
	if ST_HoleSizePercentPatternRe.MatchString(s) {
		return ST_HoleSize{ST_HoleSizePercent: &s}, nil
	}
	_ecefae, _cbfae := _e.ParseUint(s, 10, 8)
	if _cbfae != nil {
		return ST_HoleSize{}, _cbfae
	}
	_fgfbf := uint8(_ecefae)
	return ST_HoleSize{ST_HoleSizeUByte: &_fgfbf}, nil
}

const (
	ST_BarDirUnset ST_BarDir = 0
	ST_BarDirBar   ST_BarDir = 1
	ST_BarDirCol   ST_BarDir = 2
)

// ValidateWithPath validates the CT_ChartSpace and its children, prefixing error messages with path
func (_acad *CT_ChartSpace) ValidateWithPath(path string) error {
	if _acad.Date1904 != nil {
		if _dabg := _acad.Date1904.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0031\u0039\u00304"); _dabg != nil {
			return _dabg
		}
	}
	if _acad.Lang != nil {
		if _bcfc := _acad.Lang.ValidateWithPath(path + "\u002f\u004c\u0061n\u0067"); _bcfc != nil {
			return _bcfc
		}
	}
	if _acad.RoundedCorners != nil {
		if _ffdgc := _acad.RoundedCorners.ValidateWithPath(path + "\u002fR\u006fu\u006e\u0064\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"); _ffdgc != nil {
			return _ffdgc
		}
	}
	if _acad.Style != nil {
		if _ecd := _acad.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _ecd != nil {
			return _ecd
		}
	}
	if _acad.ClrMapOvr != nil {
		if _gdef := _acad.ClrMapOvr.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"); _gdef != nil {
			return _gdef
		}
	}
	if _acad.PivotSource != nil {
		if _fedd := _acad.PivotSource.ValidateWithPath(path + "\u002f\u0050\u0069v\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"); _fedd != nil {
			return _fedd
		}
	}
	if _acad.Protection != nil {
		if _egaf := _acad.Protection.ValidateWithPath(path + "/\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"); _egaf != nil {
			return _egaf
		}
	}
	if _eeff := _acad.Chart.ValidateWithPath(path + "\u002f\u0043\u0068\u0061\u0072\u0074"); _eeff != nil {
		return _eeff
	}
	if _acad.SpPr != nil {
		if _aabb := _acad.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aabb != nil {
			return _aabb
		}
	}
	if _acad.TxPr != nil {
		if _defc := _acad.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _defc != nil {
			return _defc
		}
	}
	if _acad.ExternalData != nil {
		if _fefeg := _acad.ExternalData.ValidateWithPath(path + "\u002f\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"); _fefeg != nil {
			return _fefeg
		}
	}
	if _acad.PrintSettings != nil {
		if _eddf := _acad.PrintSettings.ValidateWithPath(path + "\u002f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074t\u0069\u006e\u0067\u0073"); _eddf != nil {
			return _eddf
		}
	}
	if _acad.UserShapes != nil {
		if _egf := _acad.UserShapes.ValidateWithPath(path + "/\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"); _egf != nil {
			return _egf
		}
	}
	if _acad.ExtLst != nil {
		if _gfca := _acad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfca != nil {
			return _gfca
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DateAx and its children, prefixing error messages with path
func (_dabgc *CT_DateAx) ValidateWithPath(path string) error {
	if _afdf := _dabgc.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _afdf != nil {
		return _afdf
	}
	if _bgea := _dabgc.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _bgea != nil {
		return _bgea
	}
	if _dabgc.Delete != nil {
		if _egcg := _dabgc.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _egcg != nil {
			return _egcg
		}
	}
	if _fgea := _dabgc.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _fgea != nil {
		return _fgea
	}
	if _dabgc.MajorGridlines != nil {
		if _gcbf := _dabgc.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _gcbf != nil {
			return _gcbf
		}
	}
	if _dabgc.MinorGridlines != nil {
		if _ccfe := _dabgc.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _ccfe != nil {
			return _ccfe
		}
	}
	if _dabgc.Title != nil {
		if _egbba := _dabgc.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _egbba != nil {
			return _egbba
		}
	}
	if _dabgc.NumFmt != nil {
		if _egdba := _dabgc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _egdba != nil {
			return _egdba
		}
	}
	if _dabgc.MajorTickMark != nil {
		if _ddbd := _dabgc.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ddbd != nil {
			return _ddbd
		}
	}
	if _dabgc.MinorTickMark != nil {
		if _gccgg := _dabgc.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gccgg != nil {
			return _gccgg
		}
	}
	if _dabgc.TickLblPos != nil {
		if _fbfdf := _dabgc.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _fbfdf != nil {
			return _fbfdf
		}
	}
	if _dabgc.SpPr != nil {
		if _ffabd := _dabgc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ffabd != nil {
			return _ffabd
		}
	}
	if _dabgc.TxPr != nil {
		if _gfcg := _dabgc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gfcg != nil {
			return _gfcg
		}
	}
	if _dcabg := _dabgc.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _dcabg != nil {
		return _dcabg
	}
	if _dabgc.Choice != nil {
		if _fbcf := _dabgc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _fbcf != nil {
			return _fbcf
		}
	}
	if _dabgc.Auto != nil {
		if _bbede := _dabgc.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _bbede != nil {
			return _bbede
		}
	}
	if _dabgc.LblOffset != nil {
		if _gbefg := _dabgc.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _gbefg != nil {
			return _gbefg
		}
	}
	if _dabgc.BaseTimeUnit != nil {
		if _bdbef := _dabgc.BaseTimeUnit.ValidateWithPath(path + "\u002f\u0042\u0061\u0073\u0065\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"); _bdbef != nil {
			return _bdbef
		}
	}
	if _dabgc.MajorUnit != nil {
		if _dceb := _dabgc.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _dceb != nil {
			return _dceb
		}
	}
	if _dabgc.MajorTimeUnit != nil {
		if _bebc := _dabgc.MajorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _bebc != nil {
			return _bebc
		}
	}
	if _dabgc.MinorUnit != nil {
		if _ddfc := _dabgc.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _ddfc != nil {
			return _ddfc
		}
	}
	if _dabgc.MinorTimeUnit != nil {
		if _ecee := _dabgc.MinorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _ecee != nil {
			return _ecee
		}
	}
	if _dabgc.ExtLst != nil {
		if _cebbe := _dabgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cebbe != nil {
			return _cebbe
		}
	}
	return nil
}

const (
	ST_BuiltInUnitUnset            ST_BuiltInUnit = 0
	ST_BuiltInUnitHundreds         ST_BuiltInUnit = 1
	ST_BuiltInUnitThousands        ST_BuiltInUnit = 2
	ST_BuiltInUnitTenThousands     ST_BuiltInUnit = 3
	ST_BuiltInUnitHundredThousands ST_BuiltInUnit = 4
	ST_BuiltInUnitMillions         ST_BuiltInUnit = 5
	ST_BuiltInUnitTenMillions      ST_BuiltInUnit = 6
	ST_BuiltInUnitHundredMillions  ST_BuiltInUnit = 7
	ST_BuiltInUnitBillions         ST_BuiltInUnit = 8
	ST_BuiltInUnitTrillions        ST_BuiltInUnit = 9
)

// Validate validates the UserShapes and its children
func (_cdgee *UserShapes) Validate() error {
	return _cdgee.ValidateWithPath("\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073")
}
func NewCT_RotY() *CT_RotY { _ebfaf := &CT_RotY{}; return _ebfaf }

const (
	ST_GroupingUnset          ST_Grouping = 0
	ST_GroupingPercentStacked ST_Grouping = 1
	ST_GroupingStandard       ST_Grouping = 2
	ST_GroupingStacked        ST_Grouping = 3
)

// Validate validates the CT_PieSer and its children
func (_bfeda *CT_PieSer) Validate() error {
	return _bfeda.ValidateWithPath("\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r")
}
func NewCT_PictureStackUnit() *CT_PictureStackUnit {
	_bdaa := &CT_PictureStackUnit{}
	_bdaa.ValAttr = 0 + 1
	return _bdaa
}
func (_acadg *ST_LegendPos) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_acadg = 0
	case "\u0062":
		*_acadg = 1
	case "\u0074\u0072":
		*_acadg = 2
	case "\u006c":
		*_acadg = 3
	case "\u0072":
		*_acadg = 4
	case "\u0074":
		*_acadg = 5
	}
	return nil
}
func NewCT_PivotFmts() *CT_PivotFmts { _gdbag := &CT_PivotFmts{}; return _gdbag }
func (_bgdaa *CT_PageMargins) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dfdbg := range start.Attr {
		if _dfdbg.Name.Local == "\u006c" {
			_fgffc, _eacf := _e.ParseFloat(_dfdbg.Value, 64)
			if _eacf != nil {
				return _eacf
			}
			_bgdaa.LAttr = _fgffc
			continue
		}
		if _dfdbg.Name.Local == "\u0072" {
			_adca, _bcbb := _e.ParseFloat(_dfdbg.Value, 64)
			if _bcbb != nil {
				return _bcbb
			}
			_bgdaa.RAttr = _adca
			continue
		}
		if _dfdbg.Name.Local == "\u0074" {
			_eaabb, _edebg := _e.ParseFloat(_dfdbg.Value, 64)
			if _edebg != nil {
				return _edebg
			}
			_bgdaa.TAttr = _eaabb
			continue
		}
		if _dfdbg.Name.Local == "\u0062" {
			_aaadb, _gbad := _e.ParseFloat(_dfdbg.Value, 64)
			if _gbad != nil {
				return _gbad
			}
			_bgdaa.BAttr = _aaadb
			continue
		}
		if _dfdbg.Name.Local == "\u0068\u0065\u0061\u0064\u0065\u0072" {
			_bdbeg, _efaac := _e.ParseFloat(_dfdbg.Value, 64)
			if _efaac != nil {
				return _efaac
			}
			_bgdaa.HeaderAttr = _bdbeg
			continue
		}
		if _dfdbg.Name.Local == "\u0066\u006f\u006f\u0074\u0065\u0072" {
			_bdcg, _ecaf := _e.ParseFloat(_dfdbg.Value, 64)
			if _ecaf != nil {
				return _ecaf
			}
			_bgdaa.FooterAttr = _bdcg
			continue
		}
	}
	for {
		_caaf, _faab := d.Token()
		if _faab != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073:\u0020\u0025\u0073", _faab)
		}
		if _cafb, _babe := _caaf.(_c.EndElement); _babe && _cafb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cdde *CT_Pie3DChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_fegd:
	for {
		_cdfab, _dfddf := d.Token()
		if _dfddf != nil {
			return _dfddf
		}
		switch _ffdf := _cdfab.(type) {
		case _c.StartElement:
			switch _ffdf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cdde.VaryColors = NewCT_Boolean()
				if _fafdg := d.DecodeElement(_cdde.VaryColors, &_ffdf); _fafdg != nil {
					return _fafdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dgdef := NewCT_PieSer()
				if _fcfdf := d.DecodeElement(_dgdef, &_ffdf); _fcfdf != nil {
					return _fcfdf
				}
				_cdde.Ser = append(_cdde.Ser, _dgdef)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cdde.DLbls = NewCT_DLbls()
				if _eacab := d.DecodeElement(_cdde.DLbls, &_ffdf); _eacab != nil {
					return _eacab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdde.ExtLst = NewCT_ExtensionList()
				if _dcddf := d.DecodeElement(_cdde.ExtLst, &_ffdf); _dcddf != nil {
					return _dcddf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _ffdf.Name)
				if _gbdad := d.Skip(); _gbdad != nil {
					return _gbdad
				}
			}
		case _c.EndElement:
			break _fegd
		case _c.CharData:
		}
	}
	return nil
}
func (_cece ST_BuiltInUnit) Validate() error { return _cece.ValidateWithPath("") }
func (_ddebf ST_HoleSize) String() string {
	if _ddebf.ST_HoleSizePercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_ddebf.ST_HoleSizePercent)
	}
	if _ddebf.ST_HoleSizeUByte != nil {
		return _aa.Sprintf("\u0025\u0076", *_ddebf.ST_HoleSizeUByte)
	}
	return ""
}
func NewCT_BarDir() *CT_BarDir { _abgd := &CT_BarDir{}; return _abgd }

// ValidateWithPath validates the CT_PrintSettings and its children, prefixing error messages with path
func (_egag *CT_PrintSettings) ValidateWithPath(path string) error {
	if _egag.HeaderFooter != nil {
		if _beee := _egag.HeaderFooter.ValidateWithPath(path + "\u002f\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"); _beee != nil {
			return _beee
		}
	}
	if _egag.PageMargins != nil {
		if _abff := _egag.PageMargins.ValidateWithPath(path + "\u002f\u0050\u0061g\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"); _abff != nil {
			return _abff
		}
	}
	if _egag.PageSetup != nil {
		if _fccd := _egag.PageSetup.ValidateWithPath(path + "\u002f\u0050\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"); _fccd != nil {
			return _fccd
		}
	}
	if _egag.LegacyDrawingHF != nil {
		if _fdae := _egag.LegacyDrawingHF.ValidateWithPath(path + "\u002f\u004ce\u0067\u0061\u0063y\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"); _fdae != nil {
			return _fdae
		}
	}
	return nil
}

// Validate validates the EG_LineChartShared and its children
func (_fcdcb *EG_LineChartShared) Validate() error {
	return _fcdcb.ValidateWithPath("\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}
func NewCT_Lvl() *CT_Lvl { _ggfb := &CT_Lvl{}; return _ggfb }
func (_ecc *CT_AxisUnit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ecc.ValAttr = 0 + 1
	for _, _fbe := range start.Attr {
		if _fbe.Name.Local == "\u0076\u0061\u006c" {
			_bgc, _bfef := _e.ParseFloat(_fbe.Value, 64)
			if _bfef != nil {
				return _bfef
			}
			_ecc.ValAttr = _bgc
			continue
		}
	}
	for {
		_gedd, _cbg := d.Token()
		if _cbg != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _cbg)
		}
		if _aaee, _gba := _gedd.(_c.EndElement); _gba && _aaee.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_BarGrouping and its children
func (_gffc *CT_BarGrouping) Validate() error {
	return _gffc.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067")
}

// Validate validates the CT_ChartLines and its children
func (_bcfdf *CT_ChartLines) Validate() error {
	return _bcfdf.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073")
}
func (_eafff *CT_RelId) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _aa.Sprintf("\u0025\u0076", _eafff.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

var ST_GapAmountPercentPatternRe = _a.MustCompile(ST_GapAmountPercentPattern)

type CT_Line3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}
type ST_BuiltInUnit byte

// Validate validates the CT_NumData and its children
func (_degd *CT_NumData) Validate() error {
	return _degd.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061")
}
func (_gedcc ST_BarGrouping) Validate() error { return _gedcc.ValidateWithPath("") }

// ValidateWithPath validates the CT_PieSer and its children, prefixing error messages with path
func (_cadcb *CT_PieSer) ValidateWithPath(path string) error {
	if _fbcd := _cadcb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fbcd != nil {
		return _fbcd
	}
	if _gbgac := _cadcb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gbgac != nil {
		return _gbgac
	}
	if _cadcb.Tx != nil {
		if _cafbf := _cadcb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cafbf != nil {
			return _cafbf
		}
	}
	if _cadcb.SpPr != nil {
		if _fbcgg := _cadcb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fbcgg != nil {
			return _fbcgg
		}
	}
	if _cadcb.Explosion != nil {
		if _aebaf := _cadcb.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _aebaf != nil {
			return _aebaf
		}
	}
	for _bcfed, _bffdb := range _cadcb.DPt {
		if _dedf := _bffdb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _bcfed)); _dedf != nil {
			return _dedf
		}
	}
	if _cadcb.DLbls != nil {
		if _dgcae := _cadcb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dgcae != nil {
			return _dgcae
		}
	}
	if _cadcb.Cat != nil {
		if _afcec := _cadcb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _afcec != nil {
			return _afcec
		}
	}
	if _cadcb.Val != nil {
		if _eageb := _cadcb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _eageb != nil {
			return _eageb
		}
	}
	if _cadcb.ExtLst != nil {
		if _eccga := _cadcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eccga != nil {
			return _eccga
		}
	}
	return nil
}

const ST_DepthPercentWithSymbolPattern = "\u0030\u002a\u0028\u0028\u005b\u0032\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d9\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d)\u007c\u0032\u0030\u0030\u0030)\u0025"

type CT_PrintSettings struct {
	HeaderFooter    *CT_HeaderFooter
	PageMargins     *CT_PageMargins
	PageSetup       *CT_PageSetup
	LegacyDrawingHF *CT_RelId
}

func (_gagd ST_Grouping) ValidateWithPath(path string) error {
	switch _gagd {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gagd))
	}
	return nil
}
func (_aafb ST_ErrValType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_aafb.String(), start)
}
func (_edbed *CT_Line3DChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_bdef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_edbed.Grouping, _bdef)
	if _edbed.VaryColors != nil {
		_bfeef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_edbed.VaryColors, _bfeef)
	}
	if _edbed.Ser != nil {
		_fged := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _acga := range _edbed.Ser {
			e.EncodeElement(_acga, _fged)
		}
	}
	if _edbed.DLbls != nil {
		_ccfbg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_edbed.DLbls, _ccfbg)
	}
	if _edbed.DropLines != nil {
		_cecc := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_edbed.DropLines, _cecc)
	}
	if _edbed.GapDepth != nil {
		_fdaaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_edbed.GapDepth, _fdaaa)
	}
	_cgbgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bdea := range _edbed.AxId {
		e.EncodeElement(_bdea, _cgbgb)
	}
	if _edbed.ExtLst != nil {
		_ecac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edbed.ExtLst, _ecac)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Thickness and its children, prefixing error messages with path
func (_cecag *CT_Thickness) ValidateWithPath(path string) error {
	if _ggeea := _cecag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggeea != nil {
		return _ggeea
	}
	return nil
}

// ValidateWithPath validates the CT_LblOffset and its children, prefixing error messages with path
func (_fecd *CT_LblOffset) ValidateWithPath(path string) error {
	if _fecd.ValAttr != nil {
		if _fcda := _fecd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fcda != nil {
			return _fcda
		}
	}
	return nil
}

// Validate validates the CT_SurfaceChart and its children
func (_defga *CT_SurfaceChart) Validate() error {
	return _defga.ValidateWithPath("\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074")
}

const (
	ST_AxPosUnset ST_AxPos = 0
	ST_AxPosB     ST_AxPos = 1
	ST_AxPosL     ST_AxPos = 2
	ST_AxPosR     ST_AxPos = 3
	ST_AxPosT     ST_AxPos = 4
)

func NewCT_ScatterSer() *CT_ScatterSer {
	_gbdg := &CT_ScatterSer{}
	_gbdg.Idx = NewCT_UnsignedInt()
	_gbdg.Order = NewCT_UnsignedInt()
	return _gbdg
}

type CT_LineSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_d.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   *CT_ErrBars
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

func (_gafcaf ST_DLblPos) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_eacbc := _c.Attr{}
	_eacbc.Name = name
	switch _gafcaf {
	case ST_DLblPosUnset:
		_eacbc.Value = ""
	case ST_DLblPosBestFit:
		_eacbc.Value = "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case ST_DLblPosB:
		_eacbc.Value = "\u0062"
	case ST_DLblPosCtr:
		_eacbc.Value = "\u0063\u0074\u0072"
	case ST_DLblPosInBase:
		_eacbc.Value = "\u0069\u006e\u0042\u0061\u0073\u0065"
	case ST_DLblPosInEnd:
		_eacbc.Value = "\u0069\u006e\u0045n\u0064"
	case ST_DLblPosL:
		_eacbc.Value = "\u006c"
	case ST_DLblPosOutEnd:
		_eacbc.Value = "\u006f\u0075\u0074\u0045\u006e\u0064"
	case ST_DLblPosR:
		_eacbc.Value = "\u0072"
	case ST_DLblPosT:
		_eacbc.Value = "\u0074"
	}
	return _eacbc, nil
}

// Validate validates the CT_Extension and its children
func (_cebc *CT_Extension) Validate() error {
	return _cebc.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}
func (_fcde *ST_GapAmount) Validate() error { return _fcde.ValidateWithPath("") }
func NewCT_NumFmt() *CT_NumFmt              { _daacg := &CT_NumFmt{}; return _daacg }

// ValidateWithPath validates the CT_OfPieType and its children, prefixing error messages with path
func (_gegga *CT_OfPieType) ValidateWithPath(path string) error {
	if _edeb := _gegga.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _edeb != nil {
		return _edeb
	}
	return nil
}

type CT_TickLblPos struct{ ValAttr ST_TickLblPos }

func (_aadf ST_CrossBetween) ValidateWithPath(path string) error {
	switch _aadf {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aadf))
	}
	return nil
}
func (_ecdee *CT_PrintSettings) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _ecdee.HeaderFooter != nil {
		_acaaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0068\u0065\u0061\u0064\u0065\u0072\u0046o\u006f\u0074\u0065\u0072"}}
		e.EncodeElement(_ecdee.HeaderFooter, _acaaf)
	}
	if _ecdee.PageMargins != nil {
		_eadf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}}
		e.EncodeElement(_ecdee.PageMargins, _eadf)
	}
	if _ecdee.PageSetup != nil {
		_baffc := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0070\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"}}
		e.EncodeElement(_ecdee.PageSetup, _baffc)
	}
	if _ecdee.LegacyDrawingHF != nil {
		_cbaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0061\u0063\u0079\u0044\u0072\u0061\u0077i\u006e\u0067\u0048\u0046"}}
		e.EncodeElement(_ecdee.LegacyDrawingHF, _cbaf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_RelId() *CT_RelId { _aadc := &CT_RelId{}; return _aadc }
func (_dcfdb *CT_NumDataSourceChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_feeag:
	for {
		_acba, _eecg := d.Token()
		if _eecg != nil {
			return _eecg
		}
		switch _faaca := _acba.(type) {
		case _c.StartElement:
			switch _faaca.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_dcfdb.NumRef = NewCT_NumRef()
				if _gbbfg := d.DecodeElement(_dcfdb.NumRef, &_faaca); _gbbfg != nil {
					return _gbbfg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_dcfdb.NumLit = NewCT_NumData()
				if _gada := d.DecodeElement(_dcfdb.NumLit, &_faaca); _gada != nil {
					return _gada
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0075\u006d\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _faaca.Name)
				if _bgfg := d.Skip(); _bgfg != nil {
					return _bgfg
				}
			}
		case _c.EndElement:
			break _feeag
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Area3DChart and its children, prefixing error messages with path
func (_dc *CT_Area3DChart) ValidateWithPath(path string) error {
	if _dc.Grouping != nil {
		if _ae := _dc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _ae != nil {
			return _ae
		}
	}
	if _dc.VaryColors != nil {
		if _af := _dc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _af != nil {
			return _af
		}
	}
	for _bfe, _edf := range _dc.Ser {
		if _adc := _edf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bfe)); _adc != nil {
			return _adc
		}
	}
	if _dc.DLbls != nil {
		if _bdd := _dc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bdd != nil {
			return _bdd
		}
	}
	if _dc.DropLines != nil {
		if _ff := _dc.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ff != nil {
			return _ff
		}
	}
	if _dc.GapDepth != nil {
		if _ba := _dc.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _ba != nil {
			return _ba
		}
	}
	for _ged, _bb := range _dc.AxId {
		if _bfc := _bb.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ged)); _bfc != nil {
			return _bfc
		}
	}
	if _dc.ExtLst != nil {
		if _dcc := _dc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcc != nil {
			return _dcc
		}
	}
	return nil
}
func (_ecbg *ST_Overlap) ValidateWithPath(path string) error {
	_dfda := []string{}
	if _ecbg.ST_OverlapPercent != nil {
		_dfda = append(_dfda, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u0050\u0065r\u0063\u0065\u006e\u0074")
	}
	if _ecbg.ST_OverlapByte != nil {
		_dfda = append(_dfda, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061p\u0042\u0079\u0074\u0065")
	}
	if len(_dfda) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dfda)
	}
	return nil
}
func NewCT_StrRef() *CT_StrRef { _fgfb := &CT_StrRef{}; return _fgfb }

// ValidateWithPath validates the CT_ErrBarType and its children, prefixing error messages with path
func (_fgad *CT_ErrBarType) ValidateWithPath(path string) error {
	if _cfaee := _fgad.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfaee != nil {
		return _cfaee
	}
	return nil
}
func NewEG_BarChartShared() *EG_BarChartShared {
	_faddd := &EG_BarChartShared{}
	_faddd.BarDir = NewCT_BarDir()
	return _faddd
}

// ValidateWithPath validates the CT_ScatterStyle and its children, prefixing error messages with path
func (_gaee *CT_ScatterStyle) ValidateWithPath(path string) error {
	if _ceda := _gaee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ceda != nil {
		return _ceda
	}
	return nil
}
func (_acbcd ST_Orientation) ValidateWithPath(path string) error {
	switch _acbcd {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acbcd))
	}
	return nil
}

// Validate validates the CT_RotX and its children
func (_eefdf *CT_RotX) Validate() error {
	return _eefdf.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0058")
}

// ValidateWithPath validates the CT_PictureOptions and its children, prefixing error messages with path
func (_cabb *CT_PictureOptions) ValidateWithPath(path string) error {
	if _cabb.ApplyToFront != nil {
		if _eebag := _cabb.ApplyToFront.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"); _eebag != nil {
			return _eebag
		}
	}
	if _cabb.ApplyToSides != nil {
		if _fefgc := _cabb.ApplyToSides.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"); _fefgc != nil {
			return _fefgc
		}
	}
	if _cabb.ApplyToEnd != nil {
		if _bfgaa := _cabb.ApplyToEnd.ValidateWithPath(path + "/\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"); _bfgaa != nil {
			return _bfgaa
		}
	}
	if _cabb.PictureFormat != nil {
		if _bdeg := _cabb.PictureFormat.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0046o\u0072\u006d\u0061\u0074"); _bdeg != nil {
			return _bdeg
		}
	}
	if _cabb.PictureStackUnit != nil {
		if _bggg := _cabb.PictureStackUnit.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063k\u0055\u006e\u0069\u0074"); _bggg != nil {
			return _bggg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StockChart and its children, prefixing error messages with path
func (_dfcdg *CT_StockChart) ValidateWithPath(path string) error {
	for _cgda, _bdggf := range _dfcdg.Ser {
		if _cfbc := _bdggf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cgda)); _cfbc != nil {
			return _cfbc
		}
	}
	if _dfcdg.DLbls != nil {
		if _bdbd := _dfcdg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bdbd != nil {
			return _bdbd
		}
	}
	if _dfcdg.DropLines != nil {
		if _dfgb := _dfcdg.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _dfgb != nil {
			return _dfgb
		}
	}
	if _dfcdg.HiLowLines != nil {
		if _cggea := _dfcdg.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _cggea != nil {
			return _cggea
		}
	}
	if _dfcdg.UpDownBars != nil {
		if _decbd := _dfcdg.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _decbd != nil {
			return _decbd
		}
	}
	for _fbbgc, _gefdc := range _dfcdg.AxId {
		if _eabbc := _gefdc.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fbbgc)); _eabbc != nil {
			return _eabbc
		}
	}
	if _dfcdg.ExtLst != nil {
		if _ecefa := _dfcdg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecefa != nil {
			return _ecefa
		}
	}
	return nil
}
func NewCT_DispBlanksAs() *CT_DispBlanksAs { _fcfe := &CT_DispBlanksAs{}; return _fcfe }

// ValidateWithPath validates the CT_BubbleSer and its children, prefixing error messages with path
func (_gabe *CT_BubbleSer) ValidateWithPath(path string) error {
	if _agde := _gabe.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _agde != nil {
		return _agde
	}
	if _badc := _gabe.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _badc != nil {
		return _badc
	}
	if _gabe.Tx != nil {
		if _cacf := _gabe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cacf != nil {
			return _cacf
		}
	}
	if _gabe.SpPr != nil {
		if _baeg := _gabe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _baeg != nil {
			return _baeg
		}
	}
	if _gabe.InvertIfNegative != nil {
		if _dcee := _gabe.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _dcee != nil {
			return _dcee
		}
	}
	for _cce, _cbe := range _gabe.DPt {
		if _ecaa := _cbe.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _cce)); _ecaa != nil {
			return _ecaa
		}
	}
	if _gabe.DLbls != nil {
		if _fddef := _gabe.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fddef != nil {
			return _fddef
		}
	}
	for _abcfd, _ecbdg := range _gabe.Trendline {
		if _dfcf := _ecbdg.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _abcfd)); _dfcf != nil {
			return _dfcf
		}
	}
	for _defa, _bgd := range _gabe.ErrBars {
		if _cec := _bgd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _defa)); _cec != nil {
			return _cec
		}
	}
	if _gabe.XVal != nil {
		if _dgdb := _gabe.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _dgdb != nil {
			return _dgdb
		}
	}
	if _gabe.YVal != nil {
		if _gdff := _gabe.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _gdff != nil {
			return _gdff
		}
	}
	if _gabe.BubbleSize != nil {
		if _gac := _gabe.BubbleSize.ValidateWithPath(path + "/\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _gac != nil {
			return _gac
		}
	}
	if _gabe.Bubble3D != nil {
		if _fgab := _gabe.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _fgab != nil {
			return _fgab
		}
	}
	if _gabe.ExtLst != nil {
		if _acfd := _gabe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acfd != nil {
			return _acfd
		}
	}
	return nil
}

// Validate validates the EG_DLblShared and its children
func (_dgdbgd *EG_DLblShared) Validate() error {
	return _dgdbgd.ValidateWithPath("\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_bfccb *ST_Shape) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ffada, _degea := d.Token()
	if _degea != nil {
		return _degea
	}
	if _bcddb, _eedge := _ffada.(_c.EndElement); _eedge && _bcddb.Name == start.Name {
		*_bfccb = 1
		return nil
	}
	if _cgbge, _egdcbf := _ffada.(_c.CharData); !_egdcbf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffada)
	} else {
		switch string(_cgbge) {
		case "":
			*_bfccb = 0
		case "\u0063\u006f\u006e\u0065":
			*_bfccb = 1
		case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
			*_bfccb = 2
		case "\u0062\u006f\u0078":
			*_bfccb = 3
		case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
			*_bfccb = 4
		case "\u0070y\u0072\u0061\u006d\u0069\u0064":
			*_bfccb = 5
		case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
			*_bfccb = 6
		}
	}
	_ffada, _degea = d.Token()
	if _degea != nil {
		return _degea
	}
	if _fddgb, _badcd := _ffada.(_c.EndElement); _badcd && _fddgb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffada)
}
func (_dfdcg *CT_LayoutMode) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dfdcg.ValAttr != ST_LayoutModeUnset {
		_egbff, _bbeg := _dfdcg.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _bbeg != nil {
			return _bbeg
		}
		start.Attr = append(start.Attr, _egbff)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_BarChart() *CT_BarChart { _ceg := &CT_BarChart{}; _ceg.BarDir = NewCT_BarDir(); return _ceg }

type CT_TrendlineType struct{ ValAttr ST_TrendlineType }

const (
	ST_TickMarkUnset ST_TickMark = 0
	ST_TickMarkCross ST_TickMark = 1
	ST_TickMarkIn    ST_TickMark = 2
	ST_TickMarkNone  ST_TickMark = 3
	ST_TickMarkOut   ST_TickMark = 4
)

func (_debg *CT_RadarStyle) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _fbbd := range start.Attr {
		if _fbbd.Name.Local == "\u0076\u0061\u006c" {
			_debg.ValAttr.UnmarshalXMLAttr(_fbbd)
			continue
		}
	}
	for {
		_ddfb, _accbe := d.Token()
		if _accbe != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0052a\u0064a\u0072S\u0074\u0079\u006c\u0065\u003a\u0020\u0025s", _accbe)
		}
		if _defed, _bcdb := _ddfb.(_c.EndElement); _bcdb && _defed.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggee *CT_PictureFormat) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_ccag, _bcebc := _ggee.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _bcebc != nil {
		return _bcebc
	}
	start.Attr = append(start.Attr, _ccag)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_Area3DChart() *CT_Area3DChart { _f := &CT_Area3DChart{}; return _f }
func (_cbcbd *EG_SurfaceChartShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cbcbd.Wireframe != nil {
		_dbgae := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_cbcbd.Wireframe, _dbgae)
	}
	if _cbcbd.Ser != nil {
		_afcb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _adccf := range _cbcbd.Ser {
			e.EncodeElement(_adccf, _afcb)
		}
	}
	if _cbcbd.BandFmts != nil {
		_dbaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_cbcbd.BandFmts, _dbaf)
	}
	return nil
}

type ST_LayoutTarget byte

func (_bfgd *CT_RotX) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dffg := range start.Attr {
		if _dffg.Name.Local == "\u0076\u0061\u006c" {
			_dbcac, _dbbeg := _e.ParseInt(_dffg.Value, 10, 8)
			if _dbbeg != nil {
				return _dbbeg
			}
			_ddcbb := int8(_dbcac)
			_bfgd.ValAttr = &_ddcbb
			continue
		}
	}
	for {
		_beedfa, _aaacb := d.Token()
		if _aaacb != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0058\u003a\u0020\u0025\u0073", _aaacb)
		}
		if _dcgge, _cgdge := _beedfa.(_c.EndElement); _cgdge && _dcgge.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PivotFmts and its children
func (_cbae *CT_PivotFmts) Validate() error {
	return _cbae.ValidateWithPath("\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073")
}
func (_bfgab *CT_Extension) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bfgab.UriAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0075\u0072\u0069"}, Value: _aa.Sprintf("\u0025\u0076", *_bfgab.UriAttr)})
	}
	e.EncodeToken(start)
	if _bfgab.Any != nil {
		_bfgab.Any.MarshalXML(e, _c.StartElement{})
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_DLbls struct {
	DLbl   []*CT_DLbl
	Choice *CT_DLblsChoice
	ExtLst *CT_ExtensionList
}
type CT_ManualLayout struct {
	LayoutTarget *CT_LayoutTarget
	XMode        *CT_LayoutMode
	YMode        *CT_LayoutMode
	WMode        *CT_LayoutMode
	HMode        *CT_LayoutMode
	X            *CT_Double
	Y            *CT_Double
	W            *CT_Double
	H            *CT_Double
	ExtLst       *CT_ExtensionList
}

// Validate validates the CT_Order and its children
func (_edbg *CT_Order) Validate() error {
	return _edbg.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072")
}

const (
	ST_OrientationUnset  ST_Orientation = 0
	ST_OrientationMaxMin ST_Orientation = 1
	ST_OrientationMinMax ST_Orientation = 2
)

func (_deadd ST_TickLblPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_deadd.String(), start)
}

type CT_PictureFormat struct{ ValAttr ST_PictureFormat }

// ValidateWithPath validates the CT_PivotFmt and its children, prefixing error messages with path
func (_afeac *CT_PivotFmt) ValidateWithPath(path string) error {
	if _beeca := _afeac.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _beeca != nil {
		return _beeca
	}
	if _afeac.SpPr != nil {
		if _bgdbb := _afeac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bgdbb != nil {
			return _bgdbb
		}
	}
	if _afeac.TxPr != nil {
		if _faceg := _afeac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _faceg != nil {
			return _faceg
		}
	}
	if _afeac.Marker != nil {
		if _fgfda := _afeac.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _fgfda != nil {
			return _fgfda
		}
	}
	if _afeac.DLbl != nil {
		if _acdd := _afeac.DLbl.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c"); _acdd != nil {
			return _acdd
		}
	}
	if _afeac.ExtLst != nil {
		if _afbda := _afeac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afbda != nil {
			return _afbda
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumData and its children, prefixing error messages with path
func (_abbbe *CT_NumData) ValidateWithPath(path string) error {
	if _abbbe.PtCount != nil {
		if _edacda := _abbbe.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _edacda != nil {
			return _edacda
		}
	}
	for _deaga, _fegfc := range _abbbe.Pt {
		if _egdbd := _fegfc.ValidateWithPath(_aa.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _deaga)); _egdbd != nil {
			return _egdbd
		}
	}
	if _abbbe.ExtLst != nil {
		if _ccaad := _abbbe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccaad != nil {
			return _ccaad
		}
	}
	return nil
}
func (_fcceea *ST_MarkerStyle) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fdfff, _bdca := d.Token()
	if _bdca != nil {
		return _bdca
	}
	if _dbabe, _bgece := _fdfff.(_c.EndElement); _bgece && _dbabe.Name == start.Name {
		*_fcceea = 1
		return nil
	}
	if _edebd, _gfeeg := _fdfff.(_c.CharData); !_gfeeg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdfff)
	} else {
		switch string(_edebd) {
		case "":
			*_fcceea = 0
		case "\u0063\u0069\u0072\u0063\u006c\u0065":
			*_fcceea = 1
		case "\u0064\u0061\u0073\u0068":
			*_fcceea = 2
		case "\u0064i\u0061\u006d\u006f\u006e\u0064":
			*_fcceea = 3
		case "\u0064\u006f\u0074":
			*_fcceea = 4
		case "\u006e\u006f\u006e\u0065":
			*_fcceea = 5
		case "\u0070i\u0063\u0074\u0075\u0072\u0065":
			*_fcceea = 6
		case "\u0070\u006c\u0075\u0073":
			*_fcceea = 7
		case "\u0073\u0071\u0075\u0061\u0072\u0065":
			*_fcceea = 8
		case "\u0073\u0074\u0061\u0072":
			*_fcceea = 9
		case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
			*_fcceea = 10
		case "\u0078":
			*_fcceea = 11
		case "\u0061\u0075\u0074\u006f":
			*_fcceea = 12
		}
	}
	_fdfff, _bdca = d.Token()
	if _bdca != nil {
		return _bdca
	}
	if _bgcfe, _ecedc := _fdfff.(_c.EndElement); _ecedc && _bgcfe.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdfff)
}
func (_dcdc *CT_Marker) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dcdc.Symbol != nil {
		_cfbaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0079\u006d\u0062\u006f\u006c"}}
		e.EncodeElement(_dcdc.Symbol, _cfbaf)
	}
	if _dcdc.Size != nil {
		_eagf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0069\u007a\u0065"}}
		e.EncodeElement(_dcdc.Size, _eagf)
	}
	if _dcdc.SpPr != nil {
		_ddffb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcdc.SpPr, _ddffb)
	}
	if _dcdc.ExtLst != nil {
		_bcaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcdc.ExtLst, _bcaf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_DispUnits struct {
	Choice       *CT_DispUnitsChoice
	DispUnitsLbl *CT_DispUnitsLbl
	ExtLst       *CT_ExtensionList
}

func (_cbffb *CT_Line3DChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cbffb.Grouping = NewCT_Grouping()
_edacd:
	for {
		_gcee, _dcac := d.Token()
		if _dcac != nil {
			return _dcac
		}
		switch _cadg := _gcee.(type) {
		case _c.StartElement:
			switch _cadg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _efffb := d.DecodeElement(_cbffb.Grouping, &_cadg); _efffb != nil {
					return _efffb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbffb.VaryColors = NewCT_Boolean()
				if _fdcd := d.DecodeElement(_cbffb.VaryColors, &_cadg); _fdcd != nil {
					return _fdcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dfbf := NewCT_LineSer()
				if _cagg := d.DecodeElement(_dfbf, &_cadg); _cagg != nil {
					return _cagg
				}
				_cbffb.Ser = append(_cbffb.Ser, _dfbf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbffb.DLbls = NewCT_DLbls()
				if _dbfdd := d.DecodeElement(_cbffb.DLbls, &_cadg); _dbfdd != nil {
					return _dbfdd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_cbffb.DropLines = NewCT_ChartLines()
				if _gcge := d.DecodeElement(_cbffb.DropLines, &_cadg); _gcge != nil {
					return _gcge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_cbffb.GapDepth = NewCT_GapAmount()
				if _dbcea := d.DecodeElement(_cbffb.GapDepth, &_cadg); _dbcea != nil {
					return _dbcea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_egea := NewCT_UnsignedInt()
				if _bfbc := d.DecodeElement(_egea, &_cadg); _bfbc != nil {
					return _bfbc
				}
				_cbffb.AxId = append(_cbffb.AxId, _egea)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbffb.ExtLst = NewCT_ExtensionList()
				if _dagfb := d.DecodeElement(_cbffb.ExtLst, &_cadg); _dagfb != nil {
					return _dagfb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _cadg.Name)
				if _dcbb := d.Skip(); _dcbb != nil {
					return _dcbb
				}
			}
		case _c.EndElement:
			break _edacd
		case _c.CharData:
		}
	}
	return nil
}
func (_bbfda ST_LblOffset) String() string {
	if _bbfda.ST_LblOffsetPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_bbfda.ST_LblOffsetPercent)
	}
	if _bbfda.ST_LblOffsetUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_bbfda.ST_LblOffsetUShort)
	}
	return ""
}
func (_baaec *CT_LayoutMode) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _gcdcb := range start.Attr {
		if _gcdcb.Name.Local == "\u0076\u0061\u006c" {
			_baaec.ValAttr.UnmarshalXMLAttr(_gcdcb)
			continue
		}
	}
	for {
		_faffd, _ggafe := d.Token()
		if _ggafe != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004ca\u0079o\u0075t\u004d\u006f\u0064\u0065\u003a\u0020\u0025s", _ggafe)
		}
		if _adacd, _gddgf := _faffd.(_c.EndElement); _gddgf && _adacd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aeae *ST_ErrValType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_afada, _ffccd := d.Token()
	if _ffccd != nil {
		return _ffccd
	}
	if _bdfa, _agfa := _afada.(_c.EndElement); _agfa && _bdfa.Name == start.Name {
		*_aeae = 1
		return nil
	}
	if _afcf, _dbfebb := _afada.(_c.CharData); !_dbfebb {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _afada)
	} else {
		switch string(_afcf) {
		case "":
			*_aeae = 0
		case "\u0063\u0075\u0073\u0074":
			*_aeae = 1
		case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_aeae = 2
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
			*_aeae = 3
		case "\u0073\u0074\u0064\u0044\u0065\u0076":
			*_aeae = 4
		case "\u0073\u0074\u0064\u0045\u0072\u0072":
			*_aeae = 5
		}
	}
	_afada, _ffccd = d.Token()
	if _ffccd != nil {
		return _ffccd
	}
	if _cafacd, _ceebad := _afada.(_c.EndElement); _ceebad && _cafacd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _afada)
}

// ValidateWithPath validates the CT_RadarChart and its children, prefixing error messages with path
func (_gceac *CT_RadarChart) ValidateWithPath(path string) error {
	if _egaac := _gceac.RadarStyle.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"); _egaac != nil {
		return _egaac
	}
	if _gceac.VaryColors != nil {
		if _bfec := _gceac.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bfec != nil {
			return _bfec
		}
	}
	for _dccgc, _dgggb := range _gceac.Ser {
		if _baeeg := _dgggb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dccgc)); _baeeg != nil {
			return _baeeg
		}
	}
	if _gceac.DLbls != nil {
		if _gfedc := _gceac.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gfedc != nil {
			return _gfedc
		}
	}
	for _eaffe, _bcffg := range _gceac.AxId {
		if _acdbe := _bcffg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _eaffe)); _acdbe != nil {
			return _acdbe
		}
	}
	if _gceac.ExtLst != nil {
		if _dgfgb := _gceac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgfgb != nil {
			return _dgfgb
		}
	}
	return nil
}

type CT_CustSplit struct{ SecondPiePt []*CT_UnsignedInt }

func (_fcgg *CT_LblAlgn) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fcgg.ValAttr = ST_LblAlgn(1)
	for _, _cbgd := range start.Attr {
		if _cbgd.Name.Local == "\u0076\u0061\u006c" {
			_fcgg.ValAttr.UnmarshalXMLAttr(_cbgd)
			continue
		}
	}
	for {
		_geab, _bgbdag := d.Token()
		if _bgbdag != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e\u003a\u0020%\u0073", _bgbdag)
		}
		if _gdgg, _efcf := _geab.(_c.EndElement); _efcf && _gdgg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Surface3DChart() *CT_Surface3DChart { _ggcb := &CT_Surface3DChart{}; return _ggcb }

type CT_DispUnitsChoice struct {
	CustUnit    *CT_Double
	BuiltInUnit *CT_BuiltInUnit
}

func (_ecega *Group_DLbls) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cabfb:
	for {
		_ccfcb, _fgfdf := d.Token()
		if _fgfdf != nil {
			return _fgfdf
		}
		switch _cbgcg := _ccfcb.(type) {
		case _c.StartElement:
			switch _cbgcg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_ecega.NumFmt = NewCT_NumFmt()
				if _bacd := d.DecodeElement(_ecega.NumFmt, &_cbgcg); _bacd != nil {
					return _bacd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ecega.SpPr = _d.NewCT_ShapeProperties()
				if _gabea := d.DecodeElement(_ecega.SpPr, &_cbgcg); _gabea != nil {
					return _gabea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ecega.TxPr = _d.NewCT_TextBody()
				if _baeb := d.DecodeElement(_ecega.TxPr, &_cbgcg); _baeb != nil {
					return _baeb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_ecega.DLblPos = NewCT_DLblPos()
				if _gabc := d.DecodeElement(_ecega.DLblPos, &_cbgcg); _gabc != nil {
					return _gabc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_ecega.ShowLegendKey = NewCT_Boolean()
				if _bgadd := d.DecodeElement(_ecega.ShowLegendKey, &_cbgcg); _bgadd != nil {
					return _bgadd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_ecega.ShowVal = NewCT_Boolean()
				if _edaaf := d.DecodeElement(_ecega.ShowVal, &_cbgcg); _edaaf != nil {
					return _edaaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_ecega.ShowCatName = NewCT_Boolean()
				if _gdcgg := d.DecodeElement(_ecega.ShowCatName, &_cbgcg); _gdcgg != nil {
					return _gdcgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_ecega.ShowSerName = NewCT_Boolean()
				if _afcgc := d.DecodeElement(_ecega.ShowSerName, &_cbgcg); _afcgc != nil {
					return _afcgc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_ecega.ShowPercent = NewCT_Boolean()
				if _ggafd := d.DecodeElement(_ecega.ShowPercent, &_cbgcg); _ggafd != nil {
					return _ggafd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_ecega.ShowBubbleSize = NewCT_Boolean()
				if _fcbba := d.DecodeElement(_ecega.ShowBubbleSize, &_cbgcg); _fcbba != nil {
					return _fcbba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_ecega.Separator = new(string)
				if _gaec := d.DecodeElement(_ecega.Separator, &_cbgcg); _gaec != nil {
					return _gaec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_ecega.ShowLeaderLines = NewCT_Boolean()
				if _fadce := d.DecodeElement(_ecega.ShowLeaderLines, &_cbgcg); _fadce != nil {
					return _fadce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_ecega.LeaderLines = NewCT_ChartLines()
				if _adccc := d.DecodeElement(_ecega.LeaderLines, &_cbgcg); _adccc != nil {
					return _adccc
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _cbgcg.Name)
				if _gegeg := d.Skip(); _gegeg != nil {
					return _gegeg
				}
			}
		case _c.EndElement:
			break _cabfb
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Orientation() *CT_Orientation { _eaec := &CT_Orientation{}; return _eaec }
func (_gdegb *EG_AxSharedChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bgae:
	for {
		_cbddgg, _cecgga := d.Token()
		if _cecgga != nil {
			return _cecgga
		}
		switch _fcaea := _cbddgg.(type) {
		case _c.StartElement:
			switch _fcaea.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_gdegb.Crosses = NewCT_Crosses()
				if _aeefe := d.DecodeElement(_gdegb.Crosses, &_fcaea); _aeefe != nil {
					return _aeefe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_gdegb.CrossesAt = NewCT_Double()
				if _eeaaa := d.DecodeElement(_gdegb.CrossesAt, &_fcaea); _eeaaa != nil {
					return _eeaaa
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fcaea.Name)
				if _agffc := d.Skip(); _agffc != nil {
					return _agffc
				}
			}
		case _c.EndElement:
			break _bgae
		case _c.CharData:
		}
	}
	return nil
}
func (_ggfg *CT_GapAmount) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _egef := range start.Attr {
		if _egef.Name.Local == "\u0076\u0061\u006c" {
			_gfgd, _cggbf := ParseUnionST_GapAmount(_egef.Value)
			if _cggbf != nil {
				return _cggbf
			}
			_ggfg.ValAttr = &_gfgd
			continue
		}
	}
	for {
		_cgccd, _cebcf := d.Token()
		if _cebcf != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0061p\u0041\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0073", _cebcf)
		}
		if _gdeb, _abea := _cgccd.(_c.EndElement); _abea && _gdeb.Name == start.Name {
			break
		}
	}
	return nil
}

var ST_ThicknessPercentPatternRe = _a.MustCompile(ST_ThicknessPercentPattern)

// ValidateWithPath validates the CT_PlotAreaChoice and its children, prefixing error messages with path
func (_gcgdef *CT_PlotAreaChoice) ValidateWithPath(path string) error {
	if _gcgdef.AreaChart != nil {
		if _baga := _gcgdef.AreaChart.ValidateWithPath(path + "\u002f\u0041\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"); _baga != nil {
			return _baga
		}
	}
	if _gcgdef.Area3DChart != nil {
		if _eaece := _gcgdef.Area3DChart.ValidateWithPath(path + "\u002f\u0041\u0072e\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _eaece != nil {
			return _eaece
		}
	}
	if _gcgdef.LineChart != nil {
		if _fffc := _gcgdef.LineChart.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"); _fffc != nil {
			return _fffc
		}
	}
	if _gcgdef.Line3DChart != nil {
		if _afecba := _gcgdef.Line3DChart.ValidateWithPath(path + "\u002f\u004c\u0069n\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _afecba != nil {
			return _afecba
		}
	}
	if _gcgdef.StockChart != nil {
		if _dcgf := _gcgdef.StockChart.ValidateWithPath(path + "/\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"); _dcgf != nil {
			return _dcgf
		}
	}
	if _gcgdef.RadarChart != nil {
		if _dgcb := _gcgdef.RadarChart.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"); _dgcb != nil {
			return _dgcb
		}
	}
	if _gcgdef.ScatterChart != nil {
		if _bcge := _gcgdef.ScatterChart.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"); _bcge != nil {
			return _bcge
		}
	}
	if _gcgdef.PieChart != nil {
		if _bcbfc := _gcgdef.PieChart.ValidateWithPath(path + "\u002fP\u0069\u0065\u0043\u0068\u0061\u0072t"); _bcbfc != nil {
			return _bcbfc
		}
	}
	if _gcgdef.Pie3DChart != nil {
		if _ebbd := _gcgdef.Pie3DChart.ValidateWithPath(path + "/\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _ebbd != nil {
			return _ebbd
		}
	}
	if _gcgdef.DoughnutChart != nil {
		if _egfac := _gcgdef.DoughnutChart.ValidateWithPath(path + "\u002f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074C\u0068\u0061\u0072\u0074"); _egfac != nil {
			return _egfac
		}
	}
	if _gcgdef.BarChart != nil {
		if _eefdg := _gcgdef.BarChart.ValidateWithPath(path + "\u002fB\u0061\u0072\u0043\u0068\u0061\u0072t"); _eefdg != nil {
			return _eefdg
		}
	}
	if _gcgdef.Bar3DChart != nil {
		if _fcgcg := _gcgdef.Bar3DChart.ValidateWithPath(path + "/\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _fcgcg != nil {
			return _fcgcg
		}
	}
	if _gcgdef.OfPieChart != nil {
		if _eece := _gcgdef.OfPieChart.ValidateWithPath(path + "/\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"); _eece != nil {
			return _eece
		}
	}
	if _gcgdef.SurfaceChart != nil {
		if _ceba := _gcgdef.SurfaceChart.ValidateWithPath(path + "\u002f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"); _ceba != nil {
			return _ceba
		}
	}
	if _gcgdef.Surface3DChart != nil {
		if _bgde := _gcgdef.Surface3DChart.ValidateWithPath(path + "\u002fS\u0075r\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _bgde != nil {
			return _bgde
		}
	}
	if _gcgdef.BubbleChart != nil {
		if _bbfee := _gcgdef.BubbleChart.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"); _bbfee != nil {
			return _bbfee
		}
	}
	return nil
}
func NewCT_StrVal() *CT_StrVal { _ebaec := &CT_StrVal{}; return _ebaec }

type CT_StrData struct {
	PtCount *CT_UnsignedInt
	Pt      []*CT_StrVal
	ExtLst  *CT_ExtensionList
}

func (_ebeb ST_OfPieType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_ebeb.String(), start)
}
func NewCT_Crosses() *CT_Crosses { _ddge := &CT_Crosses{}; _ddge.ValAttr = ST_Crosses(1); return _ddge }

// ValidateWithPath validates the CT_StrRef and its children, prefixing error messages with path
func (_abgda *CT_StrRef) ValidateWithPath(path string) error {
	if _abgda.StrCache != nil {
		if _bfcga := _abgda.StrCache.ValidateWithPath(path + "\u002fS\u0074\u0072\u0043\u0061\u0063\u0068e"); _bfcga != nil {
			return _bfcga
		}
	}
	if _abgda.ExtLst != nil {
		if _ddegc := _abgda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddegc != nil {
			return _ddegc
		}
	}
	return nil
}

const (
	ST_LblAlgnUnset ST_LblAlgn = 0
	ST_LblAlgnCtr   ST_LblAlgn = 1
	ST_LblAlgnL     ST_LblAlgn = 2
	ST_LblAlgnR     ST_LblAlgn = 3
)

// ValidateWithPath validates the EG_SurfaceChartShared and its children, prefixing error messages with path
func (_dcefd *EG_SurfaceChartShared) ValidateWithPath(path string) error {
	if _dcefd.Wireframe != nil {
		if _ageg := _dcefd.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _ageg != nil {
			return _ageg
		}
	}
	for _ecbda, _ccebc := range _dcefd.Ser {
		if _ccbecf := _ccebc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ecbda)); _ccbecf != nil {
			return _ccbecf
		}
	}
	if _dcefd.BandFmts != nil {
		if _cdcdb := _dcefd.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _cdcdb != nil {
			return _cdcdb
		}
	}
	return nil
}
func (_aacb *CT_Period) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _aacb.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_aacb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_defaf *CT_NumVal) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _eecf := range start.Attr {
		if _eecf.Name.Local == "\u0069\u0064\u0078" {
			_abgcd, _fcfeb := _e.ParseUint(_eecf.Value, 10, 32)
			if _fcfeb != nil {
				return _fcfeb
			}
			_defaf.IdxAttr = uint32(_abgcd)
			continue
		}
		if _eecf.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_bced, _bbde := _eecf.Value, error(nil)
			if _bbde != nil {
				return _bbde
			}
			_defaf.FormatCodeAttr = &_bced
			continue
		}
	}
_bgcb:
	for {
		_bceb, _babgd := d.Token()
		if _babgd != nil {
			return _babgd
		}
		switch _bcbe := _bceb.(type) {
		case _c.StartElement:
			switch _bcbe.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _bef := d.DecodeElement(&_defaf.V, &_bcbe); _bef != nil {
					return _bef
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dV\u0061\u006c \u0025\u0076", _bcbe.Name)
				if _bdga := d.Skip(); _bdga != nil {
					return _bdga
				}
			}
		case _c.EndElement:
			break _bgcb
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_BuiltInUnit() *CT_BuiltInUnit { _daac := &CT_BuiltInUnit{}; return _daac }
func (_bfee *CT_AreaChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ggc:
	for {
		_eed, _cadc := d.Token()
		if _cadc != nil {
			return _cadc
		}
		switch _ccb := _eed.(type) {
		case _c.StartElement:
			switch _ccb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_bfee.Grouping = NewCT_Grouping()
				if _gcc := d.DecodeElement(_bfee.Grouping, &_ccb); _gcc != nil {
					return _gcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bfee.VaryColors = NewCT_Boolean()
				if _cb := d.DecodeElement(_bfee.VaryColors, &_ccb); _cb != nil {
					return _cb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ce := NewCT_AreaSer()
				if _eec := d.DecodeElement(_ce, &_ccb); _eec != nil {
					return _eec
				}
				_bfee.Ser = append(_bfee.Ser, _ce)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bfee.DLbls = NewCT_DLbls()
				if _edb := d.DecodeElement(_bfee.DLbls, &_ccb); _edb != nil {
					return _edb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_bfee.DropLines = NewCT_ChartLines()
				if _fff := d.DecodeElement(_bfee.DropLines, &_ccb); _fff != nil {
					return _fff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_eaa := NewCT_UnsignedInt()
				if _eac := d.DecodeElement(_eaa, &_ccb); _eac != nil {
					return _eac
				}
				_bfee.AxId = append(_bfee.AxId, _eaa)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfee.ExtLst = NewCT_ExtensionList()
				if _ded := d.DecodeElement(_bfee.ExtLst, &_ccb); _ded != nil {
					return _ded
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u0072\u0065a\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _ccb.Name)
				if _aaa := d.Skip(); _aaa != nil {
					return _aaa
				}
			}
		case _c.EndElement:
			break _ggc
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_DLblPos() *CT_DLblPos {
	_eccgf := &CT_DLblPos{}
	_eccgf.ValAttr = ST_DLblPos(1)
	return _eccgf
}
func (_aedd *ST_HoleSize) Validate() error { return _aedd.ValidateWithPath("") }
func (_fedb *CT_RadarChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dffeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_fedb.RadarStyle, _dffeb)
	if _fedb.VaryColors != nil {
		_fegae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fedb.VaryColors, _fegae)
	}
	if _fedb.Ser != nil {
		_effbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cdbd := range _fedb.Ser {
			e.EncodeElement(_cdbd, _effbf)
		}
	}
	if _fedb.DLbls != nil {
		_cgccf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fedb.DLbls, _cgccf)
	}
	_gace := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _gccgged := range _fedb.AxId {
		e.EncodeElement(_gccgged, _gace)
	}
	if _fedb.ExtLst != nil {
		_dagbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fedb.ExtLst, _dagbd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dcgee *CT_UpDownBars) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dcgee.GapWidth != nil {
		_gbcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_dcgee.GapWidth, _gbcd)
	}
	if _dcgee.UpBars != nil {
		_cffff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0075\u0070\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_dcgee.UpBars, _cffff)
	}
	if _dcgee.DownBars != nil {
		_cdbbb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_dcgee.DownBars, _cdbbb)
	}
	if _dcgee.ExtLst != nil {
		_dgcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcgee.ExtLst, _dgcc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ffgcb *ST_DLblPos) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_ffgcb = 0
	case "\u0062e\u0073\u0074\u0046\u0069\u0074":
		*_ffgcb = 1
	case "\u0062":
		*_ffgcb = 2
	case "\u0063\u0074\u0072":
		*_ffgcb = 3
	case "\u0069\u006e\u0042\u0061\u0073\u0065":
		*_ffgcb = 4
	case "\u0069\u006e\u0045n\u0064":
		*_ffgcb = 5
	case "\u006c":
		*_ffgcb = 6
	case "\u006f\u0075\u0074\u0045\u006e\u0064":
		*_ffgcb = 7
	case "\u0072":
		*_ffgcb = 8
	case "\u0074":
		*_ffgcb = 9
	}
	return nil
}

// Validate validates the CT_Pie3DChart and its children
func (_aaeda *CT_Pie3DChart) Validate() error {
	return _aaeda.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_RadarStyle and its children, prefixing error messages with path
func (_dbfeb *CT_RadarStyle) ValidateWithPath(path string) error {
	if _ggag := _dbfeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggag != nil {
		return _ggag
	}
	return nil
}

// Validate validates the CT_Grouping and its children
func (_abbed *CT_Grouping) Validate() error {
	return _abbed.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067")
}
func (_fbfdc ST_AxPos) Validate() error { return _fbfdc.ValidateWithPath("") }
func (_bcbgg *CT_SurfaceChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_edgbga:
	for {
		_faabf, _debd := d.Token()
		if _debd != nil {
			return _debd
		}
		switch _fgeb := _faabf.(type) {
		case _c.StartElement:
			switch _fgeb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_bcbgg.Wireframe = NewCT_Boolean()
				if _eggff := d.DecodeElement(_bcbgg.Wireframe, &_fgeb); _eggff != nil {
					return _eggff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aeed := NewCT_SurfaceSer()
				if _eeaff := d.DecodeElement(_aeed, &_fgeb); _eeaff != nil {
					return _eeaff
				}
				_bcbgg.Ser = append(_bcbgg.Ser, _aeed)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_bcbgg.BandFmts = NewCT_BandFmts()
				if _bbdfb := d.DecodeElement(_bcbgg.BandFmts, &_fgeb); _bbdfb != nil {
					return _bbdfb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fgggd := NewCT_UnsignedInt()
				if _efbfg := d.DecodeElement(_fgggd, &_fgeb); _efbfg != nil {
					return _efbfg
				}
				_bcbgg.AxId = append(_bcbgg.AxId, _fgggd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcbgg.ExtLst = NewCT_ExtensionList()
				if _afcaf := d.DecodeElement(_bcbgg.ExtLst, &_fgeb); _afcaf != nil {
					return _afcaf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fgeb.Name)
				if _fcdgc := d.Skip(); _fcdgc != nil {
					return _fcdgc
				}
			}
		case _c.EndElement:
			break _edgbga
		case _c.CharData:
		}
	}
	return nil
}

type CT_BubbleSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_d.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          []*CT_ErrBars
	XVal             *CT_AxDataSource
	YVal             *CT_NumDataSource
	BubbleSize       *CT_NumDataSource
	Bubble3D         *CT_Boolean
	ExtLst           *CT_ExtensionList
}

// Validate validates the CT_ValAx and its children
func (_afba *CT_ValAx) Validate() error {
	return _afba.ValidateWithPath("\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078")
}
func (_aaed *CT_DateAx) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_bdge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_aaed.AxId, _bdge)
	_ggfaf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_aaed.Scaling, _ggfaf)
	if _aaed.Delete != nil {
		_cebbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_aaed.Delete, _cebbf)
	}
	_bdged := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_aaed.AxPos, _bdged)
	if _aaed.MajorGridlines != nil {
		_gdbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_aaed.MajorGridlines, _gdbc)
	}
	if _aaed.MinorGridlines != nil {
		_dddc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_aaed.MinorGridlines, _dddc)
	}
	if _aaed.Title != nil {
		_eaab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_aaed.Title, _eaab)
	}
	if _aaed.NumFmt != nil {
		_agaac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_aaed.NumFmt, _agaac)
	}
	if _aaed.MajorTickMark != nil {
		_dbba := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_aaed.MajorTickMark, _dbba)
	}
	if _aaed.MinorTickMark != nil {
		_gcffb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_aaed.MinorTickMark, _gcffb)
	}
	if _aaed.TickLblPos != nil {
		_agcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_aaed.TickLblPos, _agcd)
	}
	if _aaed.SpPr != nil {
		_eabab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aaed.SpPr, _eabab)
	}
	if _aaed.TxPr != nil {
		_fcbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_aaed.TxPr, _fcbc)
	}
	_bfdd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_aaed.CrossAx, _bfdd)
	if _aaed.Choice != nil {
		_aaed.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _aaed.Auto != nil {
		_gfga := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_aaed.Auto, _gfga)
	}
	if _aaed.LblOffset != nil {
		_efacd := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_aaed.LblOffset, _efacd)
	}
	if _aaed.BaseTimeUnit != nil {
		_cafe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0073\u0065\u0054\u0069\u006de\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aaed.BaseTimeUnit, _cafe)
	}
	if _aaed.MajorUnit != nil {
		_abfab := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aaed.MajorUnit, _abfab)
	}
	if _aaed.MajorTimeUnit != nil {
		_fadfd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aaed.MajorTimeUnit, _fadfd)
	}
	if _aaed.MinorUnit != nil {
		_edgb := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aaed.MinorUnit, _edgb)
	}
	if _aaed.MinorTimeUnit != nil {
		_bafe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aaed.MinorTimeUnit, _bafe)
	}
	if _aaed.ExtLst != nil {
		_bgbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aaed.ExtLst, _bgbf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_agac *CT_RotY) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _agac.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_agac.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_BandFmt struct {
	Idx  *CT_UnsignedInt
	SpPr *_d.CT_ShapeProperties
}

// ValidateWithPath validates the CT_Period and its children, prefixing error messages with path
func (_gaed *CT_Period) ValidateWithPath(path string) error {
	if _gaed.ValAttr != nil {
		if *_gaed.ValAttr < 2 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_gaed.ValAttr)
		}
	}
	return nil
}
func (_ccdac *CT_Marker) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_beceg:
	for {
		_affeb, _dcebg := d.Token()
		if _dcebg != nil {
			return _dcebg
		}
		switch _gcbcc := _affeb.(type) {
		case _c.StartElement:
			switch _gcbcc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}:
				_ccdac.Symbol = NewCT_MarkerStyle()
				if _bggdc := d.DecodeElement(_ccdac.Symbol, &_gcbcc); _bggdc != nil {
					return _bggdc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}:
				_ccdac.Size = NewCT_MarkerSize()
				if _egaa := d.DecodeElement(_ccdac.Size, &_gcbcc); _egaa != nil {
					return _egaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ccdac.SpPr = _d.NewCT_ShapeProperties()
				if _dbea := d.DecodeElement(_ccdac.SpPr, &_gcbcc); _dbea != nil {
					return _dbea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccdac.ExtLst = NewCT_ExtensionList()
				if _gcgde := d.DecodeElement(_ccdac.ExtLst, &_gcbcc); _gcgde != nil {
					return _gcgde
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _gcbcc.Name)
				if _cfee := d.Skip(); _cfee != nil {
					return _cfee
				}
			}
		case _c.EndElement:
			break _beceg
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RelId and its children, prefixing error messages with path
func (_caeea *CT_RelId) ValidateWithPath(path string) error { return nil }
func (_cdffe *CT_Grouping) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cdffe.ValAttr != ST_GroupingUnset {
		_edbc, _bcba := _cdffe.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _bcba != nil {
			return _bcba
		}
		start.Attr = append(start.Attr, _edbc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gdgae ST_SplitType) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_eggffb := _c.Attr{}
	_eggffb.Name = name
	switch _gdgae {
	case ST_SplitTypeUnset:
		_eggffb.Value = ""
	case ST_SplitTypeAuto:
		_eggffb.Value = "\u0061\u0075\u0074\u006f"
	case ST_SplitTypeCust:
		_eggffb.Value = "\u0063\u0075\u0073\u0074"
	case ST_SplitTypePercent:
		_eggffb.Value = "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case ST_SplitTypePos:
		_eggffb.Value = "\u0070\u006f\u0073"
	case ST_SplitTypeVal:
		_eggffb.Value = "\u0076\u0061\u006c"
	}
	return _eggffb, nil
}
func (_efadc *CT_TrendlineType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _adafc := range start.Attr {
		if _adafc.Name.Local == "\u0076\u0061\u006c" {
			_efadc.ValAttr.UnmarshalXMLAttr(_adafc)
			continue
		}
	}
	for {
		_eabac, _dbede := d.Token()
		if _dbede != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0072\u0065\u006ed\u006ci\u006e\u0065\u0054\u0079\u0070\u0065\u003a \u0025\u0073", _dbede)
		}
		if _dcbd, _ebffac := _eabac.(_c.EndElement); _ebffac && _dcbd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_NumVal struct {
	IdxAttr        uint32
	FormatCodeAttr *string
	V              string
}

func (_gaca *CT_CatAx) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gaca.AxId = NewCT_UnsignedInt()
	_gaca.Scaling = NewCT_Scaling()
	_gaca.AxPos = NewCT_AxPos()
	_gaca.CrossAx = NewCT_UnsignedInt()
_dggc:
	for {
		_gaa, _cdf := d.Token()
		if _cdf != nil {
			return _cdf
		}
		switch _ebc := _gaa.(type) {
		case _c.StartElement:
			switch _ebc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _feff := d.DecodeElement(_gaca.AxId, &_ebc); _feff != nil {
					return _feff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _bdab := d.DecodeElement(_gaca.Scaling, &_ebc); _bdab != nil {
					return _bdab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_gaca.Delete = NewCT_Boolean()
				if _ceec := d.DecodeElement(_gaca.Delete, &_ebc); _ceec != nil {
					return _ceec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _facf := d.DecodeElement(_gaca.AxPos, &_ebc); _facf != nil {
					return _facf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_gaca.MajorGridlines = NewCT_ChartLines()
				if _aaff := d.DecodeElement(_gaca.MajorGridlines, &_ebc); _aaff != nil {
					return _aaff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_gaca.MinorGridlines = NewCT_ChartLines()
				if _abce := d.DecodeElement(_gaca.MinorGridlines, &_ebc); _abce != nil {
					return _abce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_gaca.Title = NewCT_Title()
				if _eegb := d.DecodeElement(_gaca.Title, &_ebc); _eegb != nil {
					return _eegb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_gaca.NumFmt = NewCT_NumFmt()
				if _agc := d.DecodeElement(_gaca.NumFmt, &_ebc); _agc != nil {
					return _agc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_gaca.MajorTickMark = NewCT_TickMark()
				if _ffec := d.DecodeElement(_gaca.MajorTickMark, &_ebc); _ffec != nil {
					return _ffec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_gaca.MinorTickMark = NewCT_TickMark()
				if _cbd := d.DecodeElement(_gaca.MinorTickMark, &_ebc); _cbd != nil {
					return _cbd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_gaca.TickLblPos = NewCT_TickLblPos()
				if _abfdf := d.DecodeElement(_gaca.TickLblPos, &_ebc); _abfdf != nil {
					return _abfdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gaca.SpPr = _d.NewCT_ShapeProperties()
				if _bfed := d.DecodeElement(_gaca.SpPr, &_ebc); _bfed != nil {
					return _bfed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gaca.TxPr = _d.NewCT_TextBody()
				if _adgf := d.DecodeElement(_gaca.TxPr, &_ebc); _adgf != nil {
					return _adgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _addc := d.DecodeElement(_gaca.CrossAx, &_ebc); _addc != nil {
					return _addc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_gaca.Choice = NewEG_AxSharedChoice()
				if _gdae := d.DecodeElement(&_gaca.Choice.Crosses, &_ebc); _gdae != nil {
					return _gdae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_gaca.Choice = NewEG_AxSharedChoice()
				if _geb := d.DecodeElement(&_gaca.Choice.CrossesAt, &_ebc); _geb != nil {
					return _geb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_gaca.Auto = NewCT_Boolean()
				if _gea := d.DecodeElement(_gaca.Auto, &_ebc); _gea != nil {
					return _gea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}:
				_gaca.LblAlgn = NewCT_LblAlgn()
				if _dbda := d.DecodeElement(_gaca.LblAlgn, &_ebc); _dbda != nil {
					return _dbda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_gaca.LblOffset = NewCT_LblOffset()
				if _beaf := d.DecodeElement(_gaca.LblOffset, &_ebc); _beaf != nil {
					return _beaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_gaca.TickLblSkip = NewCT_Skip()
				if _dfgc := d.DecodeElement(_gaca.TickLblSkip, &_ebc); _dfgc != nil {
					return _dfgc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_gaca.TickMarkSkip = NewCT_Skip()
				if _cdbb := d.DecodeElement(_gaca.TickMarkSkip, &_ebc); _cdbb != nil {
					return _cdbb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}:
				_gaca.NoMultiLvlLbl = NewCT_Boolean()
				if _cdg := d.DecodeElement(_gaca.NoMultiLvlLbl, &_ebc); _cdg != nil {
					return _cdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gaca.ExtLst = NewCT_ExtensionList()
				if _gabf := d.DecodeElement(_gaca.ExtLst, &_ebc); _gabf != nil {
					return _gabf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078\u0020\u0025\u0076", _ebc.Name)
				if _fag := d.Skip(); _fag != nil {
					return _fag
				}
			}
		case _c.EndElement:
			break _dggc
		case _c.CharData:
		}
	}
	return nil
}
func (_daecbe ST_SizeRepresents) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_cbcea := _c.Attr{}
	_cbcea.Name = name
	switch _daecbe {
	case ST_SizeRepresentsUnset:
		_cbcea.Value = ""
	case ST_SizeRepresentsArea:
		_cbcea.Value = "\u0061\u0072\u0065\u0061"
	case ST_SizeRepresentsW:
		_cbcea.Value = "\u0077"
	}
	return _cbcea, nil
}
func (_fcbga *CT_MarkerSize) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _cbbab := range start.Attr {
		if _cbbab.Name.Local == "\u0076\u0061\u006c" {
			_egffd, _eceg := _e.ParseUint(_cbbab.Value, 10, 8)
			if _eceg != nil {
				return _eceg
			}
			_ddcdg := uint8(_egffd)
			_fcbga.ValAttr = &_ddcdg
			continue
		}
	}
	for {
		_fddc, _bggda := d.Token()
		if _bggda != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004da\u0072k\u0065r\u0053\u0069\u007a\u0065\u003a\u0020\u0025s", _bggda)
		}
		if _fbeb, _gdbeg := _fddc.(_c.EndElement); _gdbeg && _fbeb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_LogBase struct{ ValAttr float64 }

func (_ggcf *CT_BarChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ggcf.BarDir = NewCT_BarDir()
_dgg:
	for {
		_dffa, _cafa := d.Token()
		if _cafa != nil {
			return _cafa
		}
		switch _cbgc := _dffa.(type) {
		case _c.StartElement:
			switch _cbgc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _cdab := d.DecodeElement(_ggcf.BarDir, &_cbgc); _cdab != nil {
					return _cdab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ggcf.Grouping = NewCT_BarGrouping()
				if _ebe := d.DecodeElement(_ggcf.Grouping, &_cbgc); _ebe != nil {
					return _ebe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ggcf.VaryColors = NewCT_Boolean()
				if _egc := d.DecodeElement(_ggcf.VaryColors, &_cbgc); _egc != nil {
					return _egc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aed := NewCT_BarSer()
				if _efec := d.DecodeElement(_aed, &_cbgc); _efec != nil {
					return _efec
				}
				_ggcf.Ser = append(_ggcf.Ser, _aed)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ggcf.DLbls = NewCT_DLbls()
				if _dce := d.DecodeElement(_ggcf.DLbls, &_cbgc); _dce != nil {
					return _dce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_ggcf.GapWidth = NewCT_GapAmount()
				if _gcdf := d.DecodeElement(_ggcf.GapWidth, &_cbgc); _gcdf != nil {
					return _gcdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}:
				_ggcf.Overlap = NewCT_Overlap()
				if _bddf := d.DecodeElement(_ggcf.Overlap, &_cbgc); _bddf != nil {
					return _bddf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_fdce := NewCT_ChartLines()
				if _gfbf := d.DecodeElement(_fdce, &_cbgc); _gfbf != nil {
					return _gfbf
				}
				_ggcf.SerLines = append(_ggcf.SerLines, _fdce)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bfbf := NewCT_UnsignedInt()
				if _dge := d.DecodeElement(_bfbf, &_cbgc); _dge != nil {
					return _dge
				}
				_ggcf.AxId = append(_ggcf.AxId, _bfbf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggcf.ExtLst = NewCT_ExtensionList()
				if _cfb := d.DecodeElement(_ggcf.ExtLst, &_cbgc); _cfb != nil {
					return _cfb
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _cbgc.Name)
				if _ebd := d.Skip(); _ebd != nil {
					return _ebd
				}
			}
		case _c.EndElement:
			break _dgg
		case _c.CharData:
		}
	}
	return nil
}

type CT_NumRef struct {
	F        string
	NumCache *CT_NumData
	ExtLst   *CT_ExtensionList
}
type CT_Boolean struct{ ValAttr *bool }

func (_cggge *EG_SurfaceChartShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bfbad:
	for {
		_bfaec, _cgee := d.Token()
		if _cgee != nil {
			return _cgee
		}
		switch _feedfc := _bfaec.(type) {
		case _c.StartElement:
			switch _feedfc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_cggge.Wireframe = NewCT_Boolean()
				if _caaec := d.DecodeElement(_cggge.Wireframe, &_feedfc); _caaec != nil {
					return _caaec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cffcb := NewCT_SurfaceSer()
				if _bdbdg := d.DecodeElement(_cffcb, &_feedfc); _bdbdg != nil {
					return _bdbdg
				}
				_cggge.Ser = append(_cggge.Ser, _cffcb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_cggge.BandFmts = NewCT_BandFmts()
				if _egfag := d.DecodeElement(_cggge.BandFmts, &_feedfc); _egfag != nil {
					return _egfag
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e E\u0047\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _feedfc.Name)
				if _effgd := d.Skip(); _effgd != nil {
					return _effgd
				}
			}
		case _c.EndElement:
			break _bfbad
		case _c.CharData:
		}
	}
	return nil
}

type CT_MarkerStyle struct{ ValAttr ST_MarkerStyle }

// Validate validates the CT_Boolean and its children
func (_ada *CT_Boolean) Validate() error {
	return _ada.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e")
}

type CT_ScatterSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_d.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   []*CT_ErrBars
	XVal      *CT_AxDataSource
	YVal      *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

// ValidateWithPath validates the CT_TickMark and its children, prefixing error messages with path
func (_ccfbf *CT_TickMark) ValidateWithPath(path string) error {
	if _ebfba := _ccfbf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ebfba != nil {
		return _ebfba
	}
	return nil
}
func (_gafdd *CT_MultiLvlStrRef) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dade := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066"}}
	_cf.AddPreserveSpaceAttr(&_dade, _gafdd.F)
	e.EncodeElement(_gafdd.F, _dade)
	if _gafdd.MultiLvlStrCache != nil {
		_begg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006du\u006c\u0074\u0069\u004c\u0076l\u0053\u0074r\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_gafdd.MultiLvlStrCache, _begg)
	}
	if _gafdd.ExtLst != nil {
		_effc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gafdd.ExtLst, _effc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ceddf ST_DispBlanksAs) Validate() error { return _ceddf.ValidateWithPath("") }
func (_cccef *CT_PrintSettings) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_adcf:
	for {
		_faeg, _fbbfg := d.Token()
		if _fbbfg != nil {
			return _fbbfg
		}
		switch _gacdg := _faeg.(type) {
		case _c.StartElement:
			switch _gacdg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_cccef.HeaderFooter = NewCT_HeaderFooter()
				if _dgfff := d.DecodeElement(_cccef.HeaderFooter, &_gacdg); _dgfff != nil {
					return _dgfff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}:
				_cccef.PageMargins = NewCT_PageMargins()
				if _bbeeb := d.DecodeElement(_cccef.PageMargins, &_gacdg); _bbeeb != nil {
					return _bbeeb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}:
				_cccef.PageSetup = NewCT_PageSetup()
				if _gfbd := d.DecodeElement(_cccef.PageSetup, &_gacdg); _gfbd != nil {
					return _gfbd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}:
				_cccef.LegacyDrawingHF = NewCT_RelId()
				if _fddf := d.DecodeElement(_cccef.LegacyDrawingHF, &_gacdg); _fddf != nil {
					return _fddf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u0020\u0025v", _gacdg.Name)
				if _dacf := d.Skip(); _dacf != nil {
					return _dacf
				}
			}
		case _c.EndElement:
			break _adcf
		case _c.CharData:
		}
	}
	return nil
}

type CT_DispBlanksAs struct{ ValAttr ST_DispBlanksAs }

func (_abga *CT_BubbleChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_gdbd:
	for {
		_ade, _aeaf := d.Token()
		if _aeaf != nil {
			return _aeaf
		}
		switch _gddd := _ade.(type) {
		case _c.StartElement:
			switch _gddd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_abga.VaryColors = NewCT_Boolean()
				if _eaca := d.DecodeElement(_abga.VaryColors, &_gddd); _eaca != nil {
					return _eaca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cadb := NewCT_BubbleSer()
				if _edeg := d.DecodeElement(_cadb, &_gddd); _edeg != nil {
					return _edeg
				}
				_abga.Ser = append(_abga.Ser, _cadb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_abga.DLbls = NewCT_DLbls()
				if _fcea := d.DecodeElement(_abga.DLbls, &_gddd); _fcea != nil {
					return _fcea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_abga.Bubble3D = NewCT_Boolean()
				if _faea := d.DecodeElement(_abga.Bubble3D, &_gddd); _faea != nil {
					return _faea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}:
				_abga.BubbleScale = NewCT_BubbleScale()
				if _ebab := d.DecodeElement(_abga.BubbleScale, &_gddd); _ebab != nil {
					return _ebab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}:
				_abga.ShowNegBubbles = NewCT_Boolean()
				if _cgga := d.DecodeElement(_abga.ShowNegBubbles, &_gddd); _cgga != nil {
					return _cgga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}:
				_abga.SizeRepresents = NewCT_SizeRepresents()
				if _cgf := d.DecodeElement(_abga.SizeRepresents, &_gddd); _cgf != nil {
					return _cgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_aecg := NewCT_UnsignedInt()
				if _fggb := d.DecodeElement(_aecg, &_gddd); _fggb != nil {
					return _fggb
				}
				_abga.AxId = append(_abga.AxId, _aecg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abga.ExtLst = NewCT_ExtensionList()
				if _gafd := d.DecodeElement(_abga.ExtLst, &_gddd); _gafd != nil {
					return _gafd
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065\u0043h\u0061r\u0074\u0020\u0025\u0076", _gddd.Name)
				if _cdec := d.Skip(); _cdec != nil {
					return _cdec
				}
			}
		case _c.EndElement:
			break _gdbd
		case _c.CharData:
		}
	}
	return nil
}

type ST_MarkerStyle byte

func NewCT_StrData() *CT_StrData { _dabf := &CT_StrData{}; return _dabf }

type CT_TimeUnit struct{ ValAttr ST_TimeUnit }

// Validate validates the CT_ManualLayout and its children
func (_dcae *CT_ManualLayout) Validate() error {
	return _dcae.ValidateWithPath("\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074")
}
func (_degfd ST_SplitType) Validate() error { return _degfd.ValidateWithPath("") }
func (_efacg ST_DispBlanksAs) String() string {
	switch _efacg {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0067\u0061\u0070"
	case 3:
		return "\u007a\u0065\u0072\u006f"
	}
	return ""
}
func NewCT_Shape() *CT_Shape { _fafgfd := &CT_Shape{}; return _fafgfd }

// ValidateWithPath validates the CT_PictureFormat and its children, prefixing error messages with path
func (_ecgb *CT_PictureFormat) ValidateWithPath(path string) error {
	if _ecgb.ValAttr == ST_PictureFormatUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cfgf := _ecgb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfgf != nil {
		return _cfgf
	}
	return nil
}
func (_dbfcc *CT_MultiLvlStrData) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_gdce:
	for {
		_cffg, _ebgc := d.Token()
		if _ebgc != nil {
			return _ebgc
		}
		switch _ddcff := _cffg.(type) {
		case _c.StartElement:
			switch _ddcff.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_dbfcc.PtCount = NewCT_UnsignedInt()
				if _gaabd := d.DecodeElement(_dbfcc.PtCount, &_ddcff); _gaabd != nil {
					return _gaabd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}:
				_bcgb := NewCT_Lvl()
				if _efcd := d.DecodeElement(_bcgb, &_ddcff); _efcd != nil {
					return _efcd
				}
				_dbfcc.Lvl = append(_dbfcc.Lvl, _bcgb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbfcc.ExtLst = NewCT_ExtensionList()
				if _aegg := d.DecodeElement(_dbfcc.ExtLst, &_ddcff); _aegg != nil {
					return _aegg
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _ddcff.Name)
				if _faead := d.Skip(); _faead != nil {
					return _faead
				}
			}
		case _c.EndElement:
			break _gdce
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_NumVal and its children
func (_abcde *CT_NumVal) Validate() error {
	return _abcde.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l")
}

// Validate validates the CT_ChartSpace and its children
func (_acacc *CT_ChartSpace) Validate() error {
	return _acacc.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

// ValidateWithPath validates the CT_BandFmts and its children, prefixing error messages with path
func (_bed *CT_BandFmts) ValidateWithPath(path string) error {
	for _aba, _ggf := range _bed.BandFmt {
		if _dfe := _ggf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0042\u0061\u006e\u0064\u0046\u006dt\u005b\u0025\u0064\u005d", path, _aba)); _dfe != nil {
			return _dfe
		}
	}
	return nil
}
func (_cfbdf ST_DepthPercent) String() string {
	if _cfbdf.ST_DepthPercentWithSymbol != nil {
		return _aa.Sprintf("\u0025\u0076", *_cfbdf.ST_DepthPercentWithSymbol)
	}
	if _cfbdf.ST_DepthPercentUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_cfbdf.ST_DepthPercentUShort)
	}
	return ""
}
func (_dcfa *CT_HPercent) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _fgbd := range start.Attr {
		if _fgbd.Name.Local == "\u0076\u0061\u006c" {
			_bbfg, _gggd := ParseUnionST_HPercent(_fgbd.Value)
			if _gggd != nil {
				return _gggd
			}
			_dcfa.ValAttr = &_bbfg
			continue
		}
	}
	for {
		_dcfd, _eafd := d.Token()
		if _eafd != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _eafd)
		}
		if _feggf, _bff := _dcfd.(_c.EndElement); _bff && _feggf.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Orientation byte

func (_acgcb *CT_ScatterChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_ecbec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072S\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_acgcb.ScatterStyle, _ecbec)
	if _acgcb.VaryColors != nil {
		_edfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_acgcb.VaryColors, _edfd)
	}
	if _acgcb.Ser != nil {
		_ggegf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ddgfd := range _acgcb.Ser {
			e.EncodeElement(_ddgfd, _ggegf)
		}
	}
	if _acgcb.DLbls != nil {
		_adfcb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_acgcb.DLbls, _adfcb)
	}
	_gdgfb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _fceda := range _acgcb.AxId {
		e.EncodeElement(_fceda, _gdgfb)
	}
	if _acgcb.ExtLst != nil {
		_gbee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acgcb.ExtLst, _gbee)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_ChartLines struct{ SpPr *_d.CT_ShapeProperties }

func (_cffad *CT_SerAx) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_cgae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_cffad.AxId, _cgae)
	_dgefd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_cffad.Scaling, _dgefd)
	if _cffad.Delete != nil {
		_cdffa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_cffad.Delete, _cdffa)
	}
	_bgagc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_cffad.AxPos, _bgagc)
	if _cffad.MajorGridlines != nil {
		_gbfae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cffad.MajorGridlines, _gbfae)
	}
	if _cffad.MinorGridlines != nil {
		_egbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cffad.MinorGridlines, _egbc)
	}
	if _cffad.Title != nil {
		_ecga := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_cffad.Title, _ecga)
	}
	if _cffad.NumFmt != nil {
		_dggee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_cffad.NumFmt, _dggee)
	}
	if _cffad.MajorTickMark != nil {
		_gedc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cffad.MajorTickMark, _gedc)
	}
	if _cffad.MinorTickMark != nil {
		_eeab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cffad.MinorTickMark, _eeab)
	}
	if _cffad.TickLblPos != nil {
		_dfdbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_cffad.TickLblPos, _dfdbc)
	}
	if _cffad.SpPr != nil {
		_fegda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cffad.SpPr, _fegda)
	}
	if _cffad.TxPr != nil {
		_dedcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cffad.TxPr, _dedcc)
	}
	_ggbg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_cffad.CrossAx, _ggbg)
	if _cffad.Choice != nil {
		_cffad.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _cffad.TickLblSkip != nil {
		_ggbfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_cffad.TickLblSkip, _ggbfd)
	}
	if _cffad.TickMarkSkip != nil {
		_dgfgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_cffad.TickMarkSkip, _dgfgf)
	}
	if _cffad.ExtLst != nil {
		_gdag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cffad.ExtLst, _gdag)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fbbae *CT_Title) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fbbae.Tx != nil {
		_fgbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fbbae.Tx, _fgbc)
	}
	if _fbbae.Layout != nil {
		_dgbdc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fbbae.Layout, _dgbdc)
	}
	if _fbbae.Overlay != nil {
		_gdaec := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_fbbae.Overlay, _gdaec)
	}
	if _fbbae.SpPr != nil {
		_ffbcbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbbae.SpPr, _ffbcbd)
	}
	if _fbbae.TxPr != nil {
		_gabd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fbbae.TxPr, _gabd)
	}
	if _fbbae.ExtLst != nil {
		_feddaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbbae.ExtLst, _feddaa)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_RotY struct{ ValAttr *uint16 }

// Validate validates the CT_TextLanguageID and its children
func (_efba *CT_TextLanguageID) Validate() error {
	return _efba.ValidateWithPath("\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044")
}
func (_dbbff ST_Grouping) String() string {
	switch _dbbff {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 3:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}
func (_acbaa *CT_Thickness) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bbgfa := range start.Attr {
		if _bbgfa.Name.Local == "\u0076\u0061\u006c" {
			_becd, _dccga := ParseUnionST_Thickness(_bbgfa.Value)
			if _dccga != nil {
				return _dccga
			}
			_acbaa.ValAttr = _becd
			continue
		}
	}
	for {
		_dbab, _ccfea := d.Token()
		if _ccfea != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0068i\u0063\u006b\u006e\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _ccfea)
		}
		if _aeceb, _fgfa := _dbab.(_c.EndElement); _fgfa && _aeceb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_SizeRepresents() *CT_SizeRepresents { _gbccb := &CT_SizeRepresents{}; return _gbccb }

// ValidateWithPath validates the CT_PageMargins and its children, prefixing error messages with path
func (_ddedc *CT_PageMargins) ValidateWithPath(path string) error { return nil }
func (_bgdeb ST_Shape) ValidateWithPath(path string) error {
	switch _bgdeb {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgdeb))
	}
	return nil
}
func NewCT_ScatterChart() *CT_ScatterChart {
	_gggf := &CT_ScatterChart{}
	_gggf.ScatterStyle = NewCT_ScatterStyle()
	return _gggf
}

// ValidateWithPath validates the CT_ManualLayout and its children, prefixing error messages with path
func (_cebebg *CT_ManualLayout) ValidateWithPath(path string) error {
	if _cebebg.LayoutTarget != nil {
		if _cebbd := _cebebg.LayoutTarget.ValidateWithPath(path + "\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"); _cebbd != nil {
			return _cebbd
		}
	}
	if _cebebg.XMode != nil {
		if _baega := _cebebg.XMode.ValidateWithPath(path + "\u002f\u0058\u004d\u006f\u0064\u0065"); _baega != nil {
			return _baega
		}
	}
	if _cebebg.YMode != nil {
		if _accceb := _cebebg.YMode.ValidateWithPath(path + "\u002f\u0059\u004d\u006f\u0064\u0065"); _accceb != nil {
			return _accceb
		}
	}
	if _cebebg.WMode != nil {
		if _ecfg := _cebebg.WMode.ValidateWithPath(path + "\u002f\u0057\u004d\u006f\u0064\u0065"); _ecfg != nil {
			return _ecfg
		}
	}
	if _cebebg.HMode != nil {
		if _eacg := _cebebg.HMode.ValidateWithPath(path + "\u002f\u0048\u004d\u006f\u0064\u0065"); _eacg != nil {
			return _eacg
		}
	}
	if _cebebg.X != nil {
		if _ecbcg := _cebebg.X.ValidateWithPath(path + "\u002f\u0058"); _ecbcg != nil {
			return _ecbcg
		}
	}
	if _cebebg.Y != nil {
		if _fffb := _cebebg.Y.ValidateWithPath(path + "\u002f\u0059"); _fffb != nil {
			return _fffb
		}
	}
	if _cebebg.W != nil {
		if _gcab := _cebebg.W.ValidateWithPath(path + "\u002f\u0057"); _gcab != nil {
			return _gcab
		}
	}
	if _cebebg.H != nil {
		if _gbeg := _cebebg.H.ValidateWithPath(path + "\u002f\u0048"); _gbeg != nil {
			return _gbeg
		}
	}
	if _cebebg.ExtLst != nil {
		if _gbefbc := _cebebg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbefbc != nil {
			return _gbefbc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PlotArea and its children, prefixing error messages with path
func (_bbad *CT_PlotArea) ValidateWithPath(path string) error {
	if _bbad.Layout != nil {
		if _gegf := _bbad.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gegf != nil {
			return _gegf
		}
	}
	for _fbgcd, _ddcef := range _bbad.Choice {
		if _bdeag := _ddcef.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _fbgcd)); _bdeag != nil {
			return _bdeag
		}
	}
	if _bbad.CChoice != nil {
		if _bggfgd := _bbad.CChoice.ValidateWithPath(path + "\u002f\u0043\u0043\u0068\u006f\u0069\u0063\u0065"); _bggfgd != nil {
			return _bggfgd
		}
	}
	if _bbad.DTable != nil {
		if _edge := _bbad.DTable.ValidateWithPath(path + "\u002fD\u0054\u0061\u0062\u006c\u0065"); _edge != nil {
			return _edge
		}
	}
	if _bbad.SpPr != nil {
		if _afgb := _bbad.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afgb != nil {
			return _afgb
		}
	}
	if _bbad.ExtLst != nil {
		if _caca := _bbad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _caca != nil {
			return _caca
		}
	}
	return nil
}

type CT_LegendEntry struct {
	Idx    *CT_UnsignedInt
	Choice *CT_LegendEntryChoice
	ExtLst *CT_ExtensionList
}

func (_aecgf *CT_ScatterStyle) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bgfa := range start.Attr {
		if _bgfa.Name.Local == "\u0076\u0061\u006c" {
			_aecgf.ValAttr.UnmarshalXMLAttr(_bgfa)
			continue
		}
	}
	for {
		_gfcaf, _ggffa := d.Token()
		if _ggffa != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065r\u0053\u0074\u0079l\u0065:\u0020\u0025\u0073", _ggffa)
		}
		if _acbd, _gafba := _gfcaf.(_c.EndElement); _gafba && _acbd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gafff *ST_SizeRepresents) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_gafff = 0
	case "\u0061\u0072\u0065\u0061":
		*_gafff = 1
	case "\u0077":
		*_gafff = 2
	}
	return nil
}

type CT_Trendline struct {
	Name          *string
	SpPr          *_d.CT_ShapeProperties
	TrendlineType *CT_TrendlineType
	Order         *CT_Order
	Period        *CT_Period
	Forward       *CT_Double
	Backward      *CT_Double
	Intercept     *CT_Double
	DispRSqr      *CT_Boolean
	DispEq        *CT_Boolean
	TrendlineLbl  *CT_TrendlineLbl
	ExtLst        *CT_ExtensionList
}

// Validate validates the CT_BarSer and its children
func (_cebb *CT_BarSer) Validate() error {
	return _cebb.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r")
}

// Validate validates the CT_SizeRepresents and its children
func (_gcegb *CT_SizeRepresents) Validate() error {
	return _gcegb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073")
}
func NewCT_MarkerStyle() *CT_MarkerStyle {
	_ffde := &CT_MarkerStyle{}
	_ffde.ValAttr = ST_MarkerStyle(1)
	return _ffde
}
func NewCT_Bar3DChart() *CT_Bar3DChart {
	_aab := &CT_Bar3DChart{}
	_aab.BarDir = NewCT_BarDir()
	return _aab
}

type ST_TrendlineType byte

func (_ffebb *CT_PictureStackUnit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _ffebb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_afefd *EG_BarChartShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_cfgag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_afefd.BarDir, _cfgag)
	if _afefd.Grouping != nil {
		_acbef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_afefd.Grouping, _acbef)
	}
	if _afefd.VaryColors != nil {
		_ccbgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_afefd.VaryColors, _ccbgb)
	}
	if _afefd.Ser != nil {
		_ffgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dddeb := range _afefd.Ser {
			e.EncodeElement(_dddeb, _ffgb)
		}
	}
	if _afefd.DLbls != nil {
		_bfgfa := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_afefd.DLbls, _bfgfa)
	}
	return nil
}

// Validate validates the CT_PageMargins and its children
func (_aadb *CT_PageMargins) Validate() error {
	return _aadb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073")
}

const (
	ST_MarkerStyleUnset    ST_MarkerStyle = 0
	ST_MarkerStyleCircle   ST_MarkerStyle = 1
	ST_MarkerStyleDash     ST_MarkerStyle = 2
	ST_MarkerStyleDiamond  ST_MarkerStyle = 3
	ST_MarkerStyleDot      ST_MarkerStyle = 4
	ST_MarkerStyleNone     ST_MarkerStyle = 5
	ST_MarkerStylePicture  ST_MarkerStyle = 6
	ST_MarkerStylePlus     ST_MarkerStyle = 7
	ST_MarkerStyleSquare   ST_MarkerStyle = 8
	ST_MarkerStyleStar     ST_MarkerStyle = 9
	ST_MarkerStyleTriangle ST_MarkerStyle = 10
	ST_MarkerStyleX        ST_MarkerStyle = 11
	ST_MarkerStyleAuto     ST_MarkerStyle = 12
)

// Validate validates the Group_DLbl and its children
func (_aefbbf *Group_DLbl) Validate() error {
	return _aefbbf.ValidateWithPath("\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c")
}
func NewCT_Pie3DChart() *CT_Pie3DChart { _cafd := &CT_Pie3DChart{}; return _cafd }
func (_gcce *CT_ErrBarType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _cdga := range start.Attr {
		if _cdga.Name.Local == "\u0076\u0061\u006c" {
			_gcce.ValAttr.UnmarshalXMLAttr(_cdga)
			continue
		}
	}
	for {
		_fagd, _geebg := d.Token()
		if _geebg != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072B\u0061r\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _geebg)
		}
		if _fcgfg, _cgdb := _fagd.(_c.EndElement); _cgdb && _fcgfg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggdd ST_LayoutTarget) Validate() error { return _ggdd.ValidateWithPath("") }
func (_aagee *CT_PivotFmts) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_gced:
	for {
		_ggbc, _cebgc := d.Token()
		if _cebgc != nil {
			return _cebgc
		}
		switch _dgef := _ggbc.(type) {
		case _c.StartElement:
			switch _dgef.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}:
				_dfdcf := NewCT_PivotFmt()
				if _dbbe := d.DecodeElement(_dfdcf, &_dgef); _dbbe != nil {
					return _dbbe
				}
				_aagee.PivotFmt = append(_aagee.PivotFmt, _dfdcf)
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_P\u0069\u0076o\u0074\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _dgef.Name)
				if _dgge := d.Skip(); _dgge != nil {
					return _dgge
				}
			}
		case _c.EndElement:
			break _gced
		case _c.CharData:
		}
	}
	return nil
}

type CT_LayoutTarget struct{ ValAttr ST_LayoutTarget }

func (_bfaea *CT_UnsignedInt) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _daabb := range start.Attr {
		if _daabb.Name.Local == "\u0076\u0061\u006c" {
			_cdbaa, _bcgd := _e.ParseUint(_daabb.Value, 10, 32)
			if _bcgd != nil {
				return _bcgd
			}
			_bfaea.ValAttr = uint32(_cdbaa)
			continue
		}
	}
	for {
		_ebcdc, _dabc := d.Token()
		if _dabc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fU\u006e\u0073\u0069\u0067\u006e\u0065\u0064\u0049\u006e\u0074:\u0020\u0025\u0073", _dabc)
		}
		if _gcfed, _gcacc := _ebcdc.(_c.EndElement); _gcacc && _gcfed.Name == start.Name {
			break
		}
	}
	return nil
}
func NewUserShapes() *UserShapes {
	_baaeff := &UserShapes{}
	_baaeff.CT_Drawing = *_dd.NewCT_Drawing()
	return _baaeff
}
func (_ecgfd *ST_CrossBetween) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_ecgfd = 0
	case "\u0062e\u0074\u0077\u0065\u0065\u006e":
		*_ecgfd = 1
	case "\u006d\u0069\u0064\u0043\u0061\u0074":
		*_ecgfd = 2
	}
	return nil
}
func (_cggbd *CT_DoughnutChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_accce:
	for {
		_fccgc, _dfcff := d.Token()
		if _dfcff != nil {
			return _dfcff
		}
		switch _affc := _fccgc.(type) {
		case _c.StartElement:
			switch _affc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cggbd.VaryColors = NewCT_Boolean()
				if _fcfa := d.DecodeElement(_cggbd.VaryColors, &_affc); _fcfa != nil {
					return _fcfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_agdf := NewCT_PieSer()
				if _deae := d.DecodeElement(_agdf, &_affc); _deae != nil {
					return _deae
				}
				_cggbd.Ser = append(_cggbd.Ser, _agdf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cggbd.DLbls = NewCT_DLbls()
				if _dbbc := d.DecodeElement(_cggbd.DLbls, &_affc); _dbbc != nil {
					return _dbbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_cggbd.FirstSliceAng = NewCT_FirstSliceAng()
				if _gccc := d.DecodeElement(_cggbd.FirstSliceAng, &_affc); _gccc != nil {
					return _gccc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_cggbd.HoleSize = NewCT_HoleSize()
				if _fggg := d.DecodeElement(_cggbd.HoleSize, &_affc); _fggg != nil {
					return _fggg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cggbd.ExtLst = NewCT_ExtensionList()
				if _gbge := d.DecodeElement(_cggbd.ExtLst, &_affc); _gbge != nil {
					return _gbge
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074\u0020\u0025v", _affc.Name)
				if _faca := d.Skip(); _faca != nil {
					return _faca
				}
			}
		case _c.EndElement:
			break _accce
		case _c.CharData:
		}
	}
	return nil
}

type CT_Marker struct {
	Symbol *CT_MarkerStyle
	Size   *CT_MarkerSize
	SpPr   *_d.CT_ShapeProperties
	ExtLst *CT_ExtensionList
}

func (_adcd *CT_Surface3DChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_accee:
	for {
		_baba, _dgfad := d.Token()
		if _dgfad != nil {
			return _dgfad
		}
		switch _abgcc := _baba.(type) {
		case _c.StartElement:
			switch _abgcc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_adcd.Wireframe = NewCT_Boolean()
				if _deeea := d.DecodeElement(_adcd.Wireframe, &_abgcc); _deeea != nil {
					return _deeea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bfacg := NewCT_SurfaceSer()
				if _faacf := d.DecodeElement(_bfacg, &_abgcc); _faacf != nil {
					return _faacf
				}
				_adcd.Ser = append(_adcd.Ser, _bfacg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_adcd.BandFmts = NewCT_BandFmts()
				if _gcga := d.DecodeElement(_adcd.BandFmts, &_abgcc); _gcga != nil {
					return _gcga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_gbgd := NewCT_UnsignedInt()
				if _ccebe := d.DecodeElement(_gbgd, &_abgcc); _ccebe != nil {
					return _ccebe
				}
				_adcd.AxId = append(_adcd.AxId, _gbgd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adcd.ExtLst = NewCT_ExtensionList()
				if _dedag := d.DecodeElement(_adcd.ExtLst, &_abgcc); _dedag != nil {
					return _dedag
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _abgcc.Name)
				if _edbef := d.Skip(); _edbef != nil {
					return _edbef
				}
			}
		case _c.EndElement:
			break _accee
		case _c.CharData:
		}
	}
	return nil
}
func (_acaafg ST_RadarStyle) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_acaafg.String(), start)
}
func (_gbgg *CT_TextLanguageID) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _efcbe := range start.Attr {
		if _efcbe.Name.Local == "\u0076\u0061\u006c" {
			_efdce, _ebce := _efcbe.Value, error(nil)
			if _ebce != nil {
				return _ebce
			}
			_gbgg.ValAttr = _efdce
			continue
		}
	}
	for {
		_gedcf, _eafgd := d.Token()
		if _eafgd != nil {
			return _aa.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u0049\u0044: \u0025\u0073", _eafgd)
		}
		if _deege, _abecfc := _gedcf.(_c.EndElement); _abecfc && _deege.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bfacf ST_Crosses) ValidateWithPath(path string) error {
	switch _bfacf {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfacf))
	}
	return nil
}
func (_aedc *CT_ValAx) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_gaaeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_aedc.AxId, _gaaeb)
	_edfa := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_aedc.Scaling, _edfa)
	if _aedc.Delete != nil {
		_aedcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_aedc.Delete, _aedcd)
	}
	_gdbefa := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_aedc.AxPos, _gdbefa)
	if _aedc.MajorGridlines != nil {
		_ebcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_aedc.MajorGridlines, _ebcc)
	}
	if _aedc.MinorGridlines != nil {
		_fcgfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_aedc.MinorGridlines, _fcgfa)
	}
	if _aedc.Title != nil {
		_dcafe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_aedc.Title, _dcafe)
	}
	if _aedc.NumFmt != nil {
		_ffccc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_aedc.NumFmt, _ffccc)
	}
	if _aedc.MajorTickMark != nil {
		_dgggag := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_aedc.MajorTickMark, _dgggag)
	}
	if _aedc.MinorTickMark != nil {
		_afacc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_aedc.MinorTickMark, _afacc)
	}
	if _aedc.TickLblPos != nil {
		_bfddc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_aedc.TickLblPos, _bfddc)
	}
	if _aedc.SpPr != nil {
		_aecb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aedc.SpPr, _aecb)
	}
	if _aedc.TxPr != nil {
		_gagae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_aedc.TxPr, _gagae)
	}
	_ebefe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_aedc.CrossAx, _ebefe)
	if _aedc.Choice != nil {
		_aedc.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _aedc.CrossBetween != nil {
		_cdggd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063\u0072\u006f\u0073\u0073\u0042\u0065t\u0077\u0065\u0065\u006e"}}
		e.EncodeElement(_aedc.CrossBetween, _cdggd)
	}
	if _aedc.MajorUnit != nil {
		_bffa := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aedc.MajorUnit, _bffa)
	}
	if _aedc.MinorUnit != nil {
		_dgded := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aedc.MinorUnit, _dgded)
	}
	if _aedc.DispUnits != nil {
		_agebf := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"}}
		e.EncodeElement(_aedc.DispUnits, _agebf)
	}
	if _aedc.ExtLst != nil {
		_fcccb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aedc.ExtLst, _fcccb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ccgce *EG_AreaChartShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ccgce.Grouping != nil {
		_acadd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_ccgce.Grouping, _acadd)
	}
	if _ccgce.VaryColors != nil {
		_acfcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ccgce.VaryColors, _acfcg)
	}
	if _ccgce.Ser != nil {
		_abbde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fbcbg := range _ccgce.Ser {
			e.EncodeElement(_fbcbg, _abbde)
		}
	}
	if _ccgce.DLbls != nil {
		_gegdf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ccgce.DLbls, _gegdf)
	}
	if _ccgce.DropLines != nil {
		_agebfe := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ccgce.DropLines, _agebfe)
	}
	return nil
}

type CT_LayoutMode struct{ ValAttr ST_LayoutMode }

// Validate validates the CT_TimeUnit and its children
func (_fbgca *CT_TimeUnit) Validate() error {
	return _fbgca.ValidateWithPath("C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074")
}

// ValidateWithPath validates the CT_StrVal and its children, prefixing error messages with path
func (_dddea *CT_StrVal) ValidateWithPath(path string) error { return nil }

type CT_TrendlineLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	NumFmt *CT_NumFmt
	SpPr   *_d.CT_ShapeProperties
	TxPr   *_d.CT_TextBody
	ExtLst *CT_ExtensionList
}

func (_ageba ST_ErrBarType) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_bgfgd := _c.Attr{}
	_bgfgd.Name = name
	switch _ageba {
	case ST_ErrBarTypeUnset:
		_bgfgd.Value = ""
	case ST_ErrBarTypeBoth:
		_bgfgd.Value = "\u0062\u006f\u0074\u0068"
	case ST_ErrBarTypeMinus:
		_bgfgd.Value = "\u006d\u0069\u006eu\u0073"
	case ST_ErrBarTypePlus:
		_bgfgd.Value = "\u0070\u006c\u0075\u0073"
	}
	return _bgfgd, nil
}
func (_adbfb *ST_BuiltInUnit) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_adbfb = 0
	case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
		*_adbfb = 1
	case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
		*_adbfb = 2
	case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_adbfb = 3
	case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_adbfb = 4
	case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_adbfb = 5
	case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_adbfb = 6
	case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_adbfb = 7
	case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_adbfb = 8
	case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
		*_adbfb = 9
	}
	return nil
}
func (_fbdcd ST_TimeUnit) ValidateWithPath(path string) error {
	switch _fbdcd {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbdcd))
	}
	return nil
}

// Validate validates the CT_NumDataSourceChoice and its children
func (_abdc *CT_NumDataSourceChoice) Validate() error {
	return _abdc.ValidateWithPath("\u0043\u0054\u005f\u004eum\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069c\u0065")
}

// ValidateWithPath validates the CT_NumDataSourceChoice and its children, prefixing error messages with path
func (_dcag *CT_NumDataSourceChoice) ValidateWithPath(path string) error {
	if _dcag.NumRef != nil {
		if _faeed := _dcag.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _faeed != nil {
			return _faeed
		}
	}
	if _dcag.NumLit != nil {
		if _eeaf := _dcag.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _eeaf != nil {
			return _eeaf
		}
	}
	return nil
}
func (_fggde ST_Thickness) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fggde.ST_ThicknessPercent != nil {
		e.EncodeToken(_c.CharData(*_fggde.ST_ThicknessPercent))
	}
	if _fggde.Uint32 != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_fggde.Uint32)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}

// ValidateWithPath validates the CT_MultiLvlStrRef and its children, prefixing error messages with path
func (_gefgg *CT_MultiLvlStrRef) ValidateWithPath(path string) error {
	if _gefgg.MultiLvlStrCache != nil {
		if _ececa := _gefgg.MultiLvlStrCache.ValidateWithPath(path + "\u002f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072C\u0061\u0063\u0068\u0065"); _ececa != nil {
			return _ececa
		}
	}
	if _gefgg.ExtLst != nil {
		if _ecace := _gefgg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecace != nil {
			return _ecace
		}
	}
	return nil
}
func (_gffd *CT_RotY) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _ccaae := range start.Attr {
		if _ccaae.Name.Local == "\u0076\u0061\u006c" {
			_cgca, _fcff := _e.ParseUint(_ccaae.Value, 10, 16)
			if _fcff != nil {
				return _fcff
			}
			_agca := uint16(_cgca)
			_gffd.ValAttr = &_agca
			continue
		}
	}
	for {
		_beafe, _efbff := d.Token()
		if _efbff != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0059\u003a\u0020\u0025\u0073", _efbff)
		}
		if _adcef, _ddef := _beafe.(_c.EndElement); _ddef && _adcef.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Scaling and its children
func (_bfddf *CT_Scaling) Validate() error {
	return _bfddf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067")
}
func (_fdda *CT_SerTx) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_fdda.Choice.MarshalXML(e, _c.StartElement{})
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fbabb *ST_PageSetupOrientation) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_fbabb = 0
	case "\u0064e\u0066\u0061\u0075\u006c\u0074":
		*_fbabb = 1
	case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
		*_fbabb = 2
	case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
		*_fbabb = 3
	}
	return nil
}

// ValidateWithPath validates the EG_SerShared and its children, prefixing error messages with path
func (_bddfg *EG_SerShared) ValidateWithPath(path string) error {
	if _fdgaa := _bddfg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fdgaa != nil {
		return _fdgaa
	}
	if _abcfe := _bddfg.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _abcfe != nil {
		return _abcfe
	}
	if _bddfg.Tx != nil {
		if _dcefag := _bddfg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dcefag != nil {
			return _dcefag
		}
	}
	if _bddfg.SpPr != nil {
		if _gebda := _bddfg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gebda != nil {
			return _gebda
		}
	}
	return nil
}

type ST_DLblPos byte

func (_bcecff *ST_ErrDir) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_bcecff = 0
	case "\u0078":
		*_bcecff = 1
	case "\u0079":
		*_bcecff = 2
	}
	return nil
}
func (_dagc *CT_StrData) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_fdcdd:
	for {
		_aggd, _bdegg := d.Token()
		if _bdegg != nil {
			return _bdegg
		}
		switch _fbfge := _aggd.(type) {
		case _c.StartElement:
			switch _fbfge.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_dagc.PtCount = NewCT_UnsignedInt()
				if _defea := d.DecodeElement(_dagc.PtCount, &_fbfge); _defea != nil {
					return _defea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_fagf := NewCT_StrVal()
				if _dbcb := d.DecodeElement(_fagf, &_fbfge); _dbcb != nil {
					return _dbcb
				}
				_dagc.Pt = append(_dagc.Pt, _fagf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dagc.ExtLst = NewCT_ExtensionList()
				if _gfggf := d.DecodeElement(_dagc.ExtLst, &_fbfge); _gfggf != nil {
					return _gfggf
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _fbfge.Name)
				if _cfafb := d.Skip(); _cfafb != nil {
					return _cfafb
				}
			}
		case _c.EndElement:
			break _fdcdd
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DLbls and its children
func (_egfa *CT_DLbls) Validate() error {
	return _egfa.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073")
}
func (_fgc *CT_Boolean) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fgc.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0064", _degab(*_fgc.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fbgba *CT_SerTx) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fbgba.Choice = NewCT_SerTxChoice()
_cbegg:
	for {
		_bbafd, _abdff := d.Token()
		if _abdff != nil {
			return _abdff
		}
		switch _fdacf := _bbafd.(type) {
		case _c.StartElement:
			switch _fdacf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_fbgba.Choice = NewCT_SerTxChoice()
				if _eabdf := d.DecodeElement(&_fbgba.Choice.StrRef, &_fdacf); _eabdf != nil {
					return _eabdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_fbgba.Choice = NewCT_SerTxChoice()
				if _gacf := d.DecodeElement(&_fbgba.Choice.V, &_fdacf); _gacf != nil {
					return _gacf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0020\u0025\u0076", _fdacf.Name)
				if _cecb := d.Skip(); _cecb != nil {
					return _cecb
				}
			}
		case _c.EndElement:
			break _cbegg
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Overlap() *CT_Overlap { _dfcg := &CT_Overlap{}; return _dfcg }
func (_affgb *ST_OfPieType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_acdg, _dcfc := d.Token()
	if _dcfc != nil {
		return _dcfc
	}
	if _facef, _caea := _acdg.(_c.EndElement); _caea && _facef.Name == start.Name {
		*_affgb = 1
		return nil
	}
	if _cecga, _ebfbc := _acdg.(_c.CharData); !_ebfbc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acdg)
	} else {
		switch string(_cecga) {
		case "":
			*_affgb = 0
		case "\u0070\u0069\u0065":
			*_affgb = 1
		case "\u0062\u0061\u0072":
			*_affgb = 2
		}
	}
	_acdg, _dcfc = d.Token()
	if _dcfc != nil {
		return _dcfc
	}
	if _dfbgf, _fbeba := _acdg.(_c.EndElement); _fbeba && _dfbgf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acdg)
}
func (_bgcafb *EG_PieChartShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_dcbbg:
	for {
		_bagfe, _dedbc := d.Token()
		if _dedbc != nil {
			return _dedbc
		}
		switch _daacgc := _bagfe.(type) {
		case _c.StartElement:
			switch _daacgc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bgcafb.VaryColors = NewCT_Boolean()
				if _ffcaf := d.DecodeElement(_bgcafb.VaryColors, &_daacgc); _ffcaf != nil {
					return _ffcaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cgdac := NewCT_PieSer()
				if _bdfgbd := d.DecodeElement(_cgdac, &_daacgc); _bdfgbd != nil {
					return _bdfgbd
				}
				_bgcafb.Ser = append(_bgcafb.Ser, _cgdac)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bgcafb.DLbls = NewCT_DLbls()
				if _aefbb := d.DecodeElement(_bgcafb.DLbls, &_daacgc); _aefbb != nil {
					return _aefbb
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _daacgc.Name)
				if _dbcgad := d.Skip(); _dbcgad != nil {
					return _dbcgad
				}
			}
		case _c.EndElement:
			break _dcbbg
		case _c.CharData:
		}
	}
	return nil
}

type ST_Crosses byte
type CT_Area3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}
type CT_PageMargins struct {
	LAttr      float64
	RAttr      float64
	TAttr      float64
	BAttr      float64
	HeaderAttr float64
	FooterAttr float64
}

func (_bffcd ST_DispBlanksAs) ValidateWithPath(path string) error {
	switch _bffcd {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bffcd))
	}
	return nil
}

// ValidateWithPath validates the CT_SurfaceChart and its children, prefixing error messages with path
func (_edgbb *CT_SurfaceChart) ValidateWithPath(path string) error {
	if _edgbb.Wireframe != nil {
		if _fcec := _edgbb.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _fcec != nil {
			return _fcec
		}
	}
	for _ebacc, _cggg := range _edgbb.Ser {
		if _dageg := _cggg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ebacc)); _dageg != nil {
			return _dageg
		}
	}
	if _edgbb.BandFmts != nil {
		if _fbefbd := _edgbb.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _fbefbd != nil {
			return _fbefbd
		}
	}
	for _eadad, _ggdfe := range _edgbb.AxId {
		if _ebcfg := _ggdfe.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _eadad)); _ebcfg != nil {
			return _ebcfg
		}
	}
	if _edgbb.ExtLst != nil {
		if _acddb := _edgbb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acddb != nil {
			return _acddb
		}
	}
	return nil
}

// Validate validates the CT_Thickness and its children
func (_ecgab *CT_Thickness) Validate() error {
	return _ecgab.ValidateWithPath("\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073")
}
func (_fedgg *ST_HPercent) Validate() error { return _fedgg.ValidateWithPath("") }
func ParseUnionST_BubbleScale(s string) (ST_BubbleScale, error) {
	if ST_BubbleScalePercentPatternRe.MatchString(s) {
		return ST_BubbleScale{ST_BubbleScalePercent: &s}, nil
	}
	_gcbfa, _ggfgf := _e.ParseUint(s, 10, 32)
	if _ggfgf != nil {
		return ST_BubbleScale{}, _ggfgf
	}
	_edfga := uint32(_gcbfa)
	return ST_BubbleScale{ST_BubbleScaleUInt: &_edfga}, nil
}
func NewCT_Style() *CT_Style { _dgdec := &CT_Style{}; _dgdec.ValAttr = 1; return _dgdec }
func (_fcfbc *CT_ScatterSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fcfbc.Idx = NewCT_UnsignedInt()
	_fcfbc.Order = NewCT_UnsignedInt()
_gddge:
	for {
		_cefdg, _abeed := d.Token()
		if _abeed != nil {
			return _abeed
		}
		switch _bfdg := _cefdg.(type) {
		case _c.StartElement:
			switch _bfdg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _febd := d.DecodeElement(_fcfbc.Idx, &_bfdg); _febd != nil {
					return _febd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _ffbd := d.DecodeElement(_fcfbc.Order, &_bfdg); _ffbd != nil {
					return _ffbd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fcfbc.Tx = NewCT_SerTx()
				if _dfbg := d.DecodeElement(_fcfbc.Tx, &_bfdg); _dfbg != nil {
					return _dfbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fcfbc.SpPr = _d.NewCT_ShapeProperties()
				if _bdfc := d.DecodeElement(_fcfbc.SpPr, &_bfdg); _bdfc != nil {
					return _bdfc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_fcfbc.Marker = NewCT_Marker()
				if _eceef := d.DecodeElement(_fcfbc.Marker, &_bfdg); _eceef != nil {
					return _eceef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_gdabea := NewCT_DPt()
				if _dceea := d.DecodeElement(_gdabea, &_bfdg); _dceea != nil {
					return _dceea
				}
				_fcfbc.DPt = append(_fcfbc.DPt, _gdabea)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fcfbc.DLbls = NewCT_DLbls()
				if _addbc := d.DecodeElement(_fcfbc.DLbls, &_bfdg); _addbc != nil {
					return _addbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cfcg := NewCT_Trendline()
				if _fdccf := d.DecodeElement(_cfcg, &_bfdg); _fdccf != nil {
					return _fdccf
				}
				_fcfbc.Trendline = append(_fcfbc.Trendline, _cfcg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gccda := NewCT_ErrBars()
				if _bfcg := d.DecodeElement(_gccda, &_bfdg); _bfcg != nil {
					return _bfcg
				}
				_fcfbc.ErrBars = append(_fcfbc.ErrBars, _gccda)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_fcfbc.XVal = NewCT_AxDataSource()
				if _fccc := d.DecodeElement(_fcfbc.XVal, &_bfdg); _fccc != nil {
					return _fccc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_fcfbc.YVal = NewCT_NumDataSource()
				if _agcbg := d.DecodeElement(_fcfbc.YVal, &_bfdg); _agcbg != nil {
					return _agcbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_fcfbc.Smooth = NewCT_Boolean()
				if _dage := d.DecodeElement(_fcfbc.Smooth, &_bfdg); _dage != nil {
					return _dage
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcfbc.ExtLst = NewCT_ExtensionList()
				if _aaeea := d.DecodeElement(_fcfbc.ExtLst, &_bfdg); _aaeea != nil {
					return _aaeea
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053c\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072 \u0025\u0076", _bfdg.Name)
				if _cbfe := d.Skip(); _cbfe != nil {
					return _cbfe
				}
			}
		case _c.EndElement:
			break _gddge
		case _c.CharData:
		}
	}
	return nil
}
func (_gadb *CT_PieChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _gadb.VaryColors != nil {
		_gbefe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gadb.VaryColors, _gbefe)
	}
	if _gadb.Ser != nil {
		_gaad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _efbc := range _gadb.Ser {
			e.EncodeElement(_efbc, _gaad)
		}
	}
	if _gadb.DLbls != nil {
		_gebed := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gadb.DLbls, _gebed)
	}
	if _gadb.FirstSliceAng != nil {
		_gebfd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_gadb.FirstSliceAng, _gebfd)
	}
	if _gadb.ExtLst != nil {
		_egeae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gadb.ExtLst, _egeae)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bfbcc *ST_Thickness) ValidateWithPath(path string) error {
	_dfgfe := []string{}
	if _bfbcc.ST_ThicknessPercent != nil {
		_dfgfe = append(_dfgfe, "\u0053\u0054\u005f\u0054hi\u0063\u006b\u006e\u0065\u0073\u0073\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _bfbcc.Uint32 != nil {
		_dfgfe = append(_dfgfe, "\u0055\u0069\u006e\u0074\u0033\u0032")
	}
	if len(_dfgfe) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dfgfe)
	}
	return nil
}
func (_gdabe *CT_NumDataSource) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_gdabe.Choice.MarshalXML(e, _c.StartElement{})
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_MultiLvlStrData struct {
	PtCount *CT_UnsignedInt
	Lvl     []*CT_Lvl
	ExtLst  *CT_ExtensionList
}

func (_dff *CT_AxisUnit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _dff.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_afefe ST_DispBlanksAs) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gfdeb := _c.Attr{}
	_gfdeb.Name = name
	switch _afefe {
	case ST_DispBlanksAsUnset:
		_gfdeb.Value = ""
	case ST_DispBlanksAsSpan:
		_gfdeb.Value = "\u0073\u0070\u0061\u006e"
	case ST_DispBlanksAsGap:
		_gfdeb.Value = "\u0067\u0061\u0070"
	case ST_DispBlanksAsZero:
		_gfdeb.Value = "\u007a\u0065\u0072\u006f"
	}
	return _gfdeb, nil
}

// Validate validates the CT_HoleSize and its children
func (_gcdfa *CT_HoleSize) Validate() error {
	return _gcdfa.ValidateWithPath("C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065")
}
func (_affbd *CT_View3D) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ecgef:
	for {
		_edggc, _bdddf := d.Token()
		if _bdddf != nil {
			return _bdddf
		}
		switch _fcbaa := _edggc.(type) {
		case _c.StartElement:
			switch _fcbaa.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}:
				_affbd.RotX = NewCT_RotX()
				if _deacf := d.DecodeElement(_affbd.RotX, &_fcbaa); _deacf != nil {
					return _deacf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_affbd.HPercent = NewCT_HPercent()
				if _gdbg := d.DecodeElement(_affbd.HPercent, &_fcbaa); _gdbg != nil {
					return _gdbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}:
				_affbd.RotY = NewCT_RotY()
				if _efdd := d.DecodeElement(_affbd.RotY, &_fcbaa); _efdd != nil {
					return _efdd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_affbd.DepthPercent = NewCT_DepthPercent()
				if _gcfgb := d.DecodeElement(_affbd.DepthPercent, &_fcbaa); _gcfgb != nil {
					return _gcfgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}:
				_affbd.RAngAx = NewCT_Boolean()
				if _eeec := d.DecodeElement(_affbd.RAngAx, &_fcbaa); _eeec != nil {
					return _eeec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}:
				_affbd.Perspective = NewCT_Perspective()
				if _ebeda := d.DecodeElement(_affbd.Perspective, &_fcbaa); _ebeda != nil {
					return _ebeda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_affbd.ExtLst = NewCT_ExtensionList()
				if _dgbe := d.DecodeElement(_affbd.ExtLst, &_fcbaa); _dgbe != nil {
					return _dgbe
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0056\u0069\u0065w\u0033\u0044 \u0025\u0076", _fcbaa.Name)
				if _edgf := d.Skip(); _edgf != nil {
					return _edgf
				}
			}
		case _c.EndElement:
			break _ecgef
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ScatterSer and its children
func (_fefgcb *CT_ScatterSer) Validate() error {
	return _fefgcb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_SizeRepresents and its children, prefixing error messages with path
func (_cgbd *CT_SizeRepresents) ValidateWithPath(path string) error {
	if _agcag := _cgbd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _agcag != nil {
		return _agcag
	}
	return nil
}
func (_babgc *CT_RadarStyle) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _babgc.ValAttr != ST_RadarStyleUnset {
		_fbgfg, _eeggc := _babgc.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _eeggc != nil {
			return _eeggc
		}
		start.Attr = append(start.Attr, _fbgfg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_baafb *CT_PivotFmt) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_edcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_baafb.Idx, _edcg)
	if _baafb.SpPr != nil {
		_ebdec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_baafb.SpPr, _ebdec)
	}
	if _baafb.TxPr != nil {
		_edebe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_baafb.TxPr, _edebe)
	}
	if _baafb.Marker != nil {
		_bgcde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_baafb.Marker, _bgcde)
	}
	if _baafb.DLbl != nil {
		_dcgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		e.EncodeElement(_baafb.DLbl, _dcgg)
	}
	if _baafb.ExtLst != nil {
		_fgcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_baafb.ExtLst, _fgcc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DLblsChoice and its children, prefixing error messages with path
func (_fedc *CT_DLblsChoice) ValidateWithPath(path string) error {
	if _fedc.Delete != nil {
		if _fbcc := _fedc.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fbcc != nil {
			return _fbcc
		}
	}
	if _fedc.NumFmt != nil {
		if _bbef := _fedc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _bbef != nil {
			return _bbef
		}
	}
	if _fedc.SpPr != nil {
		if _gfbfa := _fedc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gfbfa != nil {
			return _gfbfa
		}
	}
	if _fedc.TxPr != nil {
		if _dddg := _fedc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dddg != nil {
			return _dddg
		}
	}
	if _fedc.DLblPos != nil {
		if _edegb := _fedc.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _edegb != nil {
			return _edegb
		}
	}
	if _fedc.ShowLegendKey != nil {
		if _geca := _fedc.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _geca != nil {
			return _geca
		}
	}
	if _fedc.ShowVal != nil {
		if _aabbc := _fedc.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _aabbc != nil {
			return _aabbc
		}
	}
	if _fedc.ShowCatName != nil {
		if _egfb := _fedc.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _egfb != nil {
			return _egfb
		}
	}
	if _fedc.ShowSerName != nil {
		if _eeac := _fedc.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _eeac != nil {
			return _eeac
		}
	}
	if _fedc.ShowPercent != nil {
		if _ecbc := _fedc.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _ecbc != nil {
			return _ecbc
		}
	}
	if _fedc.ShowBubbleSize != nil {
		if _fafd := _fedc.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _fafd != nil {
			return _fafd
		}
	}
	if _fedc.ShowLeaderLines != nil {
		if _bdgd := _fedc.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _bdgd != nil {
			return _bdgd
		}
	}
	if _fedc.LeaderLines != nil {
		if _dfedb := _fedc.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _dfedb != nil {
			return _dfedb
		}
	}
	return nil
}

type CT_Title struct {
	Tx      *CT_Tx
	Layout  *CT_Layout
	Overlay *CT_Boolean
	SpPr    *_d.CT_ShapeProperties
	TxPr    *_d.CT_TextBody
	ExtLst  *CT_ExtensionList
}

// Validate validates the CT_UnsignedInt and its children
func (_cbgde *CT_UnsignedInt) Validate() error {
	return _cbgde.ValidateWithPath("\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074")
}
func NewCT_Skip() *CT_Skip { _fceb := &CT_Skip{}; _fceb.ValAttr = 1; return _fceb }
func (_daefa *Group_DLbl) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bcdae:
	for {
		_cdede, _agcf := d.Token()
		if _agcf != nil {
			return _agcf
		}
		switch _eegd := _cdede.(type) {
		case _c.StartElement:
			switch _eegd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_daefa.Layout = NewCT_Layout()
				if _bfgeg := d.DecodeElement(_daefa.Layout, &_eegd); _bfgeg != nil {
					return _bfgeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_daefa.Tx = NewCT_Tx()
				if _abcae := d.DecodeElement(_daefa.Tx, &_eegd); _abcae != nil {
					return _abcae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_daefa.NumFmt = NewCT_NumFmt()
				if _dfcbg := d.DecodeElement(_daefa.NumFmt, &_eegd); _dfcbg != nil {
					return _dfcbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_daefa.SpPr = _d.NewCT_ShapeProperties()
				if _eaaa := d.DecodeElement(_daefa.SpPr, &_eegd); _eaaa != nil {
					return _eaaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_daefa.TxPr = _d.NewCT_TextBody()
				if _bgaed := d.DecodeElement(_daefa.TxPr, &_eegd); _bgaed != nil {
					return _bgaed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_daefa.DLblPos = NewCT_DLblPos()
				if _gfbfc := d.DecodeElement(_daefa.DLblPos, &_eegd); _gfbfc != nil {
					return _gfbfc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_daefa.ShowLegendKey = NewCT_Boolean()
				if _cdebgg := d.DecodeElement(_daefa.ShowLegendKey, &_eegd); _cdebgg != nil {
					return _cdebgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_daefa.ShowVal = NewCT_Boolean()
				if _cbce := d.DecodeElement(_daefa.ShowVal, &_eegd); _cbce != nil {
					return _cbce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_daefa.ShowCatName = NewCT_Boolean()
				if _febcg := d.DecodeElement(_daefa.ShowCatName, &_eegd); _febcg != nil {
					return _febcg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_daefa.ShowSerName = NewCT_Boolean()
				if _gfcgg := d.DecodeElement(_daefa.ShowSerName, &_eegd); _gfcgg != nil {
					return _gfcgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_daefa.ShowPercent = NewCT_Boolean()
				if _bcafg := d.DecodeElement(_daefa.ShowPercent, &_eegd); _bcafg != nil {
					return _bcafg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_daefa.ShowBubbleSize = NewCT_Boolean()
				if _acaea := d.DecodeElement(_daefa.ShowBubbleSize, &_eegd); _acaea != nil {
					return _acaea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_daefa.Separator = new(string)
				if _gdbga := d.DecodeElement(_daefa.Separator, &_eegd); _gdbga != nil {
					return _gdbga
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006fu\u0070\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _eegd.Name)
				if _cbed := d.Skip(); _cbed != nil {
					return _cbed
				}
			}
		case _c.EndElement:
			break _bcdae
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Trendline and its children, prefixing error messages with path
func (_ggcbd *CT_Trendline) ValidateWithPath(path string) error {
	if _ggcbd.SpPr != nil {
		if _gecgd := _ggcbd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gecgd != nil {
			return _gecgd
		}
	}
	if _fgggb := _ggcbd.TrendlineType.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006ee\u0054\u0079\u0070\u0065"); _fgggb != nil {
		return _fgggb
	}
	if _ggcbd.Order != nil {
		if _abeg := _ggcbd.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _abeg != nil {
			return _abeg
		}
	}
	if _ggcbd.Period != nil {
		if _gggab := _ggcbd.Period.ValidateWithPath(path + "\u002fP\u0065\u0072\u0069\u006f\u0064"); _gggab != nil {
			return _gggab
		}
	}
	if _ggcbd.Forward != nil {
		if _cbaad := _ggcbd.Forward.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0077\u0061\u0072\u0064"); _cbaad != nil {
			return _cbaad
		}
	}
	if _ggcbd.Backward != nil {
		if _afabf := _ggcbd.Backward.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0077\u0061\u0072d"); _afabf != nil {
			return _afabf
		}
	}
	if _ggcbd.Intercept != nil {
		if _fbfdg := _ggcbd.Intercept.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"); _fbfdg != nil {
			return _fbfdg
		}
	}
	if _ggcbd.DispRSqr != nil {
		if _eaafe := _ggcbd.DispRSqr.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0052\u0053\u0071r"); _eaafe != nil {
			return _eaafe
		}
	}
	if _ggcbd.DispEq != nil {
		if _cfbaa := _ggcbd.DispEq.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0045\u0071"); _cfbaa != nil {
			return _cfbaa
		}
	}
	if _ggcbd.TrendlineLbl != nil {
		if _gfbaa := _ggcbd.TrendlineLbl.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"); _gfbaa != nil {
			return _gfbaa
		}
	}
	if _ggcbd.ExtLst != nil {
		if _cdcd := _ggcbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdcd != nil {
			return _cdcd
		}
	}
	return nil
}

type CT_ScatterChart struct {
	ScatterStyle *CT_ScatterStyle
	VaryColors   *CT_Boolean
	Ser          []*CT_ScatterSer
	DLbls        *CT_DLbls
	AxId         []*CT_UnsignedInt
	ExtLst       *CT_ExtensionList
}

func (_dbdf *CT_SplitType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _ceccf := range start.Attr {
		if _ceccf.Name.Local == "\u0076\u0061\u006c" {
			_dbdf.ValAttr.UnmarshalXMLAttr(_ceccf)
			continue
		}
	}
	for {
		_bbcdd, _bgccc := d.Token()
		if _bgccc != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0070l\u0069\u0074\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _bgccc)
		}
		if _bcagc, _fabc := _bbcdd.(_c.EndElement); _fabc && _bcagc.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_AxDataSource and its children
func (_fcb *CT_AxDataSource) Validate() error {
	return _fcb.ValidateWithPath("\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}
func (_gccd *CT_ChartSpace) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gccd.Chart = NewCT_Chart()
_agbab:
	for {
		_dged, _bce := d.Token()
		if _bce != nil {
			return _bce
		}
		switch _fedf := _dged.(type) {
		case _c.StartElement:
			switch _fedf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_gccd.Date1904 = NewCT_Boolean()
				if _dffb := d.DecodeElement(_gccd.Date1904, &_fedf); _dffb != nil {
					return _dffb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_gccd.Lang = NewCT_TextLanguageID()
				if _acc := d.DecodeElement(_gccd.Lang, &_fedf); _acc != nil {
					return _acc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_gccd.RoundedCorners = NewCT_Boolean()
				if _ebef := d.DecodeElement(_gccd.RoundedCorners, &_fedf); _ebef != nil {
					return _ebef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_gccd.Style = NewCT_Style()
				if _aede := d.DecodeElement(_gccd.Style, &_fedf); _aede != nil {
					return _aede
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_gccd.ClrMapOvr = _d.NewCT_ColorMapping()
				if _bfgb := d.DecodeElement(_gccd.ClrMapOvr, &_fedf); _bfgb != nil {
					return _bfgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_gccd.PivotSource = NewCT_PivotSource()
				if _ccbbf := d.DecodeElement(_gccd.PivotSource, &_fedf); _ccbbf != nil {
					return _ccbbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_gccd.Protection = NewCT_Protection()
				if _bbga := d.DecodeElement(_gccd.Protection, &_fedf); _bbga != nil {
					return _bbga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _gbbc := d.DecodeElement(_gccd.Chart, &_fedf); _gbbc != nil {
					return _gbbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gccd.SpPr = _d.NewCT_ShapeProperties()
				if _fbce := d.DecodeElement(_gccd.SpPr, &_fedf); _fbce != nil {
					return _fbce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gccd.TxPr = _d.NewCT_TextBody()
				if _fcgfc := d.DecodeElement(_gccd.TxPr, &_fedf); _fcgfc != nil {
					return _fcgfc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_gccd.ExternalData = NewCT_ExternalData()
				if _eagc := d.DecodeElement(_gccd.ExternalData, &_fedf); _eagc != nil {
					return _eagc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_gccd.PrintSettings = NewCT_PrintSettings()
				if _bece := d.DecodeElement(_gccd.PrintSettings, &_fedf); _bece != nil {
					return _bece
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_gccd.UserShapes = NewCT_RelId()
				if _bgdf := d.DecodeElement(_gccd.UserShapes, &_fedf); _bgdf != nil {
					return _bgdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gccd.ExtLst = NewCT_ExtensionList()
				if _bebb := d.DecodeElement(_gccd.ExtLst, &_fedf); _bebb != nil {
					return _bebb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065 \u0025\u0076", _fedf.Name)
				if _cfg := d.Skip(); _cfg != nil {
					return _cfg
				}
			}
		case _c.EndElement:
			break _agbab
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_LegendEntryData and its children, prefixing error messages with path
func (_eafdd *EG_LegendEntryData) ValidateWithPath(path string) error {
	if _eafdd.TxPr != nil {
		if _ceaca := _eafdd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ceaca != nil {
			return _ceaca
		}
	}
	return nil
}

type CT_LineChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	Marker     *CT_Boolean
	Smooth     *CT_Boolean
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_DepthPercent and its children
func (_aece *CT_DepthPercent) Validate() error {
	return _aece.ValidateWithPath("\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func (_edgd ST_TickLblPos) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_dbbbg := _c.Attr{}
	_dbbbg.Name = name
	switch _edgd {
	case ST_TickLblPosUnset:
		_dbbbg.Value = ""
	case ST_TickLblPosHigh:
		_dbbbg.Value = "\u0068\u0069\u0067\u0068"
	case ST_TickLblPosLow:
		_dbbbg.Value = "\u006c\u006f\u0077"
	case ST_TickLblPosNextTo:
		_dbbbg.Value = "\u006e\u0065\u0078\u0074\u0054\u006f"
	case ST_TickLblPosNone:
		_dbbbg.Value = "\u006e\u006f\u006e\u0065"
	}
	return _dbbbg, nil
}

type CT_Surface3DChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

func (_bbfcd *CT_PlotAreaChoice1) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bbfcd.ValAx != nil {
		_cced := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0076\u0061\u006c\u0041\u0078"}}
		for _, _agded := range _bbfcd.ValAx {
			e.EncodeElement(_agded, _cced)
		}
	}
	if _bbfcd.CatAx != nil {
		_cecfd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0061\u0074\u0041\u0078"}}
		for _, _bdad := range _bbfcd.CatAx {
			e.EncodeElement(_bdad, _cecfd)
		}
	}
	if _bbfcd.DateAx != nil {
		_ffeaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0041\u0078"}}
		for _, _beacc := range _bbfcd.DateAx {
			e.EncodeElement(_beacc, _ffeaf)
		}
	}
	if _bbfcd.SerAx != nil {
		_cceee := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0065\u0072\u0041\u0078"}}
		for _, _fbceb := range _bbfcd.SerAx {
			e.EncodeElement(_fbceb, _cceee)
		}
	}
	return nil
}
func (_gbcb *CT_DispBlanksAs) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _gbcb.ValAttr != ST_DispBlanksAsUnset {
		_gcfb, _bcab := _gbcb.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _bcab != nil {
			return _bcab
		}
		start.Attr = append(start.Attr, _gcfb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TextLanguageID and its children, prefixing error messages with path
func (_ebaga *CT_TextLanguageID) ValidateWithPath(path string) error { return nil }
func (_gdfe *CT_BuiltInUnit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _gdfe.ValAttr != ST_BuiltInUnitUnset {
		_ccg, _aff := _gdfe.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _aff != nil {
			return _aff
		}
		start.Attr = append(start.Attr, _ccg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Lvl and its children
func (_fgbb *CT_Lvl) Validate() error {
	return _fgbb.ValidateWithPath("\u0043\u0054\u005f\u004c\u0076\u006c")
}
func (_edeec ST_PictureFormat) String() string {
	switch _edeec {
	case 0:
		return ""
	case 1:
		return "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	case 3:
		return "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return ""
}

// Validate validates the CT_CatAx and its children
func (_fcfc *CT_CatAx) Validate() error {
	return _fcfc.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078")
}
func (_dced *CT_RelId) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dfdba := range start.Attr {
		if _dfdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dfdba.Name.Local == "\u0069\u0064" || _dfdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dfdba.Name.Local == "\u0069\u0064" {
			_bcbd, _bffbc := _dfdba.Value, error(nil)
			if _bffbc != nil {
				return _bffbc
			}
			_dced.IdAttr = _bcbd
			continue
		}
	}
	for {
		_cebd, _ecbe := d.Token()
		if _ecbe != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fR\u0065\u006c\u0049\u0064: \u0025\u0073", _ecbe)
		}
		if _fdggd, _baagf := _cebd.(_c.EndElement); _baagf && _fdggd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eddc *CT_ErrBarType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _eddc.ValAttr != ST_ErrBarTypeUnset {
		_feceg, _dgab := _eddc.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _dgab != nil {
			return _dgab
		}
		start.Attr = append(start.Attr, _feceg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_Style struct{ ValAttr uint8 }

func (_aabbfe ST_BuiltInUnit) ValidateWithPath(path string) error {
	switch _aabbfe {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aabbfe))
	}
	return nil
}

type CT_SerAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	ExtLst         *CT_ExtensionList
}

func (_cdeag *CT_OfPieType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _adce := range start.Attr {
		if _adce.Name.Local == "\u0076\u0061\u006c" {
			_cdeag.ValAttr.UnmarshalXMLAttr(_adce)
			continue
		}
	}
	for {
		_cgcb, _gead := d.Token()
		if _gead != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0066P\u0069\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _gead)
		}
		if _dgggf, _abcbe := _cgcb.(_c.EndElement); _abcbe && _dgggf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ScatterStyle and its children
func (_cadgg *CT_ScatterStyle) Validate() error {
	return _cadgg.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065")
}
func (_dfgbe ST_ErrDir) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_dfgbe.String(), start)
}
func (_egbea *ST_DispBlanksAs) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_caaee, _dfce := d.Token()
	if _dfce != nil {
		return _dfce
	}
	if _egabfb, _cfefb := _caaee.(_c.EndElement); _cfefb && _egabfb.Name == start.Name {
		*_egbea = 1
		return nil
	}
	if _ddfeg, _badeg := _caaee.(_c.CharData); !_badeg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _caaee)
	} else {
		switch string(_ddfeg) {
		case "":
			*_egbea = 0
		case "\u0073\u0070\u0061\u006e":
			*_egbea = 1
		case "\u0067\u0061\u0070":
			*_egbea = 2
		case "\u007a\u0065\u0072\u006f":
			*_egbea = 3
		}
	}
	_caaee, _dfce = d.Token()
	if _dfce != nil {
		return _dfce
	}
	if _acbg, _fdffe := _caaee.(_c.EndElement); _fdffe && _acbg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _caaee)
}

// Validate validates the CT_LegendPos and its children
func (_bgbaa *CT_LegendPos) Validate() error {
	return _bgbaa.ValidateWithPath("\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073")
}
func (_feebd ST_ErrDir) Validate() error { return _feebd.ValidateWithPath("") }

// Validate validates the CT_PivotFmt and its children
func (_ccabc *CT_PivotFmt) Validate() error {
	return _ccabc.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074")
}
func (_ffca *CT_AxPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_adb, _dba := _ffca.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _dba != nil {
		return _dba
	}
	start.Attr = append(start.Attr, _adb)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_Line3DChart() *CT_Line3DChart {
	_accb := &CT_Line3DChart{}
	_accb.Grouping = NewCT_Grouping()
	return _accb
}
func (_beggc ST_DepthPercent) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _beggc.ST_DepthPercentWithSymbol != nil {
		e.EncodeToken(_c.CharData(*_beggc.ST_DepthPercentWithSymbol))
	}
	if _beggc.ST_DepthPercentUShort != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_beggc.ST_DepthPercentUShort)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}

// Validate validates the CT_Title and its children
func (_eabg *CT_Title) Validate() error {
	return _eabg.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065")
}
func (_dfaec *CT_TickMark) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _fagdc := range start.Attr {
		if _fagdc.Name.Local == "\u0076\u0061\u006c" {
			_dfaec.ValAttr.UnmarshalXMLAttr(_fagdc)
			continue
		}
	}
	for {
		_cbge, _dbdb := d.Token()
		if _dbdb != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0073", _dbdb)
		}
		if _daccd, _bbcdg := _cbge.(_c.EndElement); _bbcdg && _daccd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fgcg *CT_DLblsChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bddac:
	for {
		_cfabc, _dbae := d.Token()
		if _dbae != nil {
			return _dbae
		}
		switch _deee := _cfabc.(type) {
		case _c.StartElement:
			switch _deee.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fgcg.Delete = NewCT_Boolean()
				if _cggb := d.DecodeElement(_fgcg.Delete, &_deee); _cggb != nil {
					return _cggb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fgcg.NumFmt = NewCT_NumFmt()
				if _ggd := d.DecodeElement(_fgcg.NumFmt, &_deee); _ggd != nil {
					return _ggd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fgcg.SpPr = _d.NewCT_ShapeProperties()
				if _gcaef := d.DecodeElement(_fgcg.SpPr, &_deee); _gcaef != nil {
					return _gcaef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fgcg.TxPr = _d.NewCT_TextBody()
				if _fgabc := d.DecodeElement(_fgcg.TxPr, &_deee); _fgabc != nil {
					return _fgabc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_fgcg.DLblPos = NewCT_DLblPos()
				if _fgcb := d.DecodeElement(_fgcg.DLblPos, &_deee); _fgcb != nil {
					return _fgcb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_fgcg.ShowLegendKey = NewCT_Boolean()
				if _cgec := d.DecodeElement(_fgcg.ShowLegendKey, &_deee); _cgec != nil {
					return _cgec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_fgcg.ShowVal = NewCT_Boolean()
				if _dggf := d.DecodeElement(_fgcg.ShowVal, &_deee); _dggf != nil {
					return _dggf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_fgcg.ShowCatName = NewCT_Boolean()
				if _eggd := d.DecodeElement(_fgcg.ShowCatName, &_deee); _eggd != nil {
					return _eggd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_fgcg.ShowSerName = NewCT_Boolean()
				if _cedg := d.DecodeElement(_fgcg.ShowSerName, &_deee); _cedg != nil {
					return _cedg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_fgcg.ShowPercent = NewCT_Boolean()
				if _cegcg := d.DecodeElement(_fgcg.ShowPercent, &_deee); _cegcg != nil {
					return _cegcg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_fgcg.ShowBubbleSize = NewCT_Boolean()
				if _adgaa := d.DecodeElement(_fgcg.ShowBubbleSize, &_deee); _adgaa != nil {
					return _adgaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_fgcg.Separator = new(string)
				if _gdgf := d.DecodeElement(_fgcg.Separator, &_deee); _gdgf != nil {
					return _gdgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_fgcg.ShowLeaderLines = NewCT_Boolean()
				if _bbcc := d.DecodeElement(_fgcg.ShowLeaderLines, &_deee); _bbcc != nil {
					return _bbcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_fgcg.LeaderLines = NewCT_ChartLines()
				if _ggaf := d.DecodeElement(_fgcg.LeaderLines, &_deee); _ggaf != nil {
					return _ggaf
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _deee.Name)
				if _fafg := d.Skip(); _fafg != nil {
					return _fafg
				}
			}
		case _c.EndElement:
			break _bddac
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Chart and its children
func (_ddced *CT_Chart) Validate() error {
	return _ddced.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074")
}

type Chart struct{ CT_RelId }

// Validate validates the CT_PrintSettings and its children
func (_bcdg *CT_PrintSettings) Validate() error {
	return _bcdg.ValidateWithPath("\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073")
}

type CT_PlotAreaChoice struct {
	AreaChart      *CT_AreaChart
	Area3DChart    *CT_Area3DChart
	LineChart      *CT_LineChart
	Line3DChart    *CT_Line3DChart
	StockChart     *CT_StockChart
	RadarChart     *CT_RadarChart
	ScatterChart   *CT_ScatterChart
	PieChart       *CT_PieChart
	Pie3DChart     *CT_Pie3DChart
	DoughnutChart  *CT_DoughnutChart
	BarChart       *CT_BarChart
	Bar3DChart     *CT_Bar3DChart
	OfPieChart     *CT_OfPieChart
	SurfaceChart   *CT_SurfaceChart
	Surface3DChart *CT_Surface3DChart
	BubbleChart    *CT_BubbleChart
}

func (_efbee ST_Crosses) String() string {
	switch _efbee {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case 2:
		return "\u006d\u0061\u0078"
	case 3:
		return "\u006d\u0069\u006e"
	}
	return ""
}

// Validate validates the CT_RelId and its children
func (_dcaec *CT_RelId) Validate() error {
	return _dcaec.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064")
}
func (_dgff *CT_ChartLines) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_eff:
	for {
		_dgb, _cdbc := d.Token()
		if _cdbc != nil {
			return _cdbc
		}
		switch _gcgcg := _dgb.(type) {
		case _c.StartElement:
			switch _gcgcg.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dgff.SpPr = _d.NewCT_ShapeProperties()
				if _cdcb := d.DecodeElement(_dgff.SpPr, &_gcgcg); _cdcb != nil {
					return _cdcb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073 \u0025\u0076", _gcgcg.Name)
				if _gbc := d.Skip(); _gbc != nil {
					return _gbc
				}
			}
		case _c.EndElement:
			break _eff
		case _c.CharData:
		}
	}
	return nil
}
func (_ffcca *EG_AxSharedChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ffcca.Crosses != nil {
		_bbgb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0065s"}}
		e.EncodeElement(_ffcca.Crosses, _bbgb)
	}
	if _ffcca.CrossesAt != nil {
		_ebdd := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0063\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"}}
		e.EncodeElement(_ffcca.CrossesAt, _ebdd)
	}
	return nil
}
func (_effec ST_SizeRepresents) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_effec.String(), start)
}
func (_caag *CT_GapAmount) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _caag.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_caag.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ErrBarTypeUnset ST_ErrBarType = 0
	ST_ErrBarTypeBoth  ST_ErrBarType = 1
	ST_ErrBarTypeMinus ST_ErrBarType = 2
	ST_ErrBarTypePlus  ST_ErrBarType = 3
)

// ValidateWithPath validates the CT_AxDataSource and its children, prefixing error messages with path
func (_bda *CT_AxDataSource) ValidateWithPath(path string) error {
	if _bfcc := _bda.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _bfcc != nil {
		return _bfcc
	}
	return nil
}
func NewCT_DPt() *CT_DPt { _bbf := &CT_DPt{}; _bbf.Idx = NewCT_UnsignedInt(); return _bbf }

// ValidateWithPath validates the CT_Perspective and its children, prefixing error messages with path
func (_bbgf *CT_Perspective) ValidateWithPath(path string) error {
	if _bbgf.ValAttr != nil {
		if *_bbgf.ValAttr < 0 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bbgf.ValAttr)
		}
		if *_bbgf.ValAttr > 240 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0034\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_bbgf.ValAttr)
		}
	}
	return nil
}
func NewCT_CustSplit() *CT_CustSplit          { _fbd := &CT_CustSplit{}; return _fbd }
func (_fefdc ST_Orientation) Validate() error { return _fefdc.ValidateWithPath("") }

// Validate validates the CT_Crosses and its children
func (_dggb *CT_Crosses) Validate() error {
	return _dggb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073")
}
func (_babd *CT_ScatterChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_babd.ScatterStyle = NewCT_ScatterStyle()
_eadc:
	for {
		_agdcf, _aefdc := d.Token()
		if _aefdc != nil {
			return _aefdc
		}
		switch _dabb := _agdcf.(type) {
		case _c.StartElement:
			switch _dabb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _bccb := d.DecodeElement(_babd.ScatterStyle, &_dabb); _bccb != nil {
					return _bccb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_babd.VaryColors = NewCT_Boolean()
				if _gffbf := d.DecodeElement(_babd.VaryColors, &_dabb); _gffbf != nil {
					return _gffbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_decdf := NewCT_ScatterSer()
				if _eeag := d.DecodeElement(_decdf, &_dabb); _eeag != nil {
					return _eeag
				}
				_babd.Ser = append(_babd.Ser, _decdf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_babd.DLbls = NewCT_DLbls()
				if _ddac := d.DecodeElement(_babd.DLbls, &_dabb); _ddac != nil {
					return _ddac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cfecg := NewCT_UnsignedInt()
				if _cbgca := d.DecodeElement(_cfecg, &_dabb); _cbgca != nil {
					return _cbgca
				}
				_babd.AxId = append(_babd.AxId, _cfecg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_babd.ExtLst = NewCT_ExtensionList()
				if _cega := d.DecodeElement(_babd.ExtLst, &_dabb); _cega != nil {
					return _cega
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _dabb.Name)
				if _fbcbc := d.Skip(); _fbcbc != nil {
					return _fbcbc
				}
			}
		case _c.EndElement:
			break _eadc
		case _c.CharData:
		}
	}
	return nil
}
func (_gadac *CT_TickLblPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bcddc := range start.Attr {
		if _bcddc.Name.Local == "\u0076\u0061\u006c" {
			_gadac.ValAttr.UnmarshalXMLAttr(_bcddc)
			continue
		}
	}
	for {
		_gaddb, _ccbec := d.Token()
		if _ccbec != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0054i\u0063k\u004cb\u006c\u0050\u006f\u0073\u003a\u0020\u0025s", _ccbec)
		}
		if _dccfa, _acbcc := _gaddb.(_c.EndElement); _acbcc && _dccfa.Name == start.Name {
			break
		}
	}
	return nil
}
func NewEG_SerShared() *EG_SerShared {
	_afaed := &EG_SerShared{}
	_afaed.Idx = NewCT_UnsignedInt()
	_afaed.Order = NewCT_UnsignedInt()
	return _afaed
}

// Validate validates the CT_DLblsChoice and its children
func (_ccdd *CT_DLblsChoice) Validate() error {
	return _ccdd.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043h\u006f\u0069\u0063\u0065")
}
func (_beedfd *CT_Title) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_adge:
	for {
		_bdeef, _fffd := d.Token()
		if _fffd != nil {
			return _fffd
		}
		switch _fbfgc := _bdeef.(type) {
		case _c.StartElement:
			switch _fbfgc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_beedfd.Tx = NewCT_Tx()
				if _gggc := d.DecodeElement(_beedfd.Tx, &_fbfgc); _gggc != nil {
					return _gggc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_beedfd.Layout = NewCT_Layout()
				if _gdea := d.DecodeElement(_beedfd.Layout, &_fbfgc); _gdea != nil {
					return _gdea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_beedfd.Overlay = NewCT_Boolean()
				if _efgcc := d.DecodeElement(_beedfd.Overlay, &_fbfgc); _efgcc != nil {
					return _efgcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_beedfd.SpPr = _d.NewCT_ShapeProperties()
				if _cccdc := d.DecodeElement(_beedfd.SpPr, &_fbfgc); _cccdc != nil {
					return _cccdc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_beedfd.TxPr = _d.NewCT_TextBody()
				if _baece := d.DecodeElement(_beedfd.TxPr, &_fbfgc); _baece != nil {
					return _baece
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_beedfd.ExtLst = NewCT_ExtensionList()
				if _gegb := d.DecodeElement(_beedfd.ExtLst, &_fbfgc); _gegb != nil {
					return _gegb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065\u0020\u0025\u0076", _fbfgc.Name)
				if _cadgc := d.Skip(); _cadgc != nil {
					return _cadgc
				}
			}
		case _c.EndElement:
			break _adge
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Chart() *CT_Chart { _fecf := &CT_Chart{}; _fecf.PlotArea = NewCT_PlotArea(); return _fecf }

// Validate validates the CT_Tx and its children
func (_agee *CT_Tx) Validate() error { return _agee.ValidateWithPath("\u0043\u0054\u005fT\u0078") }

// ValidateWithPath validates the EG_BarChartShared and its children, prefixing error messages with path
func (_fbcdc *EG_BarChartShared) ValidateWithPath(path string) error {
	if _dagfaa := _fbcdc.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _dagfaa != nil {
		return _dagfaa
	}
	if _fbcdc.Grouping != nil {
		if _gcfbdd := _fbcdc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _gcfbdd != nil {
			return _gcfbdd
		}
	}
	if _fbcdc.VaryColors != nil {
		if _acfad := _fbcdc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _acfad != nil {
			return _acfad
		}
	}
	for _abacd, _fcgeb := range _fbcdc.Ser {
		if _dfdcc := _fcgeb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _abacd)); _dfdcc != nil {
			return _dfdcc
		}
	}
	if _fbcdc.DLbls != nil {
		if _bbddg := _fbcdc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bbddg != nil {
			return _bbddg
		}
	}
	return nil
}
func NewCT_AxisUnit() *CT_AxisUnit { _eeb := &CT_AxisUnit{}; _eeb.ValAttr = 0 + 1; return _eeb }
func (_ecaed *CT_Pie3DChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _ecaed.VaryColors != nil {
		_gfceba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ecaed.VaryColors, _gfceba)
	}
	if _ecaed.Ser != nil {
		_aagcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _edfge := range _ecaed.Ser {
			e.EncodeElement(_edfge, _aagcg)
		}
	}
	if _ecaed.DLbls != nil {
		_gbcbc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ecaed.DLbls, _gbcbc)
	}
	if _ecaed.ExtLst != nil {
		_bcacb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ecaed.ExtLst, _bcacb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dfee *CT_Shape) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dfee.ValAttr != ST_ShapeUnset {
		_dbaa, _afbbg := _dfee.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _afbbg != nil {
			return _afbbg
		}
		start.Attr = append(start.Attr, _dbaa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_AxisUnit and its children
func (_fad *CT_AxisUnit) Validate() error {
	return _fad.ValidateWithPath("C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074")
}

type CT_PieSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_d.CT_ShapeProperties
	Explosion *CT_UnsignedInt
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	ExtLst    *CT_ExtensionList
}

// Validate validates the CT_Orientation and its children
func (_agdcb *CT_Orientation) Validate() error {
	return _agdcb.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_ScatterSer and its children, prefixing error messages with path
func (_bedgc *CT_ScatterSer) ValidateWithPath(path string) error {
	if _cfbega := _bedgc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cfbega != nil {
		return _cfbega
	}
	if _bfbdc := _bedgc.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _bfbdc != nil {
		return _bfbdc
	}
	if _bedgc.Tx != nil {
		if _febcb := _bedgc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _febcb != nil {
			return _febcb
		}
	}
	if _bedgc.SpPr != nil {
		if _bgcag := _bedgc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bgcag != nil {
			return _bgcag
		}
	}
	if _bedgc.Marker != nil {
		if _dbdce := _bedgc.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _dbdce != nil {
			return _dbdce
		}
	}
	for _bgcfg, _gdda := range _bedgc.DPt {
		if _gageg := _gdda.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _bgcfg)); _gageg != nil {
			return _gageg
		}
	}
	if _bedgc.DLbls != nil {
		if _dcedc := _bedgc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dcedc != nil {
			return _dcedc
		}
	}
	for _dgedc, _caec := range _bedgc.Trendline {
		if _eddd := _caec.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _dgedc)); _eddd != nil {
			return _eddd
		}
	}
	for _cage, _acdaf := range _bedgc.ErrBars {
		if _affca := _acdaf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _cage)); _affca != nil {
			return _affca
		}
	}
	if _bedgc.XVal != nil {
		if _dgfdb := _bedgc.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _dgfdb != nil {
			return _dgfdb
		}
	}
	if _bedgc.YVal != nil {
		if _fbeae := _bedgc.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _fbeae != nil {
			return _fbeae
		}
	}
	if _bedgc.Smooth != nil {
		if _gaaa := _bedgc.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _gaaa != nil {
			return _gaaa
		}
	}
	if _bedgc.ExtLst != nil {
		if _acfg := _bedgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acfg != nil {
			return _acfg
		}
	}
	return nil
}
func NewEG_LineChartShared() *EG_LineChartShared {
	_gceec := &EG_LineChartShared{}
	_gceec.Grouping = NewCT_Grouping()
	return _gceec
}
func (_fbcbb *CT_UpDownBar) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fbcbb.SpPr != nil {
		_cgfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbcbb.SpPr, _cgfd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ffcb *CT_ExtensionList) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_feegc:
	for {
		_bgbda, _eeaa := d.Token()
		if _eeaa != nil {
			return _eeaa
		}
		switch _efgc := _bgbda.(type) {
		case _c.StartElement:
			switch _efgc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}:
				_ebge := NewCT_Extension()
				if _deac := d.DecodeElement(_ebge, &_efgc); _deac != nil {
					return _deac
				}
				_ffcb.Ext = append(_ffcb.Ext, _ebge)
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _efgc.Name)
				if _bfdc := d.Skip(); _bfdc != nil {
					return _bfdc
				}
			}
		case _c.EndElement:
			break _feegc
		case _c.CharData:
		}
	}
	return nil
}
func (_dee *CT_AreaChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dee.Grouping != nil {
		_bg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_dee.Grouping, _bg)
	}
	if _dee.VaryColors != nil {
		_bge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dee.VaryColors, _bge)
	}
	if _dee.Ser != nil {
		_abg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gcg := range _dee.Ser {
			e.EncodeElement(_gcg, _abg)
		}
	}
	if _dee.DLbls != nil {
		_fce := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dee.DLbls, _fce)
	}
	if _dee.DropLines != nil {
		_ddc := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dee.DropLines, _ddc)
	}
	_ea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _cad := range _dee.AxId {
		e.EncodeElement(_cad, _ea)
	}
	if _dee.ExtLst != nil {
		_bfcb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dee.ExtLst, _bfcb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_aebc ST_TickMark) ValidateWithPath(path string) error {
	switch _aebc {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aebc))
	}
	return nil
}
func NewCT_PageSetup() *CT_PageSetup { _ddgfb := &CT_PageSetup{}; return _ddgfb }

type ST_Shape byte
type CT_NumDataSourceChoice struct {
	NumRef *CT_NumRef
	NumLit *CT_NumData
}

func (_babcb ST_Overlap) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _babcb.ST_OverlapPercent != nil {
		e.EncodeToken(_c.CharData(*_babcb.ST_OverlapPercent))
	}
	if _babcb.ST_OverlapByte != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_babcb.ST_OverlapByte)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}

type CT_Extension struct {
	UriAttr *string
	Any     _cf.Any
}

// ValidateWithPath validates the CT_StrData and its children, prefixing error messages with path
func (_fddg *CT_StrData) ValidateWithPath(path string) error {
	if _fddg.PtCount != nil {
		if _cdgeg := _fddg.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _cdgeg != nil {
			return _cdgeg
		}
	}
	for _gdfda, _cgcde := range _fddg.Pt {
		if _bbffd := _cgcde.ValidateWithPath(_aa.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _gdfda)); _bbffd != nil {
			return _bbffd
		}
	}
	if _fddg.ExtLst != nil {
		if _dddbb := _fddg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dddbb != nil {
			return _dddbb
		}
	}
	return nil
}

// Validate validates the CT_Legend and its children
func (_dafa *CT_Legend) Validate() error {
	return _dafa.ValidateWithPath("\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed")
}
func (_dcffbb ST_HPercent) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dcffbb.ST_HPercentWithSymbol != nil {
		e.EncodeToken(_c.CharData(*_dcffbb.ST_HPercentWithSymbol))
	}
	if _dcffbb.ST_HPercentUShort != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_dcffbb.ST_HPercentUShort)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}
func NewCT_LegendEntryChoice() *CT_LegendEntryChoice {
	_bccee := &CT_LegendEntryChoice{}
	return _bccee
}
func (_accc *CT_DispBlanksAs) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _beda := range start.Attr {
		if _beda.Name.Local == "\u0076\u0061\u006c" {
			_accc.ValAttr.UnmarshalXMLAttr(_beda)
			continue
		}
	}
	for {
		_fabe, _fdb := d.Token()
		if _fdb != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0042\u006ca\u006e\u006b\u0073A\u0073:\u0020\u0025\u0073", _fdb)
		}
		if _dcde, _cdbcc := _fabe.(_c.EndElement); _cdbcc && _dcde.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gbcg ST_CrossBetween) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gefcgg := _c.Attr{}
	_gefcgg.Name = name
	switch _gbcg {
	case ST_CrossBetweenUnset:
		_gefcgg.Value = ""
	case ST_CrossBetweenBetween:
		_gefcgg.Value = "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case ST_CrossBetweenMidCat:
		_gefcgg.Value = "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return _gefcgg, nil
}
func (_fdaa *CT_BarSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_daea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fdaa.Idx, _daea)
	_dfg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_fdaa.Order, _dfg)
	if _fdaa.Tx != nil {
		_fcef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fdaa.Tx, _fcef)
	}
	if _fdaa.SpPr != nil {
		_cebe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fdaa.SpPr, _cebe)
	}
	if _fdaa.InvertIfNegative != nil {
		_ffcf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_fdaa.InvertIfNegative, _ffcf)
	}
	if _fdaa.PictureOptions != nil {
		_ddgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_fdaa.PictureOptions, _ddgg)
	}
	if _fdaa.DPt != nil {
		_fddb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _fgg := range _fdaa.DPt {
			e.EncodeElement(_fgg, _fddb)
		}
	}
	if _fdaa.DLbls != nil {
		_baag := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fdaa.DLbls, _baag)
	}
	if _fdaa.Trendline != nil {
		_aec := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _fbea := range _fdaa.Trendline {
			e.EncodeElement(_fbea, _aec)
		}
	}
	if _fdaa.ErrBars != nil {
		_dadb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_fdaa.ErrBars, _dadb)
	}
	if _fdaa.Cat != nil {
		_cea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_fdaa.Cat, _cea)
	}
	if _fdaa.Val != nil {
		_deb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_fdaa.Val, _deb)
	}
	if _fdaa.Shape != nil {
		_acgg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_fdaa.Shape, _acgg)
	}
	if _fdaa.ExtLst != nil {
		_daga := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fdaa.ExtLst, _daga)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_CrossBetween struct{ ValAttr ST_CrossBetween }

func (_efeac ST_PageSetupOrientation) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_efeac.String(), start)
}
func (_adcfb *ST_TickLblPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_adedde, _deebe := d.Token()
	if _deebe != nil {
		return _deebe
	}
	if _bgagaf, _edaeb := _adedde.(_c.EndElement); _edaeb && _bgagaf.Name == start.Name {
		*_adcfb = 1
		return nil
	}
	if _ceef, _afeaa := _adedde.(_c.CharData); !_afeaa {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _adedde)
	} else {
		switch string(_ceef) {
		case "":
			*_adcfb = 0
		case "\u0068\u0069\u0067\u0068":
			*_adcfb = 1
		case "\u006c\u006f\u0077":
			*_adcfb = 2
		case "\u006e\u0065\u0078\u0074\u0054\u006f":
			*_adcfb = 3
		case "\u006e\u006f\u006e\u0065":
			*_adcfb = 4
		}
	}
	_adedde, _deebe = d.Token()
	if _deebe != nil {
		return _deebe
	}
	if _bafdd, _gcagf := _adedde.(_c.EndElement); _gcagf && _bafdd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _adedde)
}

// Validate validates the CT_BarChart and its children
func (_becc *CT_BarChart) Validate() error {
	return _becc.ValidateWithPath("C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_gfff ST_ErrValType) String() string {
	switch _gfff {
	case 0:
		return ""
	case 1:
		return "\u0063\u0075\u0073\u0074"
	case 2:
		return "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 3:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case 4:
		return "\u0073\u0074\u0064\u0044\u0065\u0076"
	case 5:
		return "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return ""
}
func (_agba *CT_BuiltInUnit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _ebee := range start.Attr {
		if _ebee.Name.Local == "\u0076\u0061\u006c" {
			_agba.ValAttr.UnmarshalXMLAttr(_ebee)
			continue
		}
	}
	for {
		_dbgb, _ageb := d.Token()
		if _ageb != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074:\u0020\u0025\u0073", _ageb)
		}
		if _cadf, _abgb := _dbgb.(_c.EndElement); _abgb && _cadf.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MarkerStyle and its children, prefixing error messages with path
func (_ggged *CT_MarkerStyle) ValidateWithPath(path string) error {
	if _ggged.ValAttr == ST_MarkerStyleUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bbgaf := _ggged.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbgaf != nil {
		return _bbgaf
	}
	return nil
}

type ST_CrossBetween byte

func (_eeaeg *CT_UnsignedInt) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _eeaeg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fcfcc *CT_DLbls) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fcfcc.DLbl != nil {
		_bcbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		for _, _cgddc := range _fcfcc.DLbl {
			e.EncodeElement(_cgddc, _bcbc)
		}
	}
	if _fcfcc.Choice != nil {
		_fcfcc.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _fcfcc.ExtLst != nil {
		_cdeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcfcc.ExtLst, _cdeg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fcfdb ST_MarkerStyle) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_fcfdb.String(), start)
}
func (_ebbeb *ST_Grouping) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_deagad, _afgbc := d.Token()
	if _afgbc != nil {
		return _afgbc
	}
	if _cfaed, _ccgcf := _deagad.(_c.EndElement); _ccgcf && _cfaed.Name == start.Name {
		*_ebbeb = 1
		return nil
	}
	if _bacdc, _dgfe := _deagad.(_c.CharData); !_dgfe {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _deagad)
	} else {
		switch string(_bacdc) {
		case "":
			*_ebbeb = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_ebbeb = 1
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_ebbeb = 2
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_ebbeb = 3
		}
	}
	_deagad, _afgbc = d.Token()
	if _afgbc != nil {
		return _afgbc
	}
	if _cffgf, _gacaaf := _deagad.(_c.EndElement); _gacaaf && _cffgf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _deagad)
}

// ValidateWithPath validates the Chart and its children, prefixing error messages with path
func (_dggbf *Chart) ValidateWithPath(path string) error {
	if _bgagd := _dggbf.CT_RelId.ValidateWithPath(path); _bgagd != nil {
		return _bgagd
	}
	return nil
}

var ST_HoleSizePercentPatternRe = _a.MustCompile(ST_HoleSizePercentPattern)

func (_ceaacg ST_MarkerStyle) String() string {
	switch _ceaacg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0069\u0072\u0063\u006c\u0065"
	case 2:
		return "\u0064\u0061\u0073\u0068"
	case 3:
		return "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case 4:
		return "\u0064\u006f\u0074"
	case 5:
		return "\u006e\u006f\u006e\u0065"
	case 6:
		return "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case 7:
		return "\u0070\u006c\u0075\u0073"
	case 8:
		return "\u0073\u0071\u0075\u0061\u0072\u0065"
	case 9:
		return "\u0073\u0074\u0061\u0072"
	case 10:
		return "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case 11:
		return "\u0078"
	case 12:
		return "\u0061\u0075\u0074\u006f"
	}
	return ""
}

type ChartSpace struct{ CT_ChartSpace }

func (_afbae ST_TimeUnit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_afbae.String(), start)
}
func NewCT_DLblChoice() *CT_DLblChoice { _ceeb := &CT_DLblChoice{}; return _ceeb }
func (_gdcdd *CT_MarkerSize) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _gdcdd.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_gdcdd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_StrVal and its children
func (_eegbcf *CT_StrVal) Validate() error {
	return _eegbcf.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l")
}
func NewCT_RotX() *CT_RotX { _afebc := &CT_RotX{}; return _afebc }
func (_fcfcb *CT_Surface) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fcfcb.Thickness != nil {
		_aabdb := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0074\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"}}
		e.EncodeElement(_fcfcb.Thickness, _aabdb)
	}
	if _fcfcb.SpPr != nil {
		_fbdgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fcfcb.SpPr, _fbdgf)
	}
	if _fcfcb.PictureOptions != nil {
		_afadb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_fcfcb.PictureOptions, _afadb)
	}
	if _fcfcb.ExtLst != nil {
		_ccacd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcfcb.ExtLst, _ccacd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TrendlineTypeUnset     ST_TrendlineType = 0
	ST_TrendlineTypeExp       ST_TrendlineType = 1
	ST_TrendlineTypeLinear    ST_TrendlineType = 2
	ST_TrendlineTypeLog       ST_TrendlineType = 3
	ST_TrendlineTypeMovingAvg ST_TrendlineType = 4
	ST_TrendlineTypePoly      ST_TrendlineType = 5
	ST_TrendlineTypePower     ST_TrendlineType = 6
)

func (_dcfdc *CT_MultiLvlStrData) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dcfdc.PtCount != nil {
		_fbfgb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_dcfdc.PtCount, _fbfgb)
	}
	if _dcfdc.Lvl != nil {
		_gaeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006cv\u006c"}}
		for _, _cbbad := range _dcfdc.Lvl {
			e.EncodeElement(_cbbad, _gaeb)
		}
	}
	if _dcfdc.ExtLst != nil {
		_decc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcfdc.ExtLst, _decc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LogBase and its children
func (_dgbd *CT_LogBase) Validate() error {
	return _dgbd.ValidateWithPath("\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065")
}
func (_dgba *CT_ErrValType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _ggff := range start.Attr {
		if _ggff.Name.Local == "\u0076\u0061\u006c" {
			_dgba.ValAttr.UnmarshalXMLAttr(_ggff)
			continue
		}
	}
	for {
		_eadb, _afad := d.Token()
		if _afad != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072V\u0061l\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _afad)
		}
		if _ffcfg, _bbbg := _eadb.(_c.EndElement); _bbbg && _ffcfg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CustSplit and its children, prefixing error messages with path
func (_cegd *CT_CustSplit) ValidateWithPath(path string) error {
	for _gfee, _gbbce := range _cegd.SecondPiePt {
		if _aaabc := _gbbce.ValidateWithPath(_aa.Sprintf("\u0025s\u002fS\u0065\u0063\u006f\u006e\u0064P\u0069\u0065P\u0074\u005b\u0025\u0064\u005d", path, _gfee)); _aaabc != nil {
			return _aaabc
		}
	}
	return nil
}
func (_fdaed ST_TimeUnit) String() string {
	switch _fdaed {
	case 0:
		return ""
	case 1:
		return "\u0064\u0061\u0079\u0073"
	case 2:
		return "\u006d\u006f\u006e\u0074\u0068\u0073"
	case 3:
		return "\u0079\u0065\u0061r\u0073"
	}
	return ""
}
func (_dgga *CT_StrData) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dgga.PtCount != nil {
		_cdecg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_dgga.PtCount, _cdecg)
	}
	if _dgga.Pt != nil {
		_cfaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _fcbcf := range _dgga.Pt {
			e.EncodeElement(_fcbcf, _cfaf)
		}
	}
	if _dgga.ExtLst != nil {
		_cdabe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgga.ExtLst, _cdabe)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type ST_AxPos byte

func NewCT_NumDataSource() *CT_NumDataSource {
	_cfbeg := &CT_NumDataSource{}
	_cfbeg.Choice = NewCT_NumDataSourceChoice()
	return _cfbeg
}
func (_fcdgb *CT_StockChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_fdgce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
	for _, _fbefe := range _fcdgb.Ser {
		e.EncodeElement(_fbefe, _fdgce)
	}
	if _fcdgb.DLbls != nil {
		_aaecf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fcdgb.DLbls, _aaecf)
	}
	if _fcdgb.DropLines != nil {
		_gffgf := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fcdgb.DropLines, _gffgf)
	}
	if _fcdgb.HiLowLines != nil {
		_fffgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fcdgb.HiLowLines, _fffgg)
	}
	if _fcdgb.UpDownBars != nil {
		_gbccd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_fcdgb.UpDownBars, _gbccd)
	}
	_beef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _efbfbc := range _fcdgb.AxId {
		e.EncodeElement(_efbfbc, _beef)
	}
	if _fcdgb.ExtLst != nil {
		_eaecf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcdgb.ExtLst, _eaecf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_aacbd *CT_RadarSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_gcaac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_aacbd.Idx, _gcaac)
	_cdgb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_aacbd.Order, _cdgb)
	if _aacbd.Tx != nil {
		_beea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_aacbd.Tx, _beea)
	}
	if _aacbd.SpPr != nil {
		_edba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aacbd.SpPr, _edba)
	}
	if _aacbd.Marker != nil {
		_fgee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_aacbd.Marker, _fgee)
	}
	if _aacbd.DPt != nil {
		_feffg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dgdfb := range _aacbd.DPt {
			e.EncodeElement(_dgdfb, _feffg)
		}
	}
	if _aacbd.DLbls != nil {
		_daafg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_aacbd.DLbls, _daafg)
	}
	if _aacbd.Cat != nil {
		_dbcfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_aacbd.Cat, _dbcfd)
	}
	if _aacbd.Val != nil {
		_egcff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_aacbd.Val, _egcff)
	}
	if _aacbd.ExtLst != nil {
		_bcfba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aacbd.ExtLst, _bcfba)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dbgg ST_ErrValType) Validate() error { return _dbgg.ValidateWithPath("") }

const (
	ST_CrossBetweenUnset   ST_CrossBetween = 0
	ST_CrossBetweenBetween ST_CrossBetween = 1
	ST_CrossBetweenMidCat  ST_CrossBetween = 2
)

// ValidateWithPath validates the CT_Surface and its children, prefixing error messages with path
func (_ffge *CT_Surface) ValidateWithPath(path string) error {
	if _ffge.Thickness != nil {
		if _cgfce := _ffge.Thickness.ValidateWithPath(path + "\u002f\u0054\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"); _cgfce != nil {
			return _cgfce
		}
	}
	if _ffge.SpPr != nil {
		if _aaecfd := _ffge.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aaecfd != nil {
			return _aaecfd
		}
	}
	if _ffge.PictureOptions != nil {
		if _cfdgf := _ffge.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _cfdgf != nil {
			return _cfdgf
		}
	}
	if _ffge.ExtLst != nil {
		if _gdeg := _ffge.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gdeg != nil {
			return _gdeg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BubbleChart and its children, prefixing error messages with path
func (_gefc *CT_BubbleChart) ValidateWithPath(path string) error {
	if _gefc.VaryColors != nil {
		if _cac := _gefc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cac != nil {
			return _cac
		}
	}
	for _dccf, _adfc := range _gefc.Ser {
		if _ccfa := _adfc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dccf)); _ccfa != nil {
			return _ccfa
		}
	}
	if _gefc.DLbls != nil {
		if _fgd := _gefc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fgd != nil {
			return _fgd
		}
	}
	if _gefc.Bubble3D != nil {
		if _efb := _gefc.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _efb != nil {
			return _efb
		}
	}
	if _gefc.BubbleScale != nil {
		if _bfba := _gefc.BubbleScale.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"); _bfba != nil {
			return _bfba
		}
	}
	if _gefc.ShowNegBubbles != nil {
		if _cab := _gefc.ShowNegBubbles.ValidateWithPath(path + "\u002fS\u0068o\u0077\u004e\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"); _cab != nil {
			return _cab
		}
	}
	if _gefc.SizeRepresents != nil {
		if _fadc := _gefc.SizeRepresents.ValidateWithPath(path + "\u002fS\u0069z\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"); _fadc != nil {
			return _fadc
		}
	}
	for _dcff, _ced := range _gefc.AxId {
		if _fbf := _ced.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dcff)); _fbf != nil {
			return _fbf
		}
	}
	if _gefc.ExtLst != nil {
		if _gbde := _gefc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbde != nil {
			return _gbde
		}
	}
	return nil
}
func (_abgbd *CT_DispUnits) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _abgbd.Choice != nil {
		_abgbd.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _abgbd.DispUnitsLbl != nil {
		_gbab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069t\u0073\u004c\u0062\u006c"}}
		e.EncodeElement(_abgbd.DispUnitsLbl, _gbab)
	}
	if _abgbd.ExtLst != nil {
		_ccbdd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abgbd.ExtLst, _ccbdd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_GapAmount(s string) (ST_GapAmount, error) {
	if ST_GapAmountPercentPatternRe.MatchString(s) {
		return ST_GapAmount{ST_GapAmountPercent: &s}, nil
	}
	_egacc, _eceff := _e.ParseUint(s, 10, 16)
	if _eceff != nil {
		return ST_GapAmount{}, _eceff
	}
	_fccdd := uint16(_egacc)
	return ST_GapAmount{ST_GapAmountUShort: &_fccdd}, nil
}
func (_fdage *CT_HoleSize) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fdage.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_fdage.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cbca *EG_BarChartShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cbca.BarDir = NewCT_BarDir()
_faabdb:
	for {
		_cbgbc, _gaagb := d.Token()
		if _gaagb != nil {
			return _gaagb
		}
		switch _cgcgga := _cbgbc.(type) {
		case _c.StartElement:
			switch _cgcgga.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _cafae := d.DecodeElement(_cbca.BarDir, &_cgcgga); _cafae != nil {
					return _cafae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_cbca.Grouping = NewCT_BarGrouping()
				if _dadgcb := d.DecodeElement(_cbca.Grouping, &_cgcgga); _dadgcb != nil {
					return _dadgcb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbca.VaryColors = NewCT_Boolean()
				if _efafd := d.DecodeElement(_cbca.VaryColors, &_cgcgga); _efafd != nil {
					return _efafd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fgce := NewCT_BarSer()
				if _eagfe := d.DecodeElement(_fgce, &_cgcgga); _eagfe != nil {
					return _eagfe
				}
				_cbca.Ser = append(_cbca.Ser, _fgce)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbca.DLbls = NewCT_DLbls()
				if _bdffd := d.DecodeElement(_cbca.DLbls, &_cgcgga); _bdffd != nil {
					return _bdffd
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cgcgga.Name)
				if _ebbdb := d.Skip(); _ebbdb != nil {
					return _ebbdb
				}
			}
		case _c.EndElement:
			break _faabdb
		case _c.CharData:
		}
	}
	return nil
}
func (_fbgda *ST_Crosses) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cbcdc, _bdccd := d.Token()
	if _bdccd != nil {
		return _bdccd
	}
	if _eegcbb, _gbgdd := _cbcdc.(_c.EndElement); _gbgdd && _eegcbb.Name == start.Name {
		*_fbgda = 1
		return nil
	}
	if _aeaa, _acbca := _cbcdc.(_c.CharData); !_acbca {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cbcdc)
	} else {
		switch string(_aeaa) {
		case "":
			*_fbgda = 0
		case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
			*_fbgda = 1
		case "\u006d\u0061\u0078":
			*_fbgda = 2
		case "\u006d\u0069\u006e":
			*_fbgda = 3
		}
	}
	_cbcdc, _bdccd = d.Token()
	if _bdccd != nil {
		return _bdccd
	}
	if _ccbee, _afddg := _cbcdc.(_c.EndElement); _afddg && _ccbee.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cbcdc)
}
func (_fbfgfg *EG_DLblShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fbfgfg.NumFmt != nil {
		_bfdde := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fbfgfg.NumFmt, _bfdde)
	}
	if _fbfgfg.SpPr != nil {
		_bdcgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbfgfg.SpPr, _bdcgb)
	}
	if _fbfgfg.TxPr != nil {
		_bgcdg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fbfgfg.TxPr, _bgcdg)
	}
	if _fbfgfg.DLblPos != nil {
		_aaeed := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_fbfgfg.DLblPos, _aaeed)
	}
	if _fbfgfg.ShowLegendKey != nil {
		_dgbgd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_fbfgfg.ShowLegendKey, _dgbgd)
	}
	if _fbfgfg.ShowVal != nil {
		_begef := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_fbfgfg.ShowVal, _begef)
	}
	if _fbfgfg.ShowCatName != nil {
		_ggdgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fbfgfg.ShowCatName, _ggdgf)
	}
	if _fbfgfg.ShowSerName != nil {
		_ecdbg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fbfgfg.ShowSerName, _ecdbg)
	}
	if _fbfgfg.ShowPercent != nil {
		_bcede := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_fbfgfg.ShowPercent, _bcede)
	}
	if _fbfgfg.ShowBubbleSize != nil {
		_ceebf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_fbfgfg.ShowBubbleSize, _ceebf)
	}
	if _fbfgfg.Separator != nil {
		_egefe := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_cf.AddPreserveSpaceAttr(&_egefe, *_fbfgfg.Separator)
		e.EncodeElement(_fbfgfg.Separator, _egefe)
	}
	return nil
}
func (_cdbbe *CT_PictureOptions) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_badfa:
	for {
		_fbgg, _eefc := d.Token()
		if _eefc != nil {
			return _eefc
		}
		switch _cedd := _fbgg.(type) {
		case _c.StartElement:
			switch _cedd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}:
				_cdbbe.ApplyToFront = NewCT_Boolean()
				if _aagbg := d.DecodeElement(_cdbbe.ApplyToFront, &_cedd); _aagbg != nil {
					return _aagbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}:
				_cdbbe.ApplyToSides = NewCT_Boolean()
				if _bebdb := d.DecodeElement(_cdbbe.ApplyToSides, &_cedd); _bebdb != nil {
					return _bebdb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}:
				_cdbbe.ApplyToEnd = NewCT_Boolean()
				if _fedg := d.DecodeElement(_cdbbe.ApplyToEnd, &_cedd); _fedg != nil {
					return _fedg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}:
				_cdbbe.PictureFormat = NewCT_PictureFormat()
				if _acdad := d.DecodeElement(_cdbbe.PictureFormat, &_cedd); _acdad != nil {
					return _acdad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}:
				_cdbbe.PictureStackUnit = NewCT_PictureStackUnit()
				if _bddd := d.DecodeElement(_cdbbe.PictureStackUnit, &_cedd); _bddd != nil {
					return _bddd
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073\u0020\u0025\u0076", _cedd.Name)
				if _fefde := d.Skip(); _fefde != nil {
					return _fefde
				}
			}
		case _c.EndElement:
			break _badfa
		case _c.CharData:
		}
	}
	return nil
}
func (_fgcaf ST_Grouping) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_fgcaf.String(), start)
}
func (_aacaa ST_SecondPieSize) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _aacaa.ST_SecondPieSizePercent != nil {
		e.EncodeToken(_c.CharData(*_aacaa.ST_SecondPieSizePercent))
	}
	if _aacaa.ST_SecondPieSizeUShort != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_aacaa.ST_SecondPieSizeUShort)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}
func (_bgbg *CT_BandFmt) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bgbg.Idx, _dec)
	if _bgbg.SpPr != nil {
		_bgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bgbg.SpPr, _bgg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gdeba ST_LayoutMode) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_fgfbc := _c.Attr{}
	_fgfbc.Name = name
	switch _gdeba {
	case ST_LayoutModeUnset:
		_fgfbc.Value = ""
	case ST_LayoutModeEdge:
		_fgfbc.Value = "\u0065\u0064\u0067\u0065"
	case ST_LayoutModeFactor:
		_fgfbc.Value = "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return _fgfbc, nil
}

// Validate validates the CT_Trendline and its children
func (_eecgc *CT_Trendline) Validate() error {
	return _eecgc.ValidateWithPath("\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065")
}

// Validate validates the CT_LayoutTarget and its children
func (_fbab *CT_LayoutTarget) Validate() error {
	return _fbab.ValidateWithPath("\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074")
}
func (_ffagc *ST_GapAmount) ValidateWithPath(path string) error {
	_abbeac := []string{}
	if _ffagc.ST_GapAmountPercent != nil {
		_abbeac = append(_abbeac, "\u0053\u0054\u005f\u0047ap\u0041\u006d\u006f\u0075\u006e\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ffagc.ST_GapAmountUShort != nil {
		_abbeac = append(_abbeac, "\u0053T\u005fG\u0061\u0070\u0041\u006d\u006fu\u006e\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_abbeac) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _abbeac)
	}
	return nil
}
func NewCT_NumDataSourceChoice() *CT_NumDataSourceChoice {
	_cdeca := &CT_NumDataSourceChoice{}
	return _cdeca
}
func NewCT_PictureFormat() *CT_PictureFormat {
	_cbddb := &CT_PictureFormat{}
	_cbddb.ValAttr = ST_PictureFormat(1)
	return _cbddb
}
func (_fcdcf *CT_Lvl) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fcdcf.Pt != nil {
		_gaeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _fdbed := range _fcdcf.Pt {
			e.EncodeElement(_fdbed, _gaeg)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_UpDownBar() *CT_UpDownBar { _gaag := &CT_UpDownBar{}; return _gaag }
func (_gdged *EG_PieChartShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _gdged.VaryColors != nil {
		_cacad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gdged.VaryColors, _cacad)
	}
	if _gdged.Ser != nil {
		_cgcggb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gecce := range _gdged.Ser {
			e.EncodeElement(_gecce, _cgcggb)
		}
	}
	if _gdged.DLbls != nil {
		_bbgg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gdged.DLbls, _bbgg)
	}
	return nil
}

// ValidateWithPath validates the CT_DLblChoice and its children, prefixing error messages with path
func (_faa *CT_DLblChoice) ValidateWithPath(path string) error {
	if _faa.Delete != nil {
		if _acda := _faa.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _acda != nil {
			return _acda
		}
	}
	if _faa.Layout != nil {
		if _egda := _faa.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _egda != nil {
			return _egda
		}
	}
	if _faa.Tx != nil {
		if _gfd := _faa.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gfd != nil {
			return _gfd
		}
	}
	if _faa.NumFmt != nil {
		if _cdff := _faa.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cdff != nil {
			return _cdff
		}
	}
	if _faa.SpPr != nil {
		if _babg := _faa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _babg != nil {
			return _babg
		}
	}
	if _faa.TxPr != nil {
		if _bcgc := _faa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bcgc != nil {
			return _bcgc
		}
	}
	if _faa.DLblPos != nil {
		if _eceb := _faa.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _eceb != nil {
			return _eceb
		}
	}
	if _faa.ShowLegendKey != nil {
		if _gaab := _faa.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _gaab != nil {
			return _gaab
		}
	}
	if _faa.ShowVal != nil {
		if _ebed := _faa.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _ebed != nil {
			return _ebed
		}
	}
	if _faa.ShowCatName != nil {
		if _gfaa := _faa.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _gfaa != nil {
			return _gfaa
		}
	}
	if _faa.ShowSerName != nil {
		if _babc := _faa.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _babc != nil {
			return _babc
		}
	}
	if _faa.ShowPercent != nil {
		if _dfdc := _faa.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _dfdc != nil {
			return _dfdc
		}
	}
	if _faa.ShowBubbleSize != nil {
		if _gcgd := _faa.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _gcgd != nil {
			return _gcgd
		}
	}
	return nil
}
func NewCT_UnsignedInt() *CT_UnsignedInt { _gdbcf := &CT_UnsignedInt{}; return _gdbcf }

// Validate validates the CT_RadarStyle and its children
func (_bagaa *CT_RadarStyle) Validate() error {
	return _bagaa.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065")
}
func (_bfbg ST_Shape) String() string {
	switch _bfbg {
	case 0:
		return ""
	case 1:
		return "\u0063\u006f\u006e\u0065"
	case 2:
		return "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case 3:
		return "\u0062\u006f\u0078"
	case 4:
		return "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case 5:
		return "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case 6:
		return "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return ""
}
func NewCT_AreaSer() *CT_AreaSer {
	_dae := &CT_AreaSer{}
	_dae.Idx = NewCT_UnsignedInt()
	_dae.Order = NewCT_UnsignedInt()
	return _dae
}
func ParseUnionST_Overlap(s string) (ST_Overlap, error) {
	if ST_OverlapPercentPatternRe.MatchString(s) {
		return ST_Overlap{ST_OverlapPercent: &s}, nil
	}
	_babbb, _abbeb := _e.ParseInt(s, 10, 8)
	if _abbeb != nil {
		return ST_Overlap{}, _abbeb
	}
	_eafgef := int8(_babbb)
	return ST_Overlap{ST_OverlapByte: &_eafgef}, nil
}
func NewCT_TrendlineLbl() *CT_TrendlineLbl { _gacab := &CT_TrendlineLbl{}; return _gacab }
func (_cdggdd ST_ErrDir) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_baeadg := _c.Attr{}
	_baeadg.Name = name
	switch _cdggdd {
	case ST_ErrDirUnset:
		_baeadg.Value = ""
	case ST_ErrDirX:
		_baeadg.Value = "\u0078"
	case ST_ErrDirY:
		_baeadg.Value = "\u0079"
	}
	return _baeadg, nil
}
func (_eegga ST_Shape) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_cafdf := _c.Attr{}
	_cafdf.Name = name
	switch _eegga {
	case ST_ShapeUnset:
		_cafdf.Value = ""
	case ST_ShapeCone:
		_cafdf.Value = "\u0063\u006f\u006e\u0065"
	case ST_ShapeConeToMax:
		_cafdf.Value = "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case ST_ShapeBox:
		_cafdf.Value = "\u0062\u006f\u0078"
	case ST_ShapeCylinder:
		_cafdf.Value = "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case ST_ShapePyramid:
		_cafdf.Value = "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case ST_ShapePyramidToMax:
		_cafdf.Value = "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return _cafdf, nil
}
func (_ebabd *Group_DLbl) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ebabd.Layout != nil {
		_gebea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_ebabd.Layout, _gebea)
	}
	if _ebabd.Tx != nil {
		_cbgbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ebabd.Tx, _cbgbd)
	}
	if _ebabd.NumFmt != nil {
		_abfge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ebabd.NumFmt, _abfge)
	}
	if _ebabd.SpPr != nil {
		_eaed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebabd.SpPr, _eaed)
	}
	if _ebabd.TxPr != nil {
		_gabed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ebabd.TxPr, _gabed)
	}
	if _ebabd.DLblPos != nil {
		_ccdebc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_ebabd.DLblPos, _ccdebc)
	}
	if _ebabd.ShowLegendKey != nil {
		_cgfeb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_ebabd.ShowLegendKey, _cgfeb)
	}
	if _ebabd.ShowVal != nil {
		_gdbcb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_ebabd.ShowVal, _gdbcb)
	}
	if _ebabd.ShowCatName != nil {
		_dbeec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ebabd.ShowCatName, _dbeec)
	}
	if _ebabd.ShowSerName != nil {
		_ggfdd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ebabd.ShowSerName, _ggfdd)
	}
	if _ebabd.ShowPercent != nil {
		_dgggab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_ebabd.ShowPercent, _dgggab)
	}
	if _ebabd.ShowBubbleSize != nil {
		_cageg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ebabd.ShowBubbleSize, _cageg)
	}
	if _ebabd.Separator != nil {
		_dgggg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_cf.AddPreserveSpaceAttr(&_dgggg, *_ebabd.Separator)
		e.EncodeElement(_ebabd.Separator, _dgggg)
	}
	return nil
}
func (_bbac ST_PictureFormat) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_bbac.String(), start)
}
func _degab(_baacg bool) uint8 {
	if _baacg {
		return 1
	}
	return 0
}
func (_baacb ST_AxPos) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_bcdbb := _c.Attr{}
	_bcdbb.Name = name
	switch _baacb {
	case ST_AxPosUnset:
		_bcdbb.Value = ""
	case ST_AxPosB:
		_bcdbb.Value = "\u0062"
	case ST_AxPosL:
		_bcdbb.Value = "\u006c"
	case ST_AxPosR:
		_bcdbb.Value = "\u0072"
	case ST_AxPosT:
		_bcdbb.Value = "\u0074"
	}
	return _bcdbb, nil
}

// Validate validates the CT_BubbleScale and its children
func (_gbdaf *CT_BubbleScale) Validate() error {
	return _gbdaf.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065")
}
func (_ceaaf ST_DispBlanksAs) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_ceaaf.String(), start)
}
func (_cfaba ST_LblAlgn) String() string {
	switch _cfaba {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	}
	return ""
}
func NewCT_LineChart() *CT_LineChart {
	_aggga := &CT_LineChart{}
	_aggga.Grouping = NewCT_Grouping()
	return _aggga
}

// ValidateWithPath validates the CT_Legend and its children, prefixing error messages with path
func (_aebe *CT_Legend) ValidateWithPath(path string) error {
	if _aebe.LegendPos != nil {
		if _ccbg := _aebe.LegendPos.ValidateWithPath(path + "\u002f\u004c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"); _ccbg != nil {
			return _ccbg
		}
	}
	for _aabg, _fgcag := range _aebe.LegendEntry {
		if _geffe := _fgcag.ValidateWithPath(_aa.Sprintf("\u0025s\u002fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u005b\u0025\u0064\u005d", path, _aabg)); _geffe != nil {
			return _geffe
		}
	}
	if _aebe.Layout != nil {
		if _fgagb := _aebe.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _fgagb != nil {
			return _fgagb
		}
	}
	if _aebe.Overlay != nil {
		if _ccab := _aebe.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _ccab != nil {
			return _ccab
		}
	}
	if _aebe.SpPr != nil {
		if _effbc := _aebe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _effbc != nil {
			return _effbc
		}
	}
	if _aebe.TxPr != nil {
		if _eafb := _aebe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eafb != nil {
			return _eafb
		}
	}
	if _aebe.ExtLst != nil {
		if _dccb := _aebe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dccb != nil {
			return _dccb
		}
	}
	return nil
}

type CT_AxDataSourceChoice struct {
	MultiLvlStrRef *CT_MultiLvlStrRef
	NumRef         *CT_NumRef
	NumLit         *CT_NumData
	StrRef         *CT_StrRef
	StrLit         *CT_StrData
}

func (_aacdf *CT_TimeUnit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bbcbd := range start.Attr {
		if _bbcbd.Name.Local == "\u0076\u0061\u006c" {
			_aacdf.ValAttr.UnmarshalXMLAttr(_bbcbd)
			continue
		}
	}
	for {
		_egege, _ffcbc := d.Token()
		if _ffcbc != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _ffcbc)
		}
		if _cfgef, _cgcff := _egege.(_c.EndElement); _cgcff && _cfgef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eegdb *ST_LblAlgn) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_eegdb = 0
	case "\u0063\u0074\u0072":
		*_eegdb = 1
	case "\u006c":
		*_eegdb = 2
	case "\u0072":
		*_eegdb = 3
	}
	return nil
}
func (_ecffa *CT_LineChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ecffa.Grouping = NewCT_Grouping()
_agccc:
	for {
		_ebbe, _cdfb := d.Token()
		if _cdfb != nil {
			return _cdfb
		}
		switch _afeb := _ebbe.(type) {
		case _c.StartElement:
			switch _afeb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _daee := d.DecodeElement(_ecffa.Grouping, &_afeb); _daee != nil {
					return _daee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ecffa.VaryColors = NewCT_Boolean()
				if _ccaba := d.DecodeElement(_ecffa.VaryColors, &_afeb); _ccaba != nil {
					return _ccaba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_edecf := NewCT_LineSer()
				if _efbfbb := d.DecodeElement(_edecf, &_afeb); _efbfbb != nil {
					return _efbfbb
				}
				_ecffa.Ser = append(_ecffa.Ser, _edecf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ecffa.DLbls = NewCT_DLbls()
				if _addfg := d.DecodeElement(_ecffa.DLbls, &_afeb); _addfg != nil {
					return _addfg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_ecffa.DropLines = NewCT_ChartLines()
				if _ecad := d.DecodeElement(_ecffa.DropLines, &_afeb); _ecad != nil {
					return _ecad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_ecffa.HiLowLines = NewCT_ChartLines()
				if _geae := d.DecodeElement(_ecffa.HiLowLines, &_afeb); _geae != nil {
					return _geae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_ecffa.UpDownBars = NewCT_UpDownBars()
				if _cffa := d.DecodeElement(_ecffa.UpDownBars, &_afeb); _cffa != nil {
					return _cffa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_ecffa.Marker = NewCT_Boolean()
				if _cbbd := d.DecodeElement(_ecffa.Marker, &_afeb); _cbbd != nil {
					return _cbbd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_ecffa.Smooth = NewCT_Boolean()
				if _ffeaa := d.DecodeElement(_ecffa.Smooth, &_afeb); _ffeaa != nil {
					return _ffeaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fbad := NewCT_UnsignedInt()
				if _bcdc := d.DecodeElement(_fbad, &_afeb); _bcdc != nil {
					return _bcdc
				}
				_ecffa.AxId = append(_ecffa.AxId, _fbad)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecffa.ExtLst = NewCT_ExtensionList()
				if _gdgaa := d.DecodeElement(_ecffa.ExtLst, &_afeb); _gdgaa != nil {
					return _gdgaa
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_L\u0069\u006ee\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _afeb.Name)
				if _efecbb := d.Skip(); _efecbb != nil {
					return _efecbb
				}
			}
		case _c.EndElement:
			break _agccc
		case _c.CharData:
		}
	}
	return nil
}

type EG_AxSharedChoice struct {
	Crosses   *CT_Crosses
	CrossesAt *CT_Double
}

func NewCT_DLblsChoice() *CT_DLblsChoice { _efbf := &CT_DLblsChoice{}; return _efbf }
func (_agedgc *ST_ErrBarType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ggbda, _ageed := d.Token()
	if _ageed != nil {
		return _ageed
	}
	if _fdea, _ggbef := _ggbda.(_c.EndElement); _ggbef && _fdea.Name == start.Name {
		*_agedgc = 1
		return nil
	}
	if _gefb, _cdaba := _ggbda.(_c.CharData); !_cdaba {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggbda)
	} else {
		switch string(_gefb) {
		case "":
			*_agedgc = 0
		case "\u0062\u006f\u0074\u0068":
			*_agedgc = 1
		case "\u006d\u0069\u006eu\u0073":
			*_agedgc = 2
		case "\u0070\u006c\u0075\u0073":
			*_agedgc = 3
		}
	}
	_ggbda, _ageed = d.Token()
	if _ageed != nil {
		return _ageed
	}
	if _edddf, _dccec := _ggbda.(_c.EndElement); _dccec && _edddf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggbda)
}
func (_ecfdg ST_LblAlgn) ValidateWithPath(path string) error {
	switch _ecfdg {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ecfdg))
	}
	return nil
}

type ST_ErrBarType byte
type EG_DLblShared struct {
	NumFmt         *CT_NumFmt
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_cgccfa *CT_TxChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_fddda:
	for {
		_cccg, _ggagf := d.Token()
		if _ggagf != nil {
			return _ggagf
		}
		switch _fcbgd := _cccg.(type) {
		case _c.StartElement:
			switch _fcbgd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cgccfa.StrRef = NewCT_StrRef()
				if _acfac := d.DecodeElement(_cgccfa.StrRef, &_fcbgd); _acfac != nil {
					return _acfac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_cgccfa.Rich = _d.NewCT_TextBody()
				if _gdbcc := d.DecodeElement(_cgccfa.Rich, &_fcbgd); _gdbcc != nil {
					return _gdbcc
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fcbgd.Name)
				if _deeb := d.Skip(); _deeb != nil {
					return _deeb
				}
			}
		case _c.EndElement:
			break _fddda
		case _c.CharData:
		}
	}
	return nil
}

type CT_PictureOptions struct {
	ApplyToFront     *CT_Boolean
	ApplyToSides     *CT_Boolean
	ApplyToEnd       *CT_Boolean
	PictureFormat    *CT_PictureFormat
	PictureStackUnit *CT_PictureStackUnit
}

func (_gcbdg ST_ErrValType) ValidateWithPath(path string) error {
	switch _gcbdg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gcbdg))
	}
	return nil
}
func NewCT_Perspective() *CT_Perspective { _fcga := &CT_Perspective{}; return _fcga }
func NewCT_NumRef() *CT_NumRef           { _dgadbe := &CT_NumRef{}; return _dgadbe }
func NewCT_AxDataSource() *CT_AxDataSource {
	_fefd := &CT_AxDataSource{}
	_fefd.Choice = NewCT_AxDataSourceChoice()
	return _fefd
}
func NewCT_SerAx() *CT_SerAx {
	_gdcdf := &CT_SerAx{}
	_gdcdf.AxId = NewCT_UnsignedInt()
	_gdcdf.Scaling = NewCT_Scaling()
	_gdcdf.AxPos = NewCT_AxPos()
	_gdcdf.CrossAx = NewCT_UnsignedInt()
	return _gdcdf
}
func (_dece ST_TickLblPos) ValidateWithPath(path string) error {
	switch _dece {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dece))
	}
	return nil
}

var ST_SecondPieSizePercentPatternRe = _a.MustCompile(ST_SecondPieSizePercentPattern)

func (_ffccf ST_BarGrouping) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_ebegg := _c.Attr{}
	_ebegg.Name = name
	switch _ffccf {
	case ST_BarGroupingUnset:
		_ebegg.Value = ""
	case ST_BarGroupingPercentStacked:
		_ebegg.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_BarGroupingClustered:
		_ebegg.Value = "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case ST_BarGroupingStandard:
		_ebegg.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_BarGroupingStacked:
		_ebegg.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _ebegg, nil
}
func (_ccfcbd ST_BarDir) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_ccfcbd.String(), start)
}
func (_bbgafb *CT_TickLblPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bbgafb.ValAttr != ST_TickLblPosUnset {
		_faadc, _fbga := _bbgafb.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _fbga != nil {
			return _fbga
		}
		start.Attr = append(start.Attr, _faadc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ggafa ST_LegendPos) ValidateWithPath(path string) error {
	switch _ggafa {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggafa))
	}
	return nil
}
func NewGroup_DLbls() *Group_DLbls { _egbg := &Group_DLbls{}; return _egbg }
func (_gfeee *CT_DispUnits) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_adad:
	for {
		_bdcb, _bbfe := d.Token()
		if _bbfe != nil {
			return _bbfe
		}
		switch _dcba := _bdcb.(type) {
		case _c.StartElement:
			switch _dcba.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_gfeee.Choice = NewCT_DispUnitsChoice()
				if _fedde := d.DecodeElement(&_gfeee.Choice.CustUnit, &_dcba); _fedde != nil {
					return _fedde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_gfeee.Choice = NewCT_DispUnitsChoice()
				if _efdf := d.DecodeElement(&_gfeee.Choice.BuiltInUnit, &_dcba); _efdf != nil {
					return _efdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}:
				_gfeee.DispUnitsLbl = NewCT_DispUnitsLbl()
				if _gbfc := d.DecodeElement(_gfeee.DispUnitsLbl, &_dcba); _gbfc != nil {
					return _gbfc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfeee.ExtLst = NewCT_ExtensionList()
				if _fecea := d.DecodeElement(_gfeee.ExtLst, &_dcba); _fecea != nil {
					return _fecea
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u0020\u0025\u0076", _dcba.Name)
				if _ddgf := d.Skip(); _ddgf != nil {
					return _ddgf
				}
			}
		case _c.EndElement:
			break _adad
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice1 and its children, prefixing error messages with path
func (_eeefa *CT_PlotAreaChoice1) ValidateWithPath(path string) error {
	for _daag, _dfggd := range _eeefa.ValAx {
		if _befg := _dfggd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0078\u005b\u0025\u0064\u005d", path, _daag)); _befg != nil {
			return _befg
		}
	}
	for _fafded, _gceg := range _eeefa.CatAx {
		if _caffc := _gceg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002fC\u0061\u0074\u0041\u0078\u005b\u0025\u0064\u005d", path, _fafded)); _caffc != nil {
			return _caffc
		}
	}
	for _bcdd, _bggb := range _eeefa.DateAx {
		if _cegff := _bggb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0061\u0074\u0065\u0041\u0078\u005b\u0025\u0064\u005d", path, _bcdd)); _cegff != nil {
			return _cegff
		}
	}
	for _dbgd, _fgcde := range _eeefa.SerAx {
		if _bgeb := _fgcde.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002fS\u0065\u0072\u0041\u0078\u005b\u0025\u0064\u005d", path, _dbgd)); _bgeb != nil {
			return _bgeb
		}
	}
	return nil
}

// Validate validates the CT_DLblChoice and its children
func (_fefg *CT_DLblChoice) Validate() error {
	return _fefg.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_Bar3DChart and its children
func (_gccf *CT_Bar3DChart) Validate() error {
	return _gccf.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}
func (_ffgg ST_BubbleScale) String() string {
	if _ffgg.ST_BubbleScalePercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_ffgg.ST_BubbleScalePercent)
	}
	if _ffgg.ST_BubbleScaleUInt != nil {
		return _aa.Sprintf("\u0025\u0076", *_ffgg.ST_BubbleScaleUInt)
	}
	return ""
}
func (_ecggb ST_RadarStyle) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_faedc := _c.Attr{}
	_faedc.Name = name
	switch _ecggb {
	case ST_RadarStyleUnset:
		_faedc.Value = ""
	case ST_RadarStyleStandard:
		_faedc.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_RadarStyleMarker:
		_faedc.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_RadarStyleFilled:
		_faedc.Value = "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return _faedc, nil
}

const (
	ST_ErrDirUnset ST_ErrDir = 0
	ST_ErrDirX     ST_ErrDir = 1
	ST_ErrDirY     ST_ErrDir = 2
)

// Validate validates the CT_DateAx and its children
func (_eede *CT_DateAx) Validate() error {
	return _eede.ValidateWithPath("\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x")
}

// Validate validates the CT_GapAmount and its children
func (_aecgb *CT_GapAmount) Validate() error {
	return _aecgb.ValidateWithPath("\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074")
}
func (_gbdee *EG_LineChartShared) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_daege := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_gbdee.Grouping, _daege)
	if _gbdee.VaryColors != nil {
		_bbaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gbdee.VaryColors, _bbaa)
	}
	if _gbdee.Ser != nil {
		_ccdaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ffdc := range _gbdee.Ser {
			e.EncodeElement(_ffdc, _ccdaf)
		}
	}
	if _gbdee.DLbls != nil {
		_cfcd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gbdee.DLbls, _cfcd)
	}
	if _gbdee.DropLines != nil {
		_fgedc := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gbdee.DropLines, _fgedc)
	}
	return nil
}
func (_fdgdf ST_ErrBarType) String() string {
	switch _fdgdf {
	case 0:
		return ""
	case 1:
		return "\u0062\u006f\u0074\u0068"
	case 2:
		return "\u006d\u0069\u006eu\u0073"
	case 3:
		return "\u0070\u006c\u0075\u0073"
	}
	return ""
}

// ValidateWithPath validates the CT_DispUnitsChoice and its children, prefixing error messages with path
func (_eefff *CT_DispUnitsChoice) ValidateWithPath(path string) error {
	if _eefff.CustUnit != nil {
		if _ffbca := _eefff.CustUnit.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u0055\u006e\u0069t"); _ffbca != nil {
			return _ffbca
		}
	}
	if _eefff.BuiltInUnit != nil {
		if _aecf := _eefff.BuiltInUnit.ValidateWithPath(path + "\u002f\u0042\u0075i\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"); _aecf != nil {
			return _aecf
		}
	}
	return nil
}

const (
	ST_DLblPosUnset   ST_DLblPos = 0
	ST_DLblPosBestFit ST_DLblPos = 1
	ST_DLblPosB       ST_DLblPos = 2
	ST_DLblPosCtr     ST_DLblPos = 3
	ST_DLblPosInBase  ST_DLblPos = 4
	ST_DLblPosInEnd   ST_DLblPos = 5
	ST_DLblPosL       ST_DLblPos = 6
	ST_DLblPosOutEnd  ST_DLblPos = 7
	ST_DLblPosR       ST_DLblPos = 8
	ST_DLblPosT       ST_DLblPos = 9
)

// ValidateWithPath validates the CT_Bar3DChart and its children, prefixing error messages with path
func (_gbef *CT_Bar3DChart) ValidateWithPath(path string) error {
	if _aga := _gbef.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _aga != nil {
		return _aga
	}
	if _gbef.Grouping != nil {
		if _efc := _gbef.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _efc != nil {
			return _efc
		}
	}
	if _gbef.VaryColors != nil {
		if _fecg := _gbef.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fecg != nil {
			return _fecg
		}
	}
	for _gbag, _cff := range _gbef.Ser {
		if _ecf := _cff.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gbag)); _ecf != nil {
			return _ecf
		}
	}
	if _gbef.DLbls != nil {
		if _ddf := _gbef.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ddf != nil {
			return _ddf
		}
	}
	if _gbef.GapWidth != nil {
		if _bgba := _gbef.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _bgba != nil {
			return _bgba
		}
	}
	if _gbef.GapDepth != nil {
		if _gae := _gbef.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _gae != nil {
			return _gae
		}
	}
	if _gbef.Shape != nil {
		if _abae := _gbef.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _abae != nil {
			return _abae
		}
	}
	for _gdg, _ecb := range _gbef.AxId {
		if _eabd := _ecb.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gdg)); _eabd != nil {
			return _eabd
		}
	}
	if _gbef.ExtLst != nil {
		if _agdc := _gbef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agdc != nil {
			return _agdc
		}
	}
	return nil
}
func NewCT_DoughnutChart() *CT_DoughnutChart { _ccfec := &CT_DoughnutChart{}; return _ccfec }
func NewCT_HoleSize() *CT_HoleSize           { _ccaa := &CT_HoleSize{}; return _ccaa }
func (_fbfef ST_Shape) Validate() error      { return _fbfef.ValidateWithPath("") }

// Validate validates the EG_BarChartShared and its children
func (_acceg *EG_BarChartShared) Validate() error {
	return _acceg.ValidateWithPath("\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}
func (_ffeba ST_PictureFormat) Validate() error { return _ffeba.ValidateWithPath("") }
func NewCT_Boolean() *CT_Boolean                { _efca := &CT_Boolean{}; return _efca }

// ValidateWithPath validates the CT_LegendPos and its children, prefixing error messages with path
func (_dbcfc *CT_LegendPos) ValidateWithPath(path string) error {
	if _cfgcc := _dbcfc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfgcc != nil {
		return _cfgcc
	}
	return nil
}

type CT_View3D struct {
	RotX         *CT_RotX
	HPercent     *CT_HPercent
	RotY         *CT_RotY
	DepthPercent *CT_DepthPercent
	RAngAx       *CT_Boolean
	Perspective  *CT_Perspective
	ExtLst       *CT_ExtensionList
}

// ValidateWithPath validates the CT_Title and its children, prefixing error messages with path
func (_baaff *CT_Title) ValidateWithPath(path string) error {
	if _baaff.Tx != nil {
		if _bbdg := _baaff.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bbdg != nil {
			return _bbdg
		}
	}
	if _baaff.Layout != nil {
		if _ebcfa := _baaff.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _ebcfa != nil {
			return _ebcfa
		}
	}
	if _baaff.Overlay != nil {
		if _bdcce := _baaff.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _bdcce != nil {
			return _bdcce
		}
	}
	if _baaff.SpPr != nil {
		if _acff := _baaff.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acff != nil {
			return _acff
		}
	}
	if _baaff.TxPr != nil {
		if _fdacg := _baaff.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fdacg != nil {
			return _fdacg
		}
	}
	if _baaff.ExtLst != nil {
		if _egagb := _baaff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egagb != nil {
			return _egagb
		}
	}
	return nil
}
func NewCT_AxPos() *CT_AxPos { _cba := &CT_AxPos{}; _cba.ValAttr = ST_AxPos(1); return _cba }
func (_fbag ST_OfPieType) String() string {
	switch _fbag {
	case 0:
		return ""
	case 1:
		return "\u0070\u0069\u0065"
	case 2:
		return "\u0062\u0061\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_Chart and its children, prefixing error messages with path
func (_ebgf *CT_Chart) ValidateWithPath(path string) error {
	if _ebgf.Title != nil {
		if _eedcb := _ebgf.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _eedcb != nil {
			return _eedcb
		}
	}
	if _ebgf.AutoTitleDeleted != nil {
		if _gcdgb := _ebgf.AutoTitleDeleted.ValidateWithPath(path + "\u002f\u0041\u0075\u0074\u006f\u0054\u0069\u0074\u006c\u0065\u0044\u0065l\u0065\u0074\u0065\u0064"); _gcdgb != nil {
			return _gcdgb
		}
	}
	if _ebgf.PivotFmts != nil {
		if _eeeb := _ebgf.PivotFmts.ValidateWithPath(path + "\u002f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"); _eeeb != nil {
			return _eeeb
		}
	}
	if _ebgf.View3D != nil {
		if _fecb := _ebgf.View3D.ValidateWithPath(path + "\u002fV\u0069\u0065\u0077\u0033\u0044"); _fecb != nil {
			return _fecb
		}
	}
	if _ebgf.Floor != nil {
		if _gag := _ebgf.Floor.ValidateWithPath(path + "\u002f\u0046\u006c\u006f\u006f\u0072"); _gag != nil {
			return _gag
		}
	}
	if _ebgf.SideWall != nil {
		if _ceea := _ebgf.SideWall.ValidateWithPath(path + "\u002fS\u0069\u0064\u0065\u0057\u0061\u006cl"); _ceea != nil {
			return _ceea
		}
	}
	if _ebgf.BackWall != nil {
		if _aac := _ebgf.BackWall.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0057\u0061\u006cl"); _aac != nil {
			return _aac
		}
	}
	if _bggf := _ebgf.PlotArea.ValidateWithPath(path + "\u002fP\u006c\u006f\u0074\u0041\u0072\u0065a"); _bggf != nil {
		return _bggf
	}
	if _ebgf.Legend != nil {
		if _ebff := _ebgf.Legend.ValidateWithPath(path + "\u002fL\u0065\u0067\u0065\u006e\u0064"); _ebff != nil {
			return _ebff
		}
	}
	if _ebgf.PlotVisOnly != nil {
		if _cdaa := _ebgf.PlotVisOnly.ValidateWithPath(path + "\u002f\u0050\u006co\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"); _cdaa != nil {
			return _cdaa
		}
	}
	if _ebgf.DispBlanksAs != nil {
		if _cacd := _ebgf.DispBlanksAs.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"); _cacd != nil {
			return _cacd
		}
	}
	if _ebgf.ShowDLblsOverMax != nil {
		if _bdag := _ebgf.ShowDLblsOverMax.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0044\u004c\u0062\u006c\u0073\u004f\u0076e\u0072\u004d\u0061\u0078"); _bdag != nil {
			return _bdag
		}
	}
	if _ebgf.ExtLst != nil {
		if _bbb := _ebgf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bbb != nil {
			return _bbb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TimeUnit and its children, prefixing error messages with path
func (_fbcba *CT_TimeUnit) ValidateWithPath(path string) error {
	if _gcedf := _fbcba.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gcedf != nil {
		return _gcedf
	}
	return nil
}

type CT_GapAmount struct{ ValAttr *ST_GapAmount }
type ST_TimeUnit byte

func NewChart() *Chart { _cceg := &Chart{}; _cceg.CT_RelId = *NewCT_RelId(); return _cceg }
func (_afcee *CT_SerAx) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_afcee.AxId = NewCT_UnsignedInt()
	_afcee.Scaling = NewCT_Scaling()
	_afcee.AxPos = NewCT_AxPos()
	_afcee.CrossAx = NewCT_UnsignedInt()
_dfbca:
	for {
		_ffagag, _cfgd := d.Token()
		if _cfgd != nil {
			return _cfgd
		}
		switch _afag := _ffagag.(type) {
		case _c.StartElement:
			switch _afag.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _fbfea := d.DecodeElement(_afcee.AxId, &_afag); _fbfea != nil {
					return _fbfea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _cfdac := d.DecodeElement(_afcee.Scaling, &_afag); _cfdac != nil {
					return _cfdac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_afcee.Delete = NewCT_Boolean()
				if _fbaf := d.DecodeElement(_afcee.Delete, &_afag); _fbaf != nil {
					return _fbaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _gcfa := d.DecodeElement(_afcee.AxPos, &_afag); _gcfa != nil {
					return _gcfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_afcee.MajorGridlines = NewCT_ChartLines()
				if _cbef := d.DecodeElement(_afcee.MajorGridlines, &_afag); _cbef != nil {
					return _cbef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_afcee.MinorGridlines = NewCT_ChartLines()
				if _dffac := d.DecodeElement(_afcee.MinorGridlines, &_afag); _dffac != nil {
					return _dffac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_afcee.Title = NewCT_Title()
				if _feeb := d.DecodeElement(_afcee.Title, &_afag); _feeb != nil {
					return _feeb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_afcee.NumFmt = NewCT_NumFmt()
				if _edfgb := d.DecodeElement(_afcee.NumFmt, &_afag); _edfgb != nil {
					return _edfgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_afcee.MajorTickMark = NewCT_TickMark()
				if _efcga := d.DecodeElement(_afcee.MajorTickMark, &_afag); _efcga != nil {
					return _efcga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_afcee.MinorTickMark = NewCT_TickMark()
				if _ecag := d.DecodeElement(_afcee.MinorTickMark, &_afag); _ecag != nil {
					return _ecag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_afcee.TickLblPos = NewCT_TickLblPos()
				if _eggde := d.DecodeElement(_afcee.TickLblPos, &_afag); _eggde != nil {
					return _eggde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_afcee.SpPr = _d.NewCT_ShapeProperties()
				if _abad := d.DecodeElement(_afcee.SpPr, &_afag); _abad != nil {
					return _abad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_afcee.TxPr = _d.NewCT_TextBody()
				if _edafd := d.DecodeElement(_afcee.TxPr, &_afag); _edafd != nil {
					return _edafd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _caagg := d.DecodeElement(_afcee.CrossAx, &_afag); _caagg != nil {
					return _caagg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_afcee.Choice = NewEG_AxSharedChoice()
				if _egge := d.DecodeElement(&_afcee.Choice.Crosses, &_afag); _egge != nil {
					return _egge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_afcee.Choice = NewEG_AxSharedChoice()
				if _cegcc := d.DecodeElement(&_afcee.Choice.CrossesAt, &_afag); _cegcc != nil {
					return _cegcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_afcee.TickLblSkip = NewCT_Skip()
				if _cfef := d.DecodeElement(_afcee.TickLblSkip, &_afag); _cfef != nil {
					return _cfef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_afcee.TickMarkSkip = NewCT_Skip()
				if _fccfd := d.DecodeElement(_afcee.TickMarkSkip, &_afag); _fccfd != nil {
					return _fccfd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afcee.ExtLst = NewCT_ExtensionList()
				if _ceabc := d.DecodeElement(_afcee.ExtLst, &_afag); _ceabc != nil {
					return _ceabc
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078\u0020\u0025\u0076", _afag.Name)
				if _fbbb := d.Skip(); _fbbb != nil {
					return _fbbb
				}
			}
		case _c.EndElement:
			break _dfbca
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Overlap and its children, prefixing error messages with path
func (_caade *CT_Overlap) ValidateWithPath(path string) error {
	if _caade.ValAttr != nil {
		if _cbeab := _caade.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbeab != nil {
			return _cbeab
		}
	}
	return nil
}

type CT_Legend struct {
	LegendPos   *CT_LegendPos
	LegendEntry []*CT_LegendEntry
	Layout      *CT_Layout
	Overlay     *CT_Boolean
	SpPr        *_d.CT_ShapeProperties
	TxPr        *_d.CT_TextBody
	ExtLst      *CT_ExtensionList
}

func NewCT_DateAx() *CT_DateAx {
	_gdaed := &CT_DateAx{}
	_gdaed.AxId = NewCT_UnsignedInt()
	_gdaed.Scaling = NewCT_Scaling()
	_gdaed.AxPos = NewCT_AxPos()
	_gdaed.CrossAx = NewCT_UnsignedInt()
	return _gdaed
}
func (_bfefaa ST_SplitType) ValidateWithPath(path string) error {
	switch _bfefaa {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfefaa))
	}
	return nil
}
func NewCT_Legend() *CT_Legend { _fgagc := &CT_Legend{}; return _fgagc }
func (_edfff ST_LblAlgn) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_edfff.String(), start)
}

// Validate validates the CT_Surface and its children
func (_afae *CT_Surface) Validate() error {
	return _afae.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065")
}
func (_aae *CT_AxPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_aae.ValAttr = ST_AxPos(1)
	for _, _dgf := range start.Attr {
		if _dgf.Name.Local == "\u0076\u0061\u006c" {
			_aae.ValAttr.UnmarshalXMLAttr(_dgf)
			continue
		}
	}
	for {
		_acd, _bgaf := d.Token()
		if _bgaf != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fA\u0078\u0050\u006f\u0073: \u0025\u0073", _bgaf)
		}
		if _bbc, _bde := _acd.(_c.EndElement); _bde && _bbc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dabd *CT_Period) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dgfg := range start.Attr {
		if _dgfg.Name.Local == "\u0076\u0061\u006c" {
			_fbfgfe, _dfacc := _e.ParseUint(_dgfg.Value, 10, 32)
			if _dfacc != nil {
				return _dfacc
			}
			_gacag := uint32(_fbfgfe)
			_dabd.ValAttr = &_gacag
			continue
		}
	}
	for {
		_egcdbg, _fdcaa := d.Token()
		if _fdcaa != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0050\u0065\u0072i\u006f\u0064\u003a\u0020\u0025\u0073", _fdcaa)
		}
		if _dddgc, _fbbff := _egcdbg.(_c.EndElement); _fbbff && _dddgc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_StrRef struct {
	F        string
	StrCache *CT_StrData
	ExtLst   *CT_ExtensionList
}

func (_gffcb ST_GapAmount) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _gffcb.ST_GapAmountPercent != nil {
		e.EncodeToken(_c.CharData(*_gffcb.ST_GapAmountPercent))
	}
	if _gffcb.ST_GapAmountUShort != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_gffcb.ST_GapAmountUShort)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}

// Validate validates the CT_Line3DChart and its children
func (_eeba *CT_Line3DChart) Validate() error {
	return _eeba.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_Skip and its children, prefixing error messages with path
func (_gcde *CT_Skip) ValidateWithPath(path string) error {
	if _gcde.ValAttr < 1 {
		return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _gcde.ValAttr)
	}
	return nil
}
func (_edad *CT_BandFmts) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ddg:
	for {
		_cfc, _agd := d.Token()
		if _agd != nil {
			return _agd
		}
		switch _dcd := _cfc.(type) {
		case _c.StartElement:
			switch _dcd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}:
				_fccec := NewCT_BandFmt()
				if _dbe := d.DecodeElement(_fccec, &_dcd); _dbe != nil {
					return _dbe
				}
				_edad.BandFmt = append(_edad.BandFmt, _fccec)
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _dcd.Name)
				if _dfc := d.Skip(); _dfc != nil {
					return _dfc
				}
			}
		case _c.EndElement:
			break _ddg
		case _c.CharData:
		}
	}
	return nil
}
func (_agcac ST_BuiltInUnit) String() string {
	switch _agcac {
	case 0:
		return ""
	case 1:
		return "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case 2:
		return "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case 3:
		return "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 4:
		return "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 5:
		return "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 6:
		return "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 7:
		return "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 8:
		return "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 9:
		return "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return ""
}

type CT_PivotSource struct {
	Name   string
	FmtId  *CT_UnsignedInt
	ExtLst []*CT_ExtensionList
}

// Validate validates the CT_BandFmts and its children
func (_beg *CT_BandFmts) Validate() error {
	return _beg.ValidateWithPath("C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073")
}

const (
	ST_LayoutModeUnset  ST_LayoutMode = 0
	ST_LayoutModeEdge   ST_LayoutMode = 1
	ST_LayoutModeFactor ST_LayoutMode = 2
)

func (_gaabf ST_ErrBarType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_gaabf.String(), start)
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_fbec *CT_Shape) ValidateWithPath(path string) error {
	if _defab := _fbec.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _defab != nil {
		return _defab
	}
	return nil
}
func (_eeagb ST_ErrDir) String() string {
	switch _eeagb {
	case 0:
		return ""
	case 1:
		return "\u0078"
	case 2:
		return "\u0079"
	}
	return ""
}
func (_fadd *CT_NumDataSourceChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fadd.NumRef != nil {
		_bgbce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_fadd.NumRef, _bgbce)
	}
	if _fadd.NumLit != nil {
		_gfddg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_fadd.NumLit, _gfddg)
	}
	return nil
}
func NewEG_LegendEntryData() *EG_LegendEntryData { _aeefg := &EG_LegendEntryData{}; return _aeefg }
func (_bdfg *CT_DLblPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_ege, _dada := _bdfg.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _dada != nil {
		return _dada
	}
	start.Attr = append(start.Attr, _ege)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fbeg *CT_StrVal) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0069\u0064\u0078"}, Value: _aa.Sprintf("\u0025\u0076", _fbeg.IdxAttr)})
	e.EncodeToken(start)
	_gdgfc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076"}}
	_cf.AddPreserveSpaceAttr(&_gdgfc, _fbeg.V)
	e.EncodeElement(_fbeg.V, _gdgfc)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_GapAmount and its children, prefixing error messages with path
func (_fcbb *CT_GapAmount) ValidateWithPath(path string) error {
	if _fcbb.ValAttr != nil {
		if _acbbe := _fcbb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acbbe != nil {
			return _acbbe
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BubbleScale and its children, prefixing error messages with path
func (_eeeg *CT_BubbleScale) ValidateWithPath(path string) error {
	if _eeeg.ValAttr != nil {
		if _gafa := _eeeg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gafa != nil {
			return _gafa
		}
	}
	return nil
}
func NewEG_DLblShared() *EG_DLblShared { _fbfgeg := &EG_DLblShared{}; return _fbfgeg }

// Validate validates the CT_PivotSource and its children
func (_gdgea *CT_PivotSource) Validate() error {
	return _gdgea.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065")
}

type ST_RadarStyle byte

// Validate validates the CT_Area3DChart and its children
func (_fa *CT_Area3DChart) Validate() error {
	return _fa.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_AxDataSourceChoice and its children
func (_feg *CT_AxDataSourceChoice) Validate() error {
	return _feg.ValidateWithPath("C\u0054\u005f\u0041\u0078Da\u0074a\u0053\u006f\u0075\u0072\u0063e\u0043\u0068\u006f\u0069\u0063\u0065")
}

type CT_LblAlgn struct{ ValAttr ST_LblAlgn }

func (_cfdbf *CT_TimeUnit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cfdbf.ValAttr != ST_TimeUnitUnset {
		_afbbc, _bdeaa := _cfdbf.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _bdeaa != nil {
			return _bdeaa
		}
		start.Attr = append(start.Attr, _afbbc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gfcefc ST_DLblPos) String() string {
	switch _gfcefc {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u0069\u006e\u0042\u0061\u0073\u0065"
	case 5:
		return "\u0069\u006e\u0045n\u0064"
	case 6:
		return "\u006c"
	case 7:
		return "\u006f\u0075\u0074\u0045\u006e\u0064"
	case 8:
		return "\u0072"
	case 9:
		return "\u0074"
	}
	return ""
}
func (_fgbgg ST_SecondPieSize) String() string {
	if _fgbgg.ST_SecondPieSizePercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_fgbgg.ST_SecondPieSizePercent)
	}
	if _fgbgg.ST_SecondPieSizeUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_fgbgg.ST_SecondPieSizeUShort)
	}
	return ""
}
func NewCT_TickLblPos() *CT_TickLblPos   { _afff := &CT_TickLblPos{}; return _afff }
func NewCT_BarGrouping() *CT_BarGrouping { _gdd := &CT_BarGrouping{}; return _gdd }

// Validate validates the CT_PictureStackUnit and its children
func (_efcg *CT_PictureStackUnit) Validate() error {
	return _efcg.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074")
}
func (_dfadg *CT_PieChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_fgcaa:
	for {
		_gbec, _gfdff := d.Token()
		if _gfdff != nil {
			return _gfdff
		}
		switch _cbbb := _gbec.(type) {
		case _c.StartElement:
			switch _cbbb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dfadg.VaryColors = NewCT_Boolean()
				if _bccf := d.DecodeElement(_dfadg.VaryColors, &_cbbb); _bccf != nil {
					return _bccf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gffbd := NewCT_PieSer()
				if _fcgcc := d.DecodeElement(_gffbd, &_cbbb); _fcgcc != nil {
					return _fcgcc
				}
				_dfadg.Ser = append(_dfadg.Ser, _gffbd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dfadg.DLbls = NewCT_DLbls()
				if _gfbc := d.DecodeElement(_dfadg.DLbls, &_cbbb); _gfbc != nil {
					return _gfbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_dfadg.FirstSliceAng = NewCT_FirstSliceAng()
				if _eedee := d.DecodeElement(_dfadg.FirstSliceAng, &_cbbb); _eedee != nil {
					return _eedee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfadg.ExtLst = NewCT_ExtensionList()
				if _cgddb := d.DecodeElement(_dfadg.ExtLst, &_cbbb); _cgddb != nil {
					return _cgddb
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _cbbb.Name)
				if _ccbbd := d.Skip(); _ccbbd != nil {
					return _ccbbd
				}
			}
		case _c.EndElement:
			break _fgcaa
		case _c.CharData:
		}
	}
	return nil
}
func (_aecfa *CT_UpDownBar) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_effe:
	for {
		_ccbdf, _bcddcg := d.Token()
		if _bcddcg != nil {
			return _bcddcg
		}
		switch _fcefa := _ccbdf.(type) {
		case _c.StartElement:
			switch _fcefa.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aecfa.SpPr = _d.NewCT_ShapeProperties()
				if _eafcf := d.DecodeElement(_aecfa.SpPr, &_fcefa); _eafcf != nil {
					return _eafcf
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_U\u0070\u0044o\u0077\u006e\u0042\u0061\u0072\u0020\u0025\u0076", _fcefa.Name)
				if _acfaa := d.Skip(); _acfaa != nil {
					return _acfaa
				}
			}
		case _c.EndElement:
			break _effe
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the ChartSpace and its children, prefixing error messages with path
func (_dddaed *ChartSpace) ValidateWithPath(path string) error {
	if _dcdae := _dddaed.CT_ChartSpace.ValidateWithPath(path); _dcdae != nil {
		return _dcdae
	}
	return nil
}
func (_dbccd *CT_SerTxChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dbccd.StrRef != nil {
		_deeeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_dbccd.StrRef, _deeeg)
	}
	if _dbccd.V != nil {
		_cdebg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076"}}
		_cf.AddPreserveSpaceAttr(&_cdebg, *_dbccd.V)
		e.EncodeElement(_dbccd.V, _cdebg)
	}
	return nil
}
func (_fgfc *CT_Orientation) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fgfc.ValAttr != ST_OrientationUnset {
		_abfg, _gagf := _fgfc.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _gagf != nil {
			return _gagf
		}
		start.Attr = append(start.Attr, _abfg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DepthPercent and its children, prefixing error messages with path
func (_eafg *CT_DepthPercent) ValidateWithPath(path string) error {
	if _eafg.ValAttr != nil {
		if _fbde := _eafg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fbde != nil {
			return _fbde
		}
	}
	return nil
}
func (_ccfab ST_RadarStyle) String() string {
	switch _ccfab {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 2:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 3:
		return "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return ""
}

type CT_AreaSer struct {
	Idx            *CT_UnsignedInt
	Order          *CT_UnsignedInt
	Tx             *CT_SerTx
	SpPr           *_d.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	DPt            []*CT_DPt
	DLbls          *CT_DLbls
	Trendline      []*CT_Trendline
	ErrBars        []*CT_ErrBars
	Cat            *CT_AxDataSource
	Val            *CT_NumDataSource
	ExtLst         *CT_ExtensionList
}
type CT_DLblsChoice struct {
	Delete          *CT_Boolean
	NumFmt          *CT_NumFmt
	SpPr            *_d.CT_ShapeProperties
	TxPr            *_d.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

func NewCT_PivotSource() *CT_PivotSource {
	_dfdbb := &CT_PivotSource{}
	_dfdbb.FmtId = NewCT_UnsignedInt()
	return _dfdbb
}

type CT_Period struct{ ValAttr *uint32 }

func (_fbdf *CT_PlotAreaChoice1) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_agfbb:
	for {
		_dafg, _bacc := d.Token()
		if _bacc != nil {
			return _bacc
		}
		switch _bddcc := _dafg.(type) {
		case _c.StartElement:
			switch _bddcc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				_ecfd := NewCT_ValAx()
				if _egab := d.DecodeElement(_ecfd, &_bddcc); _egab != nil {
					return _egab
				}
				_fbdf.ValAx = append(_fbdf.ValAx, _ecfd)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				_abdf := NewCT_CatAx()
				if _gccgge := d.DecodeElement(_abdf, &_bddcc); _gccgge != nil {
					return _gccgge
				}
				_fbdf.CatAx = append(_fbdf.CatAx, _abdf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				_gabeg := NewCT_DateAx()
				if _gedfa := d.DecodeElement(_gabeg, &_bddcc); _gedfa != nil {
					return _gedfa
				}
				_fbdf.DateAx = append(_fbdf.DateAx, _gabeg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				_dacga := NewCT_SerAx()
				if _ebbbf := d.DecodeElement(_dacga, &_bddcc); _ebbbf != nil {
					return _ebbbf
				}
				_fbdf.SerAx = append(_fbdf.SerAx, _dacga)
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072e\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u0020\u0025\u0076", _bddcc.Name)
				if _bedc := d.Skip(); _bedc != nil {
					return _bedc
				}
			}
		case _c.EndElement:
			break _agfbb
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_LineSer and its children
func (_becfa *CT_LineSer) Validate() error {
	return _becfa.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072")
}
func NewCT_SerTx() *CT_SerTx {
	_edecb := &CT_SerTx{}
	_edecb.Choice = NewCT_SerTxChoice()
	return _edecb
}

var ST_OverlapPercentPatternRe = _a.MustCompile(ST_OverlapPercentPattern)

// Validate validates the CT_DLbl and its children
func (_bfbd *CT_DLbl) Validate() error {
	return _bfbd.ValidateWithPath("\u0043T\u005f\u0044\u004c\u0062\u006c")
}

// ValidateWithPath validates the CT_LogBase and its children, prefixing error messages with path
func (_aefe *CT_LogBase) ValidateWithPath(path string) error {
	if _aefe.ValAttr < 2 {
		return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _aefe.ValAttr)
	}
	if _aefe.ValAttr > 1000 {
		return _aa.Errorf("\u0025\u0073\u002f\u006d\u002e\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003c\u003d\u00201\u0030\u0030\u0030\u0020\u0028h\u0061\u0076e\u0020\u0025\u0076\u0029", path, _aefe.ValAttr)
	}
	return nil
}

// ValidateWithPath validates the CT_SerTx and its children, prefixing error messages with path
func (_geffd *CT_SerTx) ValidateWithPath(path string) error {
	if _aaca := _geffd.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aaca != nil {
		return _aaca
	}
	return nil
}

// Validate validates the CT_PlotArea and its children
func (_gafe *CT_PlotArea) Validate() error {
	return _gafe.ValidateWithPath("C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061")
}
func (_cecda ST_BuiltInUnit) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_bddfga := _c.Attr{}
	_bddfga.Name = name
	switch _cecda {
	case ST_BuiltInUnitUnset:
		_bddfga.Value = ""
	case ST_BuiltInUnitHundreds:
		_bddfga.Value = "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case ST_BuiltInUnitThousands:
		_bddfga.Value = "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case ST_BuiltInUnitTenThousands:
		_bddfga.Value = "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitHundredThousands:
		_bddfga.Value = "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitMillions:
		_bddfga.Value = "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTenMillions:
		_bddfga.Value = "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitHundredMillions:
		_bddfga.Value = "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitBillions:
		_bddfga.Value = "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTrillions:
		_bddfga.Value = "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return _bddfga, nil
}
func (_agcca *ST_HPercent) ValidateWithPath(path string) error {
	_ebcb := []string{}
	if _agcca.ST_HPercentWithSymbol != nil {
		_ebcb = append(_ebcb, "S\u0054\u005f\u0048\u0050er\u0063e\u006e\u0074\u0057\u0069\u0074h\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	if _agcca.ST_HPercentUShort != nil {
		_ebcb = append(_ebcb, "\u0053\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0055S\u0068\u006f\u0072\u0074")
	}
	if len(_ebcb) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ebcb)
	}
	return nil
}
func (_ggba *CT_SecondPieSize) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ggba.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_ggba.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_CustSplit and its children
func (_cbff *CT_CustSplit) Validate() error {
	return _cbff.ValidateWithPath("\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074")
}
func (_ddee *ST_AxPos) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_ddee = 0
	case "\u0062":
		*_ddee = 1
	case "\u006c":
		*_ddee = 2
	case "\u0072":
		*_ddee = 3
	case "\u0074":
		*_ddee = 4
	}
	return nil
}
func (_ffcg *ChartSpace) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0063h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065"
	return _ffcg.CT_ChartSpace.MarshalXML(e, start)
}

// Validate validates the CT_Perspective and its children
func (_ceccd *CT_Perspective) Validate() error {
	return _ceccd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065")
}

type CT_DLblPos struct{ ValAttr ST_DLblPos }

// ValidateWithPath validates the CT_FirstSliceAng and its children, prefixing error messages with path
func (_cbec *CT_FirstSliceAng) ValidateWithPath(path string) error {
	if _cbec.ValAttr != nil {
		if *_cbec.ValAttr < 0 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_cbec.ValAttr)
		}
		if *_cbec.ValAttr > 360 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_cbec.ValAttr)
		}
	}
	return nil
}
func (_abacde *ST_BarDir) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_eaacg, _eeafd := d.Token()
	if _eeafd != nil {
		return _eeafd
	}
	if _abacdd, _dafff := _eaacg.(_c.EndElement); _dafff && _abacdd.Name == start.Name {
		*_abacde = 1
		return nil
	}
	if _feade, _eebfd := _eaacg.(_c.CharData); !_eebfd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eaacg)
	} else {
		switch string(_feade) {
		case "":
			*_abacde = 0
		case "\u0062\u0061\u0072":
			*_abacde = 1
		case "\u0063\u006f\u006c":
			*_abacde = 2
		}
	}
	_eaacg, _eeafd = d.Token()
	if _eeafd != nil {
		return _eeafd
	}
	if _efcab, _dgdda := _eaacg.(_c.EndElement); _dgdda && _efcab.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eaacg)
}
func (_ebbg *CT_DPt) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ebbg.Idx = NewCT_UnsignedInt()
_edfbf:
	for {
		_gfac, _ebad := d.Token()
		if _ebad != nil {
			return _ebad
		}
		switch _cbab := _gfac.(type) {
		case _c.StartElement:
			switch _cbab.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dbaed := d.DecodeElement(_ebbg.Idx, &_cbab); _dbaed != nil {
					return _dbaed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_ebbg.InvertIfNegative = NewCT_Boolean()
				if _bcfb := d.DecodeElement(_ebbg.InvertIfNegative, &_cbab); _bcfb != nil {
					return _bcfb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_ebbg.Marker = NewCT_Marker()
				if _degbb := d.DecodeElement(_ebbg.Marker, &_cbab); _degbb != nil {
					return _degbb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_ebbg.Bubble3D = NewCT_Boolean()
				if _afdg := d.DecodeElement(_ebbg.Bubble3D, &_cbab); _afdg != nil {
					return _afdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_ebbg.Explosion = NewCT_UnsignedInt()
				if _dcaf := d.DecodeElement(_ebbg.Explosion, &_cbab); _dcaf != nil {
					return _dcaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ebbg.SpPr = _d.NewCT_ShapeProperties()
				if _ebaa := d.DecodeElement(_ebbg.SpPr, &_cbab); _ebaa != nil {
					return _ebaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_ebbg.PictureOptions = NewCT_PictureOptions()
				if _egdb := d.DecodeElement(_ebbg.PictureOptions, &_cbab); _egdb != nil {
					return _egdb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebbg.ExtLst = NewCT_ExtensionList()
				if _fbba := d.DecodeElement(_ebbg.ExtLst, &_cbab); _fbba != nil {
					return _fbba
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0074\u0020\u0025\u0076", _cbab.Name)
				if _dcg := d.Skip(); _dcg != nil {
					return _dcg
				}
			}
		case _c.EndElement:
			break _edfbf
		case _c.CharData:
		}
	}
	return nil
}
func (_ebaca ST_PictureFormat) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_dfcfc := _c.Attr{}
	_dfcfc.Name = name
	switch _ebaca {
	case ST_PictureFormatUnset:
		_dfcfc.Value = ""
	case ST_PictureFormatStretch:
		_dfcfc.Value = "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case ST_PictureFormatStack:
		_dfcfc.Value = "\u0073\u0074\u0061c\u006b"
	case ST_PictureFormatStackScale:
		_dfcfc.Value = "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return _dfcfc, nil
}

// ValidateWithPath validates the CT_SplitType and its children, prefixing error messages with path
func (_bfggb *CT_SplitType) ValidateWithPath(path string) error {
	if _cddb := _bfggb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cddb != nil {
		return _cddb
	}
	return nil
}
func (_dbcf *CT_DispUnitsLbl) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dbcf.Layout != nil {
		_ead := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_dbcf.Layout, _ead)
	}
	if _dbcf.Tx != nil {
		_deec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dbcf.Tx, _deec)
	}
	if _dbcf.SpPr != nil {
		_ccea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dbcf.SpPr, _ccea)
	}
	if _dbcf.TxPr != nil {
		_cfdg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dbcf.TxPr, _cfdg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dcffb *CT_DoughnutChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dcffb.VaryColors != nil {
		_dfga := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dcffb.VaryColors, _dfga)
	}
	if _dcffb.Ser != nil {
		_cfac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _adagg := range _dcffb.Ser {
			e.EncodeElement(_adagg, _cfac)
		}
	}
	if _dcffb.DLbls != nil {
		_ffcc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dcffb.DLbls, _ffcc)
	}
	if _dcffb.FirstSliceAng != nil {
		_abbd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_dcffb.FirstSliceAng, _abbd)
	}
	if _dcffb.HoleSize != nil {
		_dgffd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_dcffb.HoleSize, _dgffd)
	}
	if _dcffb.ExtLst != nil {
		_ecae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcffb.ExtLst, _ecae)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bdbge *ST_ScatterStyle) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cdef, _eeceb := d.Token()
	if _eeceb != nil {
		return _eeceb
	}
	if _ggaef, _gfgcd := _cdef.(_c.EndElement); _gfgcd && _ggaef.Name == start.Name {
		*_bdbge = 1
		return nil
	}
	if _egdbe, _gbdf := _cdef.(_c.CharData); !_gbdf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cdef)
	} else {
		switch string(_egdbe) {
		case "":
			*_bdbge = 0
		case "\u006e\u006f\u006e\u0065":
			*_bdbge = 1
		case "\u006c\u0069\u006e\u0065":
			*_bdbge = 2
		case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
			*_bdbge = 3
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_bdbge = 4
		case "\u0073\u006d\u006f\u006f\u0074\u0068":
			*_bdbge = 5
		case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
			*_bdbge = 6
		}
	}
	_cdef, _eeceb = d.Token()
	if _eeceb != nil {
		return _eeceb
	}
	if _bbadf, _gfbbb := _cdef.(_c.EndElement); _gfbbb && _bbadf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cdef)
}

// ValidateWithPath validates the CT_RadarSer and its children, prefixing error messages with path
func (_fccb *CT_RadarSer) ValidateWithPath(path string) error {
	if _daecb := _fccb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _daecb != nil {
		return _daecb
	}
	if _affeba := _fccb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _affeba != nil {
		return _affeba
	}
	if _fccb.Tx != nil {
		if _fagbc := _fccb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _fagbc != nil {
			return _fagbc
		}
	}
	if _fccb.SpPr != nil {
		if _dbgaf := _fccb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dbgaf != nil {
			return _dbgaf
		}
	}
	if _fccb.Marker != nil {
		if _efdgc := _fccb.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _efdgc != nil {
			return _efdgc
		}
	}
	for _ceag, _ebfe := range _fccb.DPt {
		if _aaegg := _ebfe.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _ceag)); _aaegg != nil {
			return _aaegg
		}
	}
	if _fccb.DLbls != nil {
		if _bffg := _fccb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bffg != nil {
			return _bffg
		}
	}
	if _fccb.Cat != nil {
		if _agga := _fccb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _agga != nil {
			return _agga
		}
	}
	if _fccb.Val != nil {
		if _dcbe := _fccb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _dcbe != nil {
			return _dcbe
		}
	}
	if _fccb.ExtLst != nil {
		if _dccce := _fccb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dccce != nil {
			return _dccce
		}
	}
	return nil
}
func (_eedcbf ST_LayoutTarget) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_eedcbf.String(), start)
}
func (_gdcb *Chart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gdcb.CT_RelId = *NewCT_RelId()
	for _, _cdgfb := range start.Attr {
		if _cdgfb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cdgfb.Name.Local == "\u0069\u0064" || _cdgfb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cdgfb.Name.Local == "\u0069\u0064" {
			_bfgfg, _daffb := _cdgfb.Value, error(nil)
			if _daffb != nil {
				return _daffb
			}
			_gdcb.IdAttr = _bfgfg
			continue
		}
	}
	for {
		_gaeag, _gbedf := d.Token()
		if _gbedf != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0068\u0061\u0072t\u003a\u0020\u0025\u0073", _gbedf)
		}
		if _abgdc, _afeg := _gaeag.(_c.EndElement); _afeg && _abgdc.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_ManualLayout() *CT_ManualLayout { _bcbfd := &CT_ManualLayout{}; return _bcbfd }

// Validate validates the CT_TickLblPos and its children
func (_cgfbb *CT_TickLblPos) Validate() error {
	return _cgfbb.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073")
}
func (_cdgce *CT_Trendline) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _cdgce.Name != nil {
		_efea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
		_cf.AddPreserveSpaceAttr(&_efea, *_cdgce.Name)
		e.EncodeElement(_cdgce.Name, _efea)
	}
	if _cdgce.SpPr != nil {
		_bdbfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cdgce.SpPr, _bdbfa)
	}
	_fbfga := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074r\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_cdgce.TrendlineType, _fbfga)
	if _cdgce.Order != nil {
		_daff := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_cdgce.Order, _daff)
	}
	if _cdgce.Period != nil {
		_fgfcef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0069\u006f\u0064"}}
		e.EncodeElement(_cdgce.Period, _fgfcef)
	}
	if _cdgce.Forward != nil {
		_fbbaeg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0066\u006f\u0072\u0077\u0061\u0072d"}}
		e.EncodeElement(_cdgce.Forward, _fbbaeg)
	}
	if _cdgce.Backward != nil {
		_dfaaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}}
		e.EncodeElement(_cdgce.Backward, _dfaaf)
	}
	if _cdgce.Intercept != nil {
		_adbbb := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0069\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"}}
		e.EncodeElement(_cdgce.Intercept, _adbbb)
	}
	if _cdgce.DispRSqr != nil {
		_ccaaee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}}
		e.EncodeElement(_cdgce.DispRSqr, _ccaaee)
	}
	if _cdgce.DispEq != nil {
		_efcgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0045\u0071"}}
		e.EncodeElement(_cdgce.DispEq, _efcgf)
	}
	if _cdgce.TrendlineLbl != nil {
		_gefe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069n\u0065\u004c\u0062\u006c"}}
		e.EncodeElement(_cdgce.TrendlineLbl, _gefe)
	}
	if _cdgce.ExtLst != nil {
		_dacd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cdgce.ExtLst, _dacd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_ExtensionList() *CT_ExtensionList { _aaad := &CT_ExtensionList{}; return _aaad }

type ST_LblAlgn byte

// Validate validates the CT_Marker and its children
func (_gabee *CT_Marker) Validate() error {
	return _gabee.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}
func (_efged ST_RadarStyle) Validate() error { return _efged.ValidateWithPath("") }

// ValidateWithPath validates the CT_PageSetup and its children, prefixing error messages with path
func (_eegg *CT_PageSetup) ValidateWithPath(path string) error {
	if _eegg.PaperHeightAttr != nil {
		if !_da.ST_PositiveUniversalMeasurePatternRe.MatchString(*_eegg.PaperHeightAttr) {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _da.ST_PositiveUniversalMeasurePatternRe, *_eegg.PaperHeightAttr)
		}
	}
	if _eegg.PaperHeightAttr != nil {
		if !_da.ST_UniversalMeasurePatternRe.MatchString(*_eegg.PaperHeightAttr) {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _da.ST_UniversalMeasurePatternRe, *_eegg.PaperHeightAttr)
		}
	}
	if _eegg.PaperWidthAttr != nil {
		if !_da.ST_PositiveUniversalMeasurePatternRe.MatchString(*_eegg.PaperWidthAttr) {
			return _aa.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _da.ST_PositiveUniversalMeasurePatternRe, *_eegg.PaperWidthAttr)
		}
	}
	if _eegg.PaperWidthAttr != nil {
		if !_da.ST_UniversalMeasurePatternRe.MatchString(*_eegg.PaperWidthAttr) {
			return _aa.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _da.ST_UniversalMeasurePatternRe, *_eegg.PaperWidthAttr)
		}
	}
	if _fdcf := _eegg.OrientationAttr.ValidateWithPath(path + "\u002f\u004fr\u0069\u0065\u006et\u0061\u0074\u0069\u006f\u006e\u0041\u0074\u0074\u0072"); _fdcf != nil {
		return _fdcf
	}
	return nil
}

type CT_Perspective struct{ ValAttr *uint8 }

func (_aaaf ST_ErrDir) ValidateWithPath(path string) error {
	switch _aaaf {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aaaf))
	}
	return nil
}

// ValidateWithPath validates the CT_Order and its children, prefixing error messages with path
func (_bcfgb *CT_Order) ValidateWithPath(path string) error {
	if _bcfgb.ValAttr != nil {
		if *_bcfgb.ValAttr < 2 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bcfgb.ValAttr)
		}
		if *_bcfgb.ValAttr > 6 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0036\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bcfgb.ValAttr)
		}
	}
	return nil
}

type CT_Double struct{ ValAttr float64 }

func (_ffcgc ST_TrendlineType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_ffcgc.String(), start)
}

// Validate validates the CT_AxPos and its children
func (_abd *CT_AxPos) Validate() error {
	return _abd.ValidateWithPath("\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073")
}
func (_fcfabc *ST_BarDir) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_fcfabc = 0
	case "\u0062\u0061\u0072":
		*_fcfabc = 1
	case "\u0063\u006f\u006c":
		*_fcfabc = 2
	}
	return nil
}
func (_cefb *CT_Crosses) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cefb.ValAttr = ST_Crosses(1)
	for _, _dcce := range start.Attr {
		if _dcce.Name.Local == "\u0076\u0061\u006c" {
			_cefb.ValAttr.UnmarshalXMLAttr(_dcce)
			continue
		}
	}
	for {
		_cgddd, _dgaa := d.Token()
		if _dgaa != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u003a\u0020%\u0073", _dgaa)
		}
		if _eggb, _fdge := _cgddd.(_c.EndElement); _fdge && _eggb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ErrBars and its children
func (_bbgc *CT_ErrBars) Validate() error {
	return _bbgc.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073")
}
func (_aggfe ST_BarDir) Validate() error { return _aggfe.ValidateWithPath("") }
func (_dffc *ChartSpace) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dffc.CT_ChartSpace = *NewCT_ChartSpace()
_efcdd:
	for {
		_cfeec, _bgad := d.Token()
		if _bgad != nil {
			return _bgad
		}
		switch _gcdaa := _cfeec.(type) {
		case _c.StartElement:
			switch _gcdaa.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_dffc.Date1904 = NewCT_Boolean()
				if _dbac := d.DecodeElement(_dffc.Date1904, &_gcdaa); _dbac != nil {
					return _dbac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_dffc.Lang = NewCT_TextLanguageID()
				if _defgg := d.DecodeElement(_dffc.Lang, &_gcdaa); _defgg != nil {
					return _defgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_dffc.RoundedCorners = NewCT_Boolean()
				if _fddfd := d.DecodeElement(_dffc.RoundedCorners, &_gcdaa); _fddfd != nil {
					return _fddfd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_dffc.Style = NewCT_Style()
				if _acgdc := d.DecodeElement(_dffc.Style, &_gcdaa); _acgdc != nil {
					return _acgdc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_dffc.ClrMapOvr = _d.NewCT_ColorMapping()
				if _affed := d.DecodeElement(_dffc.ClrMapOvr, &_gcdaa); _affed != nil {
					return _affed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_dffc.PivotSource = NewCT_PivotSource()
				if _dafab := d.DecodeElement(_dffc.PivotSource, &_gcdaa); _dafab != nil {
					return _dafab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_dffc.Protection = NewCT_Protection()
				if _gbgag := d.DecodeElement(_dffc.Protection, &_gcdaa); _gbgag != nil {
					return _gbgag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _ccdae := d.DecodeElement(_dffc.Chart, &_gcdaa); _ccdae != nil {
					return _ccdae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dffc.SpPr = _d.NewCT_ShapeProperties()
				if _cccb := d.DecodeElement(_dffc.SpPr, &_gcdaa); _cccb != nil {
					return _cccb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dffc.TxPr = _d.NewCT_TextBody()
				if _cgbca := d.DecodeElement(_dffc.TxPr, &_gcdaa); _cgbca != nil {
					return _cgbca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_dffc.ExternalData = NewCT_ExternalData()
				if _eaef := d.DecodeElement(_dffc.ExternalData, &_gcdaa); _eaef != nil {
					return _eaef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_dffc.PrintSettings = NewCT_PrintSettings()
				if _acfb := d.DecodeElement(_dffc.PrintSettings, &_gcdaa); _acfb != nil {
					return _acfb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_dffc.UserShapes = NewCT_RelId()
				if _feedf := d.DecodeElement(_dffc.UserShapes, &_gcdaa); _feedf != nil {
					return _feedf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dffc.ExtLst = NewCT_ExtensionList()
				if _gcege := d.DecodeElement(_dffc.ExtLst, &_gcdaa); _gcege != nil {
					return _gcege
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0068\u0061r\u0074\u0053\u0070\u0061\u0063\u0065\u0020\u0025\u0076", _gcdaa.Name)
				if _ffdd := d.Skip(); _ffdd != nil {
					return _ffdd
				}
			}
		case _c.EndElement:
			break _efcdd
		case _c.CharData:
		}
	}
	return nil
}
func (_ffecb *CT_SizeRepresents) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _agdge := range start.Attr {
		if _agdge.Name.Local == "\u0076\u0061\u006c" {
			_ffecb.ValAttr.UnmarshalXMLAttr(_agdge)
			continue
		}
	}
	for {
		_febdd, _cegef := d.Token()
		if _cegef != nil {
			return _aa.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073: \u0025\u0073", _cegef)
		}
		if _beeab, _cdbae := _febdd.(_c.EndElement); _cdbae && _beeab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfbcc ST_TrendlineType) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_cbcbb := _c.Attr{}
	_cbcbb.Name = name
	switch _dfbcc {
	case ST_TrendlineTypeUnset:
		_cbcbb.Value = ""
	case ST_TrendlineTypeExp:
		_cbcbb.Value = "\u0065\u0078\u0070"
	case ST_TrendlineTypeLinear:
		_cbcbb.Value = "\u006c\u0069\u006e\u0065\u0061\u0072"
	case ST_TrendlineTypeLog:
		_cbcbb.Value = "\u006c\u006f\u0067"
	case ST_TrendlineTypeMovingAvg:
		_cbcbb.Value = "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case ST_TrendlineTypePoly:
		_cbcbb.Value = "\u0070\u006f\u006c\u0079"
	case ST_TrendlineTypePower:
		_cbcbb.Value = "\u0070\u006f\u0077e\u0072"
	}
	return _cbcbb, nil
}

// ValidateWithPath validates the CT_CrossBetween and its children, prefixing error messages with path
func (_eded *CT_CrossBetween) ValidateWithPath(path string) error {
	if _eded.ValAttr == ST_CrossBetweenUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bfgg := _eded.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bfgg != nil {
		return _bfgg
	}
	return nil
}
func (_aggfb ST_Crosses) Validate() error { return _aggfb.ValidateWithPath("") }
func (_gecbd *ST_LayoutMode) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bdgcc, _ebfg := d.Token()
	if _ebfg != nil {
		return _ebfg
	}
	if _cffgd, _aegd := _bdgcc.(_c.EndElement); _aegd && _cffgd.Name == start.Name {
		*_gecbd = 1
		return nil
	}
	if _acgb, _fdeba := _bdgcc.(_c.CharData); !_fdeba {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdgcc)
	} else {
		switch string(_acgb) {
		case "":
			*_gecbd = 0
		case "\u0065\u0064\u0067\u0065":
			*_gecbd = 1
		case "\u0066\u0061\u0063\u0074\u006f\u0072":
			*_gecbd = 2
		}
	}
	_bdgcc, _ebfg = d.Token()
	if _ebfg != nil {
		return _ebfg
	}
	if _dedgff, _bbeeg := _bdgcc.(_c.EndElement); _bbeeg && _dedgff.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdgcc)
}
func NewCT_ChartSpace() *CT_ChartSpace {
	_ddeg := &CT_ChartSpace{}
	_ddeg.Chart = NewCT_Chart()
	return _ddeg
}

// ST_SecondPieSize is a union type
type ST_SecondPieSize struct {
	ST_SecondPieSizePercent *string
	ST_SecondPieSizeUShort  *uint16
}

// Validate validates the CT_NumRef and its children
func (_feed *CT_NumRef) Validate() error {
	return _feed.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f")
}
func (_bbgaee ST_AxPos) ValidateWithPath(path string) error {
	switch _bbgaee {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbgaee))
	}
	return nil
}
func (_abdg *CT_NumRef) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_cdcbe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066"}}
	_cf.AddPreserveSpaceAttr(&_cdcbe, _abdg.F)
	e.EncodeElement(_abdg.F, _cdcbe)
	if _abdg.NumCache != nil {
		_ceab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_abdg.NumCache, _ceab)
	}
	if _abdg.ExtLst != nil {
		_bbbgc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abdg.ExtLst, _bbbgc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fecgf *CT_SurfaceChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fecgf.Wireframe != nil {
		_egdcb := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_fecgf.Wireframe, _egdcb)
	}
	if _fecgf.Ser != nil {
		_geabg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _aggb := range _fecgf.Ser {
			e.EncodeElement(_aggb, _geabg)
		}
	}
	if _fecgf.BandFmts != nil {
		_eeca := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_fecgf.BandFmts, _eeca)
	}
	_dbee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _abecf := range _fecgf.AxId {
		e.EncodeElement(_abecf, _dbee)
	}
	if _fecgf.ExtLst != nil {
		_fgbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fecgf.ExtLst, _fgbf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DTable and its children
func (_aeff *CT_DTable) Validate() error {
	return _aeff.ValidateWithPath("\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce")
}
func (_gbeb ST_BarDir) String() string {
	switch _gbeb {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}

// ValidateWithPath validates the CT_LayoutMode and its children, prefixing error messages with path
func (_eaafb *CT_LayoutMode) ValidateWithPath(path string) error {
	if _begf := _eaafb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _begf != nil {
		return _begf
	}
	return nil
}

type CT_StockChart struct {
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// ValidateWithPath validates the CT_SecondPieSize and its children, prefixing error messages with path
func (_defb *CT_SecondPieSize) ValidateWithPath(path string) error {
	if _defb.ValAttr != nil {
		if _fgbe := _defb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgbe != nil {
			return _fgbe
		}
	}
	return nil
}

// ST_HoleSize is a union type
type ST_HoleSize struct {
	ST_HoleSizePercent *string
	ST_HoleSizeUByte   *uint8
}

// Validate validates the CT_TrendlineLbl and its children
func (_adacdc *CT_TrendlineLbl) Validate() error {
	return _adacdc.ValidateWithPath("\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c")
}

// ValidateWithPath validates the CT_Grouping and its children, prefixing error messages with path
func (_aacf *CT_Grouping) ValidateWithPath(path string) error {
	if _baae := _aacf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _baae != nil {
		return _baae
	}
	return nil
}
func (_afed ST_BubbleScale) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _afed.ST_BubbleScalePercent != nil {
		e.EncodeToken(_c.CharData(*_afed.ST_BubbleScalePercent))
	}
	if _afed.ST_BubbleScaleUInt != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_afed.ST_BubbleScaleUInt)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}

// Validate validates the CT_TickMark and its children
func (_eccdg *CT_TickMark) Validate() error {
	return _eccdg.ValidateWithPath("C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b")
}
func (_fccab ST_Grouping) Validate() error { return _fccab.ValidateWithPath("") }

type EG_SurfaceChartShared struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
}
type CT_PictureStackUnit struct{ ValAttr float64 }
type ST_SizeRepresents byte

// ValidateWithPath validates the CT_Surface3DChart and its children, prefixing error messages with path
func (_geaf *CT_Surface3DChart) ValidateWithPath(path string) error {
	if _geaf.Wireframe != nil {
		if _efgce := _geaf.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _efgce != nil {
			return _efgce
		}
	}
	for _cbgb, _cfdf := range _geaf.Ser {
		if _ddded := _cfdf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cbgb)); _ddded != nil {
			return _ddded
		}
	}
	if _geaf.BandFmts != nil {
		if _gdbda := _geaf.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _gdbda != nil {
			return _gdbda
		}
	}
	for _fabcg, _bfcbd := range _geaf.AxId {
		if _ccgeb := _bfcbd.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fabcg)); _ccgeb != nil {
			return _ccgeb
		}
	}
	if _geaf.ExtLst != nil {
		if _bdgdf := _geaf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bdgdf != nil {
			return _bdgdf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ValAx and its children, prefixing error messages with path
func (_bgfag *CT_ValAx) ValidateWithPath(path string) error {
	if _cdcfe := _bgfag.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _cdcfe != nil {
		return _cdcfe
	}
	if _gege := _bgfag.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _gege != nil {
		return _gege
	}
	if _bgfag.Delete != nil {
		if _caagb := _bgfag.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _caagb != nil {
			return _caagb
		}
	}
	if _ddbb := _bgfag.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _ddbb != nil {
		return _ddbb
	}
	if _bgfag.MajorGridlines != nil {
		if _geafg := _bgfag.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _geafg != nil {
			return _geafg
		}
	}
	if _bgfag.MinorGridlines != nil {
		if _dffd := _bgfag.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dffd != nil {
			return _dffd
		}
	}
	if _bgfag.Title != nil {
		if _faada := _bgfag.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _faada != nil {
			return _faada
		}
	}
	if _bgfag.NumFmt != nil {
		if _geabc := _bgfag.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _geabc != nil {
			return _geabc
		}
	}
	if _bgfag.MajorTickMark != nil {
		if _faegb := _bgfag.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _faegb != nil {
			return _faegb
		}
	}
	if _bgfag.MinorTickMark != nil {
		if _cecdeb := _bgfag.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cecdeb != nil {
			return _cecdeb
		}
	}
	if _bgfag.TickLblPos != nil {
		if _ffdfd := _bgfag.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _ffdfd != nil {
			return _ffdfd
		}
	}
	if _bgfag.SpPr != nil {
		if _fcbgfc := _bgfag.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fcbgfc != nil {
			return _fcbgfc
		}
	}
	if _bgfag.TxPr != nil {
		if _abgde := _bgfag.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _abgde != nil {
			return _abgde
		}
	}
	if _defd := _bgfag.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _defd != nil {
		return _defd
	}
	if _bgfag.Choice != nil {
		if _ddcdae := _bgfag.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ddcdae != nil {
			return _ddcdae
		}
	}
	if _bgfag.CrossBetween != nil {
		if _bebde := _bgfag.CrossBetween.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"); _bebde != nil {
			return _bebde
		}
	}
	if _bgfag.MajorUnit != nil {
		if _fgcf := _bgfag.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _fgcf != nil {
			return _fgcf
		}
	}
	if _bgfag.MinorUnit != nil {
		if _faabd := _bgfag.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _faabd != nil {
			return _faabd
		}
	}
	if _bgfag.DispUnits != nil {
		if _gcbg := _bgfag.DispUnits.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"); _gcbg != nil {
			return _gcbg
		}
	}
	if _bgfag.ExtLst != nil {
		if _daeb := _bgfag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _daeb != nil {
			return _daeb
		}
	}
	return nil
}

// ValidateWithPath validates the EG_PieChartShared and its children, prefixing error messages with path
func (_cbfdf *EG_PieChartShared) ValidateWithPath(path string) error {
	if _cbfdf.VaryColors != nil {
		if _dagdc := _cbfdf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dagdc != nil {
			return _dagdc
		}
	}
	for _dgagd, _ebdcd := range _cbfdf.Ser {
		if _eaecfa := _ebdcd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dgagd)); _eaecfa != nil {
			return _eaecfa
		}
	}
	if _cbfdf.DLbls != nil {
		if _bbcga := _cbfdf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bbcga != nil {
			return _bbcga
		}
	}
	return nil
}
func (_bcde *CT_PieSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_cfad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bcde.Idx, _cfad)
	_acbce := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bcde.Order, _acbce)
	if _bcde.Tx != nil {
		_dcafd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bcde.Tx, _dcafd)
	}
	if _bcde.SpPr != nil {
		_bgdc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bcde.SpPr, _bgdc)
	}
	if _bcde.Explosion != nil {
		_dfgg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_bcde.Explosion, _dfgg)
	}
	if _bcde.DPt != nil {
		_edbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _eddea := range _bcde.DPt {
			e.EncodeElement(_eddea, _edbd)
		}
	}
	if _bcde.DLbls != nil {
		_agfba := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcde.DLbls, _agfba)
	}
	if _bcde.Cat != nil {
		_dfae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bcde.Cat, _dfae)
	}
	if _bcde.Val != nil {
		_cgecg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bcde.Val, _cgecg)
	}
	if _bcde.ExtLst != nil {
		_fbgdd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcde.ExtLst, _fbgdd)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_View3D and its children
func (_dbgbg *CT_View3D) Validate() error {
	return _dbgbg.ValidateWithPath("\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D")
}
func (_aaacc ST_Overlap) String() string {
	if _aaacc.ST_OverlapPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_aaacc.ST_OverlapPercent)
	}
	if _aaacc.ST_OverlapByte != nil {
		return _aa.Sprintf("\u0025\u0076", *_aaacc.ST_OverlapByte)
	}
	return ""
}

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_gdc *CT_Extension) ValidateWithPath(path string) error { return nil }
func (_cabe *ST_TimeUnit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gdbfb, _eddad := d.Token()
	if _eddad != nil {
		return _eddad
	}
	if _dceefc, _ffef := _gdbfb.(_c.EndElement); _ffef && _dceefc.Name == start.Name {
		*_cabe = 1
		return nil
	}
	if _dbbbc, _fdbac := _gdbfb.(_c.CharData); !_fdbac {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdbfb)
	} else {
		switch string(_dbbbc) {
		case "":
			*_cabe = 0
		case "\u0064\u0061\u0079\u0073":
			*_cabe = 1
		case "\u006d\u006f\u006e\u0074\u0068\u0073":
			*_cabe = 2
		case "\u0079\u0065\u0061r\u0073":
			*_cabe = 3
		}
	}
	_gdbfb, _eddad = d.Token()
	if _eddad != nil {
		return _eddad
	}
	if _bgebc, _cageb := _gdbfb.(_c.EndElement); _cageb && _bgebc.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdbfb)
}
func (_daec *CT_DPt) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_aeeee := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_daec.Idx, _aeeee)
	if _daec.InvertIfNegative != nil {
		_bfge := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_daec.InvertIfNegative, _bfge)
	}
	if _daec.Marker != nil {
		_ggbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_daec.Marker, _ggbd)
	}
	if _daec.Bubble3D != nil {
		_beed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_daec.Bubble3D, _beed)
	}
	if _daec.Explosion != nil {
		_aedg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_daec.Explosion, _aedg)
	}
	if _daec.SpPr != nil {
		_bace := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_daec.SpPr, _bace)
	}
	if _daec.PictureOptions != nil {
		_ecdb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_daec.PictureOptions, _ecdb)
	}
	if _daec.ExtLst != nil {
		_dfbe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_daec.ExtLst, _dfbe)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ScatterChart and its children, prefixing error messages with path
func (_cgegc *CT_ScatterChart) ValidateWithPath(path string) error {
	if _gagfg := _cgegc.ScatterStyle.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"); _gagfg != nil {
		return _gagfg
	}
	if _cgegc.VaryColors != nil {
		if _dfba := _cgegc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dfba != nil {
			return _dfba
		}
	}
	for _bdffa, _ecefg := range _cgegc.Ser {
		if _bbba := _ecefg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bdffa)); _bbba != nil {
			return _bbba
		}
	}
	if _cgegc.DLbls != nil {
		if _gaafd := _cgegc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gaafd != nil {
			return _gaafd
		}
	}
	for _fdec, _cdfd := range _cgegc.AxId {
		if _gfdeg := _cdfd.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fdec)); _gfdeg != nil {
			return _gfdeg
		}
	}
	if _cgegc.ExtLst != nil {
		if _gbcad := _cgegc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbcad != nil {
			return _gbcad
		}
	}
	return nil
}

type ST_Grouping byte
type CT_SerTxChoice struct {
	StrRef *CT_StrRef
	V      *string
}

func (_cefbg ST_Orientation) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_ecbb := _c.Attr{}
	_ecbb.Name = name
	switch _cefbg {
	case ST_OrientationUnset:
		_ecbb.Value = ""
	case ST_OrientationMaxMin:
		_ecbb.Value = "\u006d\u0061\u0078\u004d\u0069\u006e"
	case ST_OrientationMinMax:
		_ecbb.Value = "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return _ecbb, nil
}
func NewCT_StockChart() *CT_StockChart { _dceda := &CT_StockChart{}; return _dceda }
func (_dfgdb *ST_ErrBarType) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_dfgdb = 0
	case "\u0062\u006f\u0074\u0068":
		*_dfgdb = 1
	case "\u006d\u0069\u006eu\u0073":
		*_dfgdb = 2
	case "\u0070\u006c\u0075\u0073":
		*_dfgdb = 3
	}
	return nil
}
func (_bagg *CT_Skip) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _bagg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_AxisUnit struct{ ValAttr float64 }

func (_cagce *ST_TimeUnit) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_cagce = 0
	case "\u0064\u0061\u0079\u0073":
		*_cagce = 1
	case "\u006d\u006f\u006e\u0074\u0068\u0073":
		*_cagce = 2
	case "\u0079\u0065\u0061r\u0073":
		*_cagce = 3
	}
	return nil
}
func (_dgeag ST_PageSetupOrientation) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_bgbfa := _c.Attr{}
	_bgbfa.Name = name
	switch _dgeag {
	case ST_PageSetupOrientationUnset:
		_bgbfa.Value = ""
	case ST_PageSetupOrientationDefault:
		_bgbfa.Value = "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case ST_PageSetupOrientationPortrait:
		_bgbfa.Value = "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case ST_PageSetupOrientationLandscape:
		_bgbfa.Value = "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return _bgbfa, nil
}

// ValidateWithPath validates the CT_ExternalData and its children, prefixing error messages with path
func (_fabf *CT_ExternalData) ValidateWithPath(path string) error {
	if _fabf.AutoUpdate != nil {
		if _fegf := _fabf.AutoUpdate.ValidateWithPath(path + "/\u0041\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"); _fegf != nil {
			return _fegf
		}
	}
	return nil
}

// ValidateWithPath validates the EG_AxSharedChoice and its children, prefixing error messages with path
func (_fbdde *EG_AxSharedChoice) ValidateWithPath(path string) error {
	if _fbdde.Crosses != nil {
		if _fabg := _fbdde.Crosses.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073"); _fabg != nil {
			return _fabg
		}
	}
	if _fbdde.CrossesAt != nil {
		if _dfbbf := _fbdde.CrossesAt.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"); _dfbbf != nil {
			return _dfbbf
		}
	}
	return nil
}
func (_ggfe *EG_AreaChartShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_fgedad:
	for {
		_cfdae, _dbacd := d.Token()
		if _dbacd != nil {
			return _dbacd
		}
		switch _gcdgca := _cfdae.(type) {
		case _c.StartElement:
			switch _gcdgca.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ggfe.Grouping = NewCT_Grouping()
				if _fdgcd := d.DecodeElement(_ggfe.Grouping, &_gcdgca); _fdgcd != nil {
					return _fdgcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ggfe.VaryColors = NewCT_Boolean()
				if _afdfa := d.DecodeElement(_ggfe.VaryColors, &_gcdgca); _afdfa != nil {
					return _afdfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cbga := NewCT_AreaSer()
				if _ebceb := d.DecodeElement(_cbga, &_gcdgca); _ebceb != nil {
					return _ebceb
				}
				_ggfe.Ser = append(_ggfe.Ser, _cbga)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ggfe.DLbls = NewCT_DLbls()
				if _effgb := d.DecodeElement(_ggfe.DLbls, &_gcdgca); _effgb != nil {
					return _effgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_ggfe.DropLines = NewCT_ChartLines()
				if _ddgdb := d.DecodeElement(_ggfe.DropLines, &_gcdgca); _ddgdb != nil {
					return _ddgdb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0072\u0065\u0061\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _gcdgca.Name)
				if _cabfe := d.Skip(); _cabfe != nil {
					return _cabfe
				}
			}
		case _c.EndElement:
			break _fgedad
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Trendline() *CT_Trendline {
	_adae := &CT_Trendline{}
	_adae.TrendlineType = NewCT_TrendlineType()
	return _adae
}
func (_abbeg ST_SizeRepresents) Validate() error { return _abbeg.ValidateWithPath("") }

type CT_Thickness struct{ ValAttr ST_Thickness }

func (_eacag *CT_LineSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_eacag.Idx = NewCT_UnsignedInt()
	_eacag.Order = NewCT_UnsignedInt()
_efgdb:
	for {
		_dbgbe, _aagcc := d.Token()
		if _aagcc != nil {
			return _aagcc
		}
		switch _bagf := _dbgbe.(type) {
		case _c.StartElement:
			switch _bagf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _abcfg := d.DecodeElement(_eacag.Idx, &_bagf); _abcfg != nil {
					return _abcfg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _aadg := d.DecodeElement(_eacag.Order, &_bagf); _aadg != nil {
					return _aadg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_eacag.Tx = NewCT_SerTx()
				if _dagfa := d.DecodeElement(_eacag.Tx, &_bagf); _dagfa != nil {
					return _dagfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eacag.SpPr = _d.NewCT_ShapeProperties()
				if _bbcd := d.DecodeElement(_eacag.SpPr, &_bagf); _bbcd != nil {
					return _bbcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_eacag.Marker = NewCT_Marker()
				if _addb := d.DecodeElement(_eacag.Marker, &_bagf); _addb != nil {
					return _addb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_aaeg := NewCT_DPt()
				if _bbd := d.DecodeElement(_aaeg, &_bagf); _bbd != nil {
					return _bbd
				}
				_eacag.DPt = append(_eacag.DPt, _aaeg)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eacag.DLbls = NewCT_DLbls()
				if _gdebb := d.DecodeElement(_eacag.DLbls, &_bagf); _gdebb != nil {
					return _gdebb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_gfea := NewCT_Trendline()
				if _bfggc := d.DecodeElement(_gfea, &_bagf); _bfggc != nil {
					return _bfggc
				}
				_eacag.Trendline = append(_eacag.Trendline, _gfea)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_eacag.ErrBars = NewCT_ErrBars()
				if _bfddg := d.DecodeElement(_eacag.ErrBars, &_bagf); _bfddg != nil {
					return _bfddg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_eacag.Cat = NewCT_AxDataSource()
				if _bffd := d.DecodeElement(_eacag.Cat, &_bagf); _bffd != nil {
					return _bffd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_eacag.Val = NewCT_NumDataSource()
				if _bccg := d.DecodeElement(_eacag.Val, &_bagf); _bccg != nil {
					return _bccg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_eacag.Smooth = NewCT_Boolean()
				if _dgbg := d.DecodeElement(_eacag.Smooth, &_bagf); _dgbg != nil {
					return _dgbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eacag.ExtLst = NewCT_ExtensionList()
				if _ebdc := d.DecodeElement(_eacag.ExtLst, &_bagf); _ebdc != nil {
					return _ebdc
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fL\u0069\u006e\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _bagf.Name)
				if _cbbf := d.Skip(); _cbbf != nil {
					return _cbbf
				}
			}
		case _c.EndElement:
			break _efgdb
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_TickMark() *CT_TickMark { _aabbf := &CT_TickMark{}; return _aabbf }

// ST_GapAmount is a union type
type ST_GapAmount struct {
	ST_GapAmountPercent *string
	ST_GapAmountUShort  *uint16
}

func (_efgba ST_ScatterStyle) Validate() error { return _efgba.ValidateWithPath("") }
func NewCT_TrendlineType() *CT_TrendlineType   { _dbfcg := &CT_TrendlineType{}; return _dbfcg }
func (_aaaeg *CT_LegendEntryChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _aaaeg.Delete != nil {
		_gdcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_aaaeg.Delete, _gdcd)
	}
	if _aaaeg.TxPr != nil {
		_abaeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_aaaeg.TxPr, _abaeb)
	}
	return nil
}
func NewCT_NumVal() *CT_NumVal { _ebbb := &CT_NumVal{}; return _ebbb }
func (_gccb *CT_BubbleSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dedg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gccb.Idx, _dedg)
	_acabd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_gccb.Order, _acabd)
	if _gccb.Tx != nil {
		_gaea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gccb.Tx, _gaea)
	}
	if _gccb.SpPr != nil {
		_ebda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gccb.SpPr, _ebda)
	}
	if _gccb.InvertIfNegative != nil {
		_deab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_gccb.InvertIfNegative, _deab)
	}
	if _gccb.DPt != nil {
		_bgge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _adcg := range _gccb.DPt {
			e.EncodeElement(_adcg, _bgge)
		}
	}
	if _gccb.DLbls != nil {
		_baea := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gccb.DLbls, _baea)
	}
	if _gccb.Trendline != nil {
		_fcbg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _ace := range _gccb.Trendline {
			e.EncodeElement(_ace, _fcbg)
		}
	}
	if _gccb.ErrBars != nil {
		_aebg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _bgfb := range _gccb.ErrBars {
			e.EncodeElement(_bgfb, _aebg)
		}
	}
	if _gccb.XVal != nil {
		_bgbgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_gccb.XVal, _bgbgb)
	}
	if _gccb.YVal != nil {
		_bdgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_gccb.YVal, _bdgg)
	}
	if _gccb.BubbleSize != nil {
		_ecge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062u\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gccb.BubbleSize, _ecge)
	}
	if _gccb.Bubble3D != nil {
		_cacc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_gccb.Bubble3D, _cacc)
	}
	if _gccb.ExtLst != nil {
		_edec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gccb.ExtLst, _edec)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cfega ST_ErrBarType) Validate() error { return _cfega.ValidateWithPath("") }
func (_fafag *CT_LegendPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bafd := range start.Attr {
		if _bafd.Name.Local == "\u0076\u0061\u006c" {
			_fafag.ValAttr.UnmarshalXMLAttr(_bafd)
			continue
		}
	}
	for {
		_bega, _dfcc := d.Token()
		if _dfcc != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0065g\u0065\u006e\u0064\u0050\u006f\u0073\u003a\u0020\u0025\u0073", _dfcc)
		}
		if _dfcd, _bgdbd := _bega.(_c.EndElement); _bgdbd && _dfcd.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SerAx and its children, prefixing error messages with path
func (_affg *CT_SerAx) ValidateWithPath(path string) error {
	if _fecec := _affg.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _fecec != nil {
		return _fecec
	}
	if _gfdfe := _affg.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _gfdfe != nil {
		return _gfdfe
	}
	if _affg.Delete != nil {
		if _aaagb := _affg.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _aaagb != nil {
			return _aaagb
		}
	}
	if _gccgf := _affg.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _gccgf != nil {
		return _gccgf
	}
	if _affg.MajorGridlines != nil {
		if _feaeb := _affg.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _feaeb != nil {
			return _feaeb
		}
	}
	if _affg.MinorGridlines != nil {
		if _ceeca := _affg.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _ceeca != nil {
			return _ceeca
		}
	}
	if _affg.Title != nil {
		if _ebfdb := _affg.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ebfdb != nil {
			return _ebfdb
		}
	}
	if _affg.NumFmt != nil {
		if _ffaed := _affg.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ffaed != nil {
			return _ffaed
		}
	}
	if _affg.MajorTickMark != nil {
		if _bdbg := _affg.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bdbg != nil {
			return _bdbg
		}
	}
	if _affg.MinorTickMark != nil {
		if _ccceb := _affg.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ccceb != nil {
			return _ccceb
		}
	}
	if _affg.TickLblPos != nil {
		if _daaeg := _affg.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _daaeg != nil {
			return _daaeg
		}
	}
	if _affg.SpPr != nil {
		if _eegbc := _affg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eegbc != nil {
			return _eegbc
		}
	}
	if _affg.TxPr != nil {
		if _cafca := _affg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cafca != nil {
			return _cafca
		}
	}
	if _eedb := _affg.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _eedb != nil {
		return _eedb
	}
	if _affg.Choice != nil {
		if _agfeg := _affg.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _agfeg != nil {
			return _agfeg
		}
	}
	if _affg.TickLblSkip != nil {
		if _ebacfc := _affg.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _ebacfc != nil {
			return _ebacfc
		}
	}
	if _affg.TickMarkSkip != nil {
		if _bedd := _affg.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _bedd != nil {
			return _bedd
		}
	}
	if _affg.ExtLst != nil {
		if _fcfagf := _affg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcfagf != nil {
			return _fcfagf
		}
	}
	return nil
}

// Validate validates the CT_DispUnitsLbl and its children
func (_acgc *CT_DispUnitsLbl) Validate() error {
	return _acgc.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c")
}

// ValidateWithPath validates the CT_ErrBars and its children, prefixing error messages with path
func (_gafc *CT_ErrBars) ValidateWithPath(path string) error {
	if _gafc.ErrDir != nil {
		if _gecfe := _gafc.ErrDir.ValidateWithPath(path + "\u002fE\u0072\u0072\u0044\u0069\u0072"); _gecfe != nil {
			return _gecfe
		}
	}
	if _cdge := _gafc.ErrBarType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"); _cdge != nil {
		return _cdge
	}
	if _ggcc := _gafc.ErrValType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"); _ggcc != nil {
		return _ggcc
	}
	if _gafc.NoEndCap != nil {
		if _ggbf := _gafc.NoEndCap.ValidateWithPath(path + "\u002fN\u006f\u0045\u006e\u0064\u0043\u0061p"); _ggbf != nil {
			return _ggbf
		}
	}
	if _gafc.Plus != nil {
		if _bcgce := _gafc.Plus.ValidateWithPath(path + "\u002f\u0050\u006cu\u0073"); _bcgce != nil {
			return _bcgce
		}
	}
	if _gafc.Minus != nil {
		if _edae := _gafc.Minus.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u0075\u0073"); _edae != nil {
			return _edae
		}
	}
	if _gafc.Val != nil {
		if _gbbef := _gafc.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _gbbef != nil {
			return _gbbef
		}
	}
	if _gafc.SpPr != nil {
		if _feega := _gafc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _feega != nil {
			return _feega
		}
	}
	if _gafc.ExtLst != nil {
		if _fcdb := _gafc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcdb != nil {
			return _fcdb
		}
	}
	return nil
}

// Validate validates the CT_RotY and its children
func (_afbe *CT_RotY) Validate() error {
	return _afbe.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0059")
}
func (_bbec *ST_TickMark) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_bbec = 0
	case "\u0063\u0072\u006fs\u0073":
		*_bbec = 1
	case "\u0069\u006e":
		*_bbec = 2
	case "\u006e\u006f\u006e\u0065":
		*_bbec = 3
	case "\u006f\u0075\u0074":
		*_bbec = 4
	}
	return nil
}

// ValidateWithPath validates the CT_LayoutTarget and its children, prefixing error messages with path
func (_adbag *CT_LayoutTarget) ValidateWithPath(path string) error {
	if _deaaf := _adbag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _deaaf != nil {
		return _deaaf
	}
	return nil
}

// Validate validates the EG_SurfaceChartShared and its children
func (_abeca *EG_SurfaceChartShared) Validate() error {
	return _abeca.ValidateWithPath("E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064")
}

// ValidateWithPath validates the CT_Scaling and its children, prefixing error messages with path
func (_adcc *CT_Scaling) ValidateWithPath(path string) error {
	if _adcc.LogBase != nil {
		if _gfgg := _adcc.LogBase.ValidateWithPath(path + "\u002f\u004c\u006f\u0067\u0042\u0061\u0073\u0065"); _gfgg != nil {
			return _gfgg
		}
	}
	if _adcc.Orientation != nil {
		if _dedb := _adcc.Orientation.ValidateWithPath(path + "\u002f\u004f\u0072i\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"); _dedb != nil {
			return _dedb
		}
	}
	if _adcc.Max != nil {
		if _dega := _adcc.Max.ValidateWithPath(path + "\u002f\u004d\u0061\u0078"); _dega != nil {
			return _dega
		}
	}
	if _adcc.Min != nil {
		if _fcfb := _adcc.Min.ValidateWithPath(path + "\u002f\u004d\u0069\u006e"); _fcfb != nil {
			return _fcfb
		}
	}
	if _adcc.ExtLst != nil {
		if _egca := _adcc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egca != nil {
			return _egca
		}
	}
	return nil
}
func (_aedee *CT_ErrBars) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _aedee.ErrDir != nil {
		_abfaba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0072\u0072\u0044\u0069\u0072"}}
		e.EncodeElement(_aedee.ErrDir, _abfaba)
	}
	_ddea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065r\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_aedee.ErrBarType, _ddea)
	_ddae := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065r\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_aedee.ErrValType, _ddae)
	if _aedee.NoEndCap != nil {
		_cgcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}}
		e.EncodeElement(_aedee.NoEndCap, _cgcg)
	}
	if _aedee.Plus != nil {
		_cbfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u006c\u0075\u0073"}}
		e.EncodeElement(_aedee.Plus, _cbfd)
	}
	if _aedee.Minus != nil {
		_efda := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006d\u0069\u006e\u0075\u0073"}}
		e.EncodeElement(_aedee.Minus, _efda)
	}
	if _aedee.Val != nil {
		_ceeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_aedee.Val, _ceeg)
	}
	if _aedee.SpPr != nil {
		_dded := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aedee.SpPr, _dded)
	}
	if _aedee.ExtLst != nil {
		_egcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aedee.ExtLst, _egcc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_HPercent struct{ ValAttr *ST_HPercent }

// Validate validates the CT_MultiLvlStrData and its children
func (_bedee *CT_MultiLvlStrData) Validate() error {
	return _bedee.ValidateWithPath("\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061")
}

const (
	ST_OfPieTypeUnset ST_OfPieType = 0
	ST_OfPieTypePie   ST_OfPieType = 1
	ST_OfPieTypeBar   ST_OfPieType = 2
)

func (_aebgd *ST_RadarStyle) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_aebgd = 0
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_aebgd = 1
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_aebgd = 2
	case "\u0066\u0069\u006c\u006c\u0065\u0064":
		*_aebgd = 3
	}
	return nil
}
func NewCT_Double() *CT_Double { _baagb := &CT_Double{}; return _baagb }
func (_ebgac ST_AxPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_ebgac.String(), start)
}
func (_defafb ST_LegendPos) String() string {
	switch _defafb {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074\u0072"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	case 5:
		return "\u0074"
	}
	return ""
}

// Validate validates the CT_RadarSer and its children
func (_ffbcab *CT_RadarSer) Validate() error {
	return _ffbcab.ValidateWithPath("C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072")
}
func (_eedcc ST_SplitType) String() string {
	switch _eedcc {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0063\u0075\u0073\u0074"
	case 3:
		return "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case 4:
		return "\u0070\u006f\u0073"
	case 5:
		return "\u0076\u0061\u006c"
	}
	return ""
}

// Validate validates the CT_TrendlineType and its children
func (_fdff *CT_TrendlineType) Validate() error {
	return _fdff.ValidateWithPath("\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065")
}
func (_eae *CT_AxDataSource) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_eae.Choice.MarshalXML(e, _c.StartElement{})
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_DepthPercent(s string) (ST_DepthPercent, error) {
	if ST_DepthPercentWithSymbolPatternRe.MatchString(s) {
		return ST_DepthPercent{ST_DepthPercentWithSymbol: &s}, nil
	}
	_gagff, _gagfa := _e.ParseUint(s, 10, 16)
	if _gagfa != nil {
		return ST_DepthPercent{}, _gagfa
	}
	_eccgb := uint16(_gagff)
	return ST_DepthPercent{ST_DepthPercentUShort: &_eccgb}, nil
}

// Validate validates the CT_ErrDir and its children
func (_cgab *CT_ErrDir) Validate() error {
	return _cgab.ValidateWithPath("\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r")
}

// Validate validates the CT_LegendEntry and its children
func (_fafa *CT_LegendEntry) Validate() error {
	return _fafa.ValidateWithPath("\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079")
}
func (_bbagg ST_TickLblPos) String() string {
	switch _bbagg {
	case 0:
		return ""
	case 1:
		return "\u0068\u0069\u0067\u0068"
	case 2:
		return "\u006c\u006f\u0077"
	case 3:
		return "\u006e\u0065\u0078\u0074\u0054\u006f"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func (_aggfa ST_ErrValType) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_cfcdc := _c.Attr{}
	_cfcdc.Name = name
	switch _aggfa {
	case ST_ErrValTypeUnset:
		_cfcdc.Value = ""
	case ST_ErrValTypeCust:
		_cfcdc.Value = "\u0063\u0075\u0073\u0074"
	case ST_ErrValTypeFixedVal:
		_cfcdc.Value = "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ErrValTypePercentage:
		_cfcdc.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case ST_ErrValTypeStdDev:
		_cfcdc.Value = "\u0073\u0074\u0064\u0044\u0065\u0076"
	case ST_ErrValTypeStdErr:
		_cfcdc.Value = "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return _cfcdc, nil
}
func (_gceae *ST_RadarStyle) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dffbf, _dgee := d.Token()
	if _dgee != nil {
		return _dgee
	}
	if _gdbfg, _aacgc := _dffbf.(_c.EndElement); _aacgc && _gdbfg.Name == start.Name {
		*_gceae = 1
		return nil
	}
	if _accg, _dadgb := _dffbf.(_c.CharData); !_dadgb {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dffbf)
	} else {
		switch string(_accg) {
		case "":
			*_gceae = 0
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_gceae = 1
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_gceae = 2
		case "\u0066\u0069\u006c\u006c\u0065\u0064":
			*_gceae = 3
		}
	}
	_dffbf, _dgee = d.Token()
	if _dgee != nil {
		return _dgee
	}
	if _cdbcd, _aebde := _dffbf.(_c.EndElement); _aebde && _cdbcd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dffbf)
}

// Validate validates the CT_BarDir and its children
func (_aagb *CT_BarDir) Validate() error {
	return _aagb.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r")
}
func (_ffdgg *ST_SecondPieSize) Validate() error { return _ffdgg.ValidateWithPath("") }
func (_fcdd *CT_BubbleSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fcdd.Idx = NewCT_UnsignedInt()
	_fcdd.Order = NewCT_UnsignedInt()
_aged:
	for {
		_abgc, _fefc := d.Token()
		if _fefc != nil {
			return _fefc
		}
		switch _fgaa := _abgc.(type) {
		case _c.StartElement:
			switch _fgaa.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bcdf := d.DecodeElement(_fcdd.Idx, &_fgaa); _bcdf != nil {
					return _bcdf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _gcag := d.DecodeElement(_fcdd.Order, &_fgaa); _gcag != nil {
					return _gcag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fcdd.Tx = NewCT_SerTx()
				if _cabf := d.DecodeElement(_fcdd.Tx, &_fgaa); _cabf != nil {
					return _cabf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fcdd.SpPr = _d.NewCT_ShapeProperties()
				if _fbfe := d.DecodeElement(_fcdd.SpPr, &_fgaa); _fbfe != nil {
					return _fbfe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_fcdd.InvertIfNegative = NewCT_Boolean()
				if _gffg := d.DecodeElement(_fcdd.InvertIfNegative, &_fgaa); _gffg != nil {
					return _gffg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_bea := NewCT_DPt()
				if _baec := d.DecodeElement(_bea, &_fgaa); _baec != nil {
					return _baec
				}
				_fcdd.DPt = append(_fcdd.DPt, _bea)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fcdd.DLbls = NewCT_DLbls()
				if _abca := d.DecodeElement(_fcdd.DLbls, &_fgaa); _abca != nil {
					return _abca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_adag := NewCT_Trendline()
				if _cfa := d.DecodeElement(_adag, &_fgaa); _cfa != nil {
					return _cfa
				}
				_fcdd.Trendline = append(_fcdd.Trendline, _adag)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_degf := NewCT_ErrBars()
				if _dgad := d.DecodeElement(_degf, &_fgaa); _dgad != nil {
					return _dgad
				}
				_fcdd.ErrBars = append(_fcdd.ErrBars, _degf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_fcdd.XVal = NewCT_AxDataSource()
				if _efaa := d.DecodeElement(_fcdd.XVal, &_fgaa); _efaa != nil {
					return _efaa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_fcdd.YVal = NewCT_NumDataSource()
				if _efac := d.DecodeElement(_fcdd.YVal, &_fgaa); _efac != nil {
					return _efac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_fcdd.BubbleSize = NewCT_NumDataSource()
				if _gfceb := d.DecodeElement(_fcdd.BubbleSize, &_fgaa); _gfceb != nil {
					return _gfceb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_fcdd.Bubble3D = NewCT_Boolean()
				if _ffffa := d.DecodeElement(_fcdd.Bubble3D, &_fgaa); _ffffa != nil {
					return _ffffa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcdd.ExtLst = NewCT_ExtensionList()
				if _abcd := d.DecodeElement(_fcdd.ExtLst, &_fgaa); _abcd != nil {
					return _abcd
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u0075\u0062b\u006c\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _fgaa.Name)
				if _acac := d.Skip(); _acac != nil {
					return _acac
				}
			}
		case _c.EndElement:
			break _aged
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_ChartLines() *CT_ChartLines { _dbb := &CT_ChartLines{}; return _dbb }
func (_effba ST_LayoutTarget) String() string {
	switch _effba {
	case 0:
		return ""
	case 1:
		return "\u0069\u006e\u006ee\u0072"
	case 2:
		return "\u006f\u0075\u0074e\u0072"
	}
	return ""
}

type EG_SerShared struct {
	Idx   *CT_UnsignedInt
	Order *CT_UnsignedInt
	Tx    *CT_SerTx
	SpPr  *_d.CT_ShapeProperties
}
type UserShapes struct{ _dd.CT_Drawing }
type CT_DoughnutChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	HoleSize      *CT_HoleSize
	ExtLst        *CT_ExtensionList
}

func (_gacfa ST_PageSetupOrientation) Validate() error { return _gacfa.ValidateWithPath("") }
func (_afcc ST_MarkerStyle) ValidateWithPath(path string) error {
	switch _afcc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afcc))
	}
	return nil
}
func (_gaebb *ST_DepthPercent) ValidateWithPath(path string) error {
	_edgbbf := []string{}
	if _gaebb.ST_DepthPercentWithSymbol != nil {
		_edgbbf = append(_edgbbf, "\u0053T\u005f\u0044\u0065\u0070t\u0068\u0050\u0065\u0072\u0063e\u006et\u0057i\u0074\u0068\u0053\u0079\u006d\u0062\u006fl")
	}
	if _gaebb.ST_DepthPercentUShort != nil {
		_edgbbf = append(_edgbbf, "S\u0054\u005f\u0044\u0065pt\u0068P\u0065\u0072\u0063\u0065\u006et\u0055\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_edgbbf) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _edgbbf)
	}
	return nil
}
func (_ddgc *ST_ScatterStyle) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_ddgc = 0
	case "\u006e\u006f\u006e\u0065":
		*_ddgc = 1
	case "\u006c\u0069\u006e\u0065":
		*_ddgc = 2
	case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
		*_ddgc = 3
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_ddgc = 4
	case "\u0073\u006d\u006f\u006f\u0074\u0068":
		*_ddgc = 5
	case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
		*_ddgc = 6
	}
	return nil
}

// Validate validates the EG_PieChartShared and its children
func (_gcgbf *EG_PieChartShared) Validate() error {
	return _gcgbf.ValidateWithPath("\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}
func (_bbcea ST_TickMark) String() string {
	switch _bbcea {
	case 0:
		return ""
	case 1:
		return "\u0063\u0072\u006fs\u0073"
	case 2:
		return "\u0069\u006e"
	case 3:
		return "\u006e\u006f\u006e\u0065"
	case 4:
		return "\u006f\u0075\u0074"
	}
	return ""
}
func (_dfgfc *ST_Grouping) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_dfgfc = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_dfgfc = 1
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_dfgfc = 2
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_dfgfc = 3
	}
	return nil
}
func (_ecdbf *CT_FirstSliceAng) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dggg := range start.Attr {
		if _dggg.Name.Local == "\u0076\u0061\u006c" {
			_afga, _eead := _e.ParseUint(_dggg.Value, 10, 16)
			if _eead != nil {
				return _eead
			}
			_bbce := uint16(_afga)
			_ecdbf.ValAttr = &_bbce
			continue
		}
	}
	for {
		_cbffg, _ddcdf := d.Token()
		if _ddcdf != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0046\u0069\u0072\u0073t\u0053l\u0069\u0063\u0065\u0041\u006e\u0067\u003a \u0025\u0073", _ddcdf)
		}
		if _fced, _badf := _cbffg.(_c.EndElement); _badf && _fced.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DTable and its children, prefixing error messages with path
func (_eebf *CT_DTable) ValidateWithPath(path string) error {
	if _eebf.ShowHorzBorder != nil {
		if _acaa := _eebf.ShowHorzBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0048\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"); _acaa != nil {
			return _acaa
		}
	}
	if _eebf.ShowVertBorder != nil {
		if _feffe := _eebf.ShowVertBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0056\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"); _feffe != nil {
			return _feffe
		}
	}
	if _eebf.ShowOutline != nil {
		if _baaf := _eebf.ShowOutline.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"); _baaf != nil {
			return _baaf
		}
	}
	if _eebf.ShowKeys != nil {
		if _feeg := _eebf.ShowKeys.ValidateWithPath(path + "\u002fS\u0068\u006f\u0077\u004b\u0065\u0079s"); _feeg != nil {
			return _feeg
		}
	}
	if _eebf.SpPr != nil {
		if _ebfb := _eebf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ebfb != nil {
			return _ebfb
		}
	}
	if _eebf.TxPr != nil {
		if _bafg := _eebf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bafg != nil {
			return _bafg
		}
	}
	if _eebf.ExtLst != nil {
		if _afdd := _eebf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afdd != nil {
			return _afdd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DPt and its children, prefixing error messages with path
func (_dccg *CT_DPt) ValidateWithPath(path string) error {
	if _agbf := _dccg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _agbf != nil {
		return _agbf
	}
	if _dccg.InvertIfNegative != nil {
		if _cbbe := _dccg.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _cbbe != nil {
			return _cbbe
		}
	}
	if _dccg.Marker != nil {
		if _fdag := _dccg.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _fdag != nil {
			return _fdag
		}
	}
	if _dccg.Bubble3D != nil {
		if _adac := _dccg.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _adac != nil {
			return _adac
		}
	}
	if _dccg.Explosion != nil {
		if _bcce := _dccg.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _bcce != nil {
			return _bcce
		}
	}
	if _dccg.SpPr != nil {
		if _adba := _dccg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _adba != nil {
			return _adba
		}
	}
	if _dccg.PictureOptions != nil {
		if _cgac := _dccg.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _cgac != nil {
			return _cgac
		}
	}
	if _dccg.ExtLst != nil {
		if _cfgg := _dccg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfgg != nil {
			return _cfgg
		}
	}
	return nil
}
func (_abac *CT_ErrDir) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_abac.ValAttr = ST_ErrDir(1)
	for _, _fede := range start.Attr {
		if _fede.Name.Local == "\u0076\u0061\u006c" {
			_abac.ValAttr.UnmarshalXMLAttr(_fede)
			continue
		}
	}
	for {
		_dfdg, _gfcb := d.Token()
		if _gfcb != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0045\u0072\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _gfcb)
		}
		if _deaab, _dadcg := _dfdg.(_c.EndElement); _dadcg && _deaab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eef *CT_AxDataSourceChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_efe:
	for {
		_acg, _dcb := d.Token()
		if _dcb != nil {
			return _dcb
		}
		switch _ffc := _acg.(type) {
		case _c.StartElement:
			switch _ffc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_eef.MultiLvlStrRef = NewCT_MultiLvlStrRef()
				if _gbd := d.DecodeElement(_eef.MultiLvlStrRef, &_ffc); _gbd != nil {
					return _gbd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_eef.NumRef = NewCT_NumRef()
				if _bcd := d.DecodeElement(_eef.NumRef, &_ffc); _bcd != nil {
					return _bcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_eef.NumLit = NewCT_NumData()
				if _dag := d.DecodeElement(_eef.NumLit, &_ffc); _dag != nil {
					return _dag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_eef.StrRef = NewCT_StrRef()
				if _dea := d.DecodeElement(_eef.StrRef, &_ffc); _dea != nil {
					return _dea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_eef.StrLit = NewCT_StrData()
				if _adcb := d.DecodeElement(_eef.StrLit, &_ffc); _adcb != nil {
					return _adcb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0041\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ffc.Name)
				if _ddcd := d.Skip(); _ddcd != nil {
					return _ddcd
				}
			}
		case _c.EndElement:
			break _efe
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineSer and its children, prefixing error messages with path
func (_dddag *CT_LineSer) ValidateWithPath(path string) error {
	if _ccef := _dddag.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ccef != nil {
		return _ccef
	}
	if _becaa := _dddag.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _becaa != nil {
		return _becaa
	}
	if _dddag.Tx != nil {
		if _fdaad := _dddag.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _fdaad != nil {
			return _fdaad
		}
	}
	if _dddag.SpPr != nil {
		if _daae := _dddag.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _daae != nil {
			return _daae
		}
	}
	if _dddag.Marker != nil {
		if _fccgg := _dddag.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _fccgg != nil {
			return _fccgg
		}
	}
	for _fcdc, _aefd := range _dddag.DPt {
		if _cbecd := _aefd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _fcdc)); _cbecd != nil {
			return _cbecd
		}
	}
	if _dddag.DLbls != nil {
		if _cgfc := _dddag.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cgfc != nil {
			return _cgfc
		}
	}
	for _ecec, _bege := range _dddag.Trendline {
		if _ebga := _bege.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _ecec)); _ebga != nil {
			return _ebga
		}
	}
	if _dddag.ErrBars != nil {
		if _dddgb := _dddag.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _dddgb != nil {
			return _dddgb
		}
	}
	if _dddag.Cat != nil {
		if _deca := _dddag.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _deca != nil {
			return _deca
		}
	}
	if _dddag.Val != nil {
		if _abgec := _dddag.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _abgec != nil {
			return _abgec
		}
	}
	if _dddag.Smooth != nil {
		if _agdg := _dddag.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _agdg != nil {
			return _agdg
		}
	}
	if _dddag.ExtLst != nil {
		if _bdbec := _dddag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bdbec != nil {
			return _bdbec
		}
	}
	return nil
}
func (_bedaf *ST_LblOffset) Validate() error { return _bedaf.ValidateWithPath("") }

// ValidateWithPath validates the CT_DLbl and its children, prefixing error messages with path
func (_dgdad *CT_DLbl) ValidateWithPath(path string) error {
	if _dcef := _dgdad.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _dcef != nil {
		return _dcef
	}
	if _dgdad.Choice != nil {
		if _bade := _dgdad.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _bade != nil {
			return _bade
		}
	}
	if _dgdad.ExtLst != nil {
		if _aafg := _dgdad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aafg != nil {
			return _aafg
		}
	}
	return nil
}
func (_fbecc *ST_LayoutTarget) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_fbecc = 0
	case "\u0069\u006e\u006ee\u0072":
		*_fbecc = 1
	case "\u006f\u0075\u0074e\u0072":
		*_fbecc = 2
	}
	return nil
}
func (_eccdf ST_LayoutMode) Validate() error { return _eccdf.ValidateWithPath("") }
func (_abbebe ST_SplitType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_abbebe.String(), start)
}
func NewCT_MultiLvlStrRef() *CT_MultiLvlStrRef { _bdcc := &CT_MultiLvlStrRef{}; return _bdcc }

type CT_Grouping struct{ ValAttr ST_Grouping }

func (_fcca *CT_Surface3DChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fcca.Wireframe != nil {
		_cbafe := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_fcca.Wireframe, _cbafe)
	}
	if _fcca.Ser != nil {
		_gdbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fccef := range _fcca.Ser {
			e.EncodeElement(_fccef, _gdbf)
		}
	}
	if _fcca.BandFmts != nil {
		_gffcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_fcca.BandFmts, _gffcc)
	}
	_dbcga := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bbfge := range _fcca.AxId {
		e.EncodeElement(_bbfge, _dbcga)
	}
	if _fcca.ExtLst != nil {
		_cfgdb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcca.ExtLst, _cfgdb)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_View3D() *CT_View3D { _bcdaf := &CT_View3D{}; return _bcdaf }
func (_baaef *CT_OfPieChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_egbbe := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_baaef.OfPieType, _egbbe)
	if _baaef.VaryColors != nil {
		_egfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_baaef.VaryColors, _egfd)
	}
	if _baaef.Ser != nil {
		_dedc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _adcga := range _baaef.Ser {
			e.EncodeElement(_adcga, _dedc)
		}
	}
	if _baaef.DLbls != nil {
		_fddbe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_baaef.DLbls, _fddbe)
	}
	if _baaef.GapWidth != nil {
		_cafef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_baaef.GapWidth, _cafef)
	}
	if _baaef.SplitType != nil {
		_agbd := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"}}
		e.EncodeElement(_baaef.SplitType, _agbd)
	}
	if _baaef.SplitPos != nil {
		_bdce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}}
		e.EncodeElement(_baaef.SplitPos, _bdce)
	}
	if _baaef.CustSplit != nil {
		_fcge := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0063\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"}}
		e.EncodeElement(_baaef.CustSplit, _fcge)
	}
	if _baaef.SecondPieSize != nil {
		_addcg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073e\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_baaef.SecondPieSize, _addcg)
	}
	if _baaef.SerLines != nil {
		_geaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _ccbbg := range _baaef.SerLines {
			e.EncodeElement(_ccbbg, _geaa)
		}
	}
	if _baaef.ExtLst != nil {
		_dbgc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_baaef.ExtLst, _dbgc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type ST_TickMark byte

func (_dffab *ST_TrendlineType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fecgc, _gfbdf := d.Token()
	if _gfbdf != nil {
		return _gfbdf
	}
	if _fffffd, _dedcb := _fecgc.(_c.EndElement); _dedcb && _fffffd.Name == start.Name {
		*_dffab = 1
		return nil
	}
	if _ceegd, _fcdf := _fecgc.(_c.CharData); !_fcdf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fecgc)
	} else {
		switch string(_ceegd) {
		case "":
			*_dffab = 0
		case "\u0065\u0078\u0070":
			*_dffab = 1
		case "\u006c\u0069\u006e\u0065\u0061\u0072":
			*_dffab = 2
		case "\u006c\u006f\u0067":
			*_dffab = 3
		case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
			*_dffab = 4
		case "\u0070\u006f\u006c\u0079":
			*_dffab = 5
		case "\u0070\u006f\u0077e\u0072":
			*_dffab = 6
		}
	}
	_fecgc, _gfbdf = d.Token()
	if _gfbdf != nil {
		return _gfbdf
	}
	if _fecebe, _beaba := _fecgc.(_c.EndElement); _beaba && _fecebe.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fecgc)
}
func (_ggccc ST_BarGrouping) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_ggccc.String(), start)
}
func (_faaab *ST_BarGrouping) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_edca, _aecba := d.Token()
	if _aecba != nil {
		return _aecba
	}
	if _fegb, _bdded := _edca.(_c.EndElement); _bdded && _fegb.Name == start.Name {
		*_faaab = 1
		return nil
	}
	if _fgabg, _bacfd := _edca.(_c.CharData); !_bacfd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edca)
	} else {
		switch string(_fgabg) {
		case "":
			*_faaab = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_faaab = 1
		case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
			*_faaab = 2
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_faaab = 3
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_faaab = 4
		}
	}
	_edca, _aecba = d.Token()
	if _aecba != nil {
		return _aecba
	}
	if _ggcdf, _fgecd := _edca.(_c.EndElement); _fgecd && _ggcdf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edca)
}
func (_efd *CT_Boolean) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _gbda := range start.Attr {
		if _gbda.Name.Local == "\u0076\u0061\u006c" {
			_aaec, _gad := _e.ParseBool(_gbda.Value)
			if _gad != nil {
				return _gad
			}
			_efd.ValAttr = &_aaec
			continue
		}
	}
	for {
		_gaba, _eee := d.Token()
		if _eee != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e\u003a\u0020%\u0073", _eee)
		}
		if _cgd, _daca := _gaba.(_c.EndElement); _daca && _cgd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eedcad ST_LegendPos) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_eedcad.String(), start)
}

// ValidateWithPath validates the CT_LegendEntry and its children, prefixing error messages with path
func (_gbcc *CT_LegendEntry) ValidateWithPath(path string) error {
	if _bgcfa := _gbcc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bgcfa != nil {
		return _bgcfa
	}
	if _gbcc.Choice != nil {
		if _bbea := _gbcc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _bbea != nil {
			return _bbea
		}
	}
	if _gbcc.ExtLst != nil {
		if _ffae := _gbcc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffae != nil {
			return _ffae
		}
	}
	return nil
}

// Validate validates the CT_Double and its children
func (_afbd *CT_Double) Validate() error {
	return _afbd.ValidateWithPath("\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce")
}

// ValidateWithPath validates the CT_UnsignedInt and its children, prefixing error messages with path
func (_ddcda *CT_UnsignedInt) ValidateWithPath(path string) error { return nil }

type CT_DPt struct {
	Idx              *CT_UnsignedInt
	InvertIfNegative *CT_Boolean
	Marker           *CT_Marker
	Bubble3D         *CT_Boolean
	Explosion        *CT_UnsignedInt
	SpPr             *_d.CT_ShapeProperties
	PictureOptions   *CT_PictureOptions
	ExtLst           *CT_ExtensionList
}
type CT_UpDownBar struct{ SpPr *_d.CT_ShapeProperties }
type CT_SplitType struct{ ValAttr ST_SplitType }

func (_ddead ST_BarGrouping) String() string {
	switch _ddead {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case 3:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 4:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}
func NewCT_ValAx() *CT_ValAx {
	_fffga := &CT_ValAx{}
	_fffga.AxId = NewCT_UnsignedInt()
	_fffga.Scaling = NewCT_Scaling()
	_fffga.AxPos = NewCT_AxPos()
	_fffga.CrossAx = NewCT_UnsignedInt()
	return _fffga
}
func (_gdfed *CT_LayoutTarget) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _gdfed.ValAttr != ST_LayoutTargetUnset {
		_gcfde, _addf := _gdfed.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _addf != nil {
			return _addf
		}
		start.Attr = append(start.Attr, _gcfde)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gfdfa *ST_SplitType) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_gfdfa = 0
	case "\u0061\u0075\u0074\u006f":
		*_gfdfa = 1
	case "\u0063\u0075\u0073\u0074":
		*_gfdfa = 2
	case "\u0070e\u0072\u0063\u0065\u006e\u0074":
		*_gfdfa = 3
	case "\u0070\u006f\u0073":
		*_gfdfa = 4
	case "\u0076\u0061\u006c":
		*_gfdfa = 5
	}
	return nil
}
func (_cddeg ST_DLblPos) Validate() error { return _cddeg.ValidateWithPath("") }
func (_eacc *Group_DLbls) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _eacc.NumFmt != nil {
		_beedff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_eacc.NumFmt, _beedff)
	}
	if _eacc.SpPr != nil {
		_febdc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eacc.SpPr, _febdc)
	}
	if _eacc.TxPr != nil {
		_abfbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eacc.TxPr, _abfbf)
	}
	if _eacc.DLblPos != nil {
		_efab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_eacc.DLblPos, _efab)
	}
	if _eacc.ShowLegendKey != nil {
		_cegbd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_eacc.ShowLegendKey, _cegbd)
	}
	if _eacc.ShowVal != nil {
		_bbcda := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_eacc.ShowVal, _bbcda)
	}
	if _eacc.ShowCatName != nil {
		_egcaa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_eacc.ShowCatName, _egcaa)
	}
	if _eacc.ShowSerName != nil {
		_ebgbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_eacc.ShowSerName, _ebgbf)
	}
	if _eacc.ShowPercent != nil {
		_acgdf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_eacc.ShowPercent, _acgdf)
	}
	if _eacc.ShowBubbleSize != nil {
		_gabbe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_eacc.ShowBubbleSize, _gabbe)
	}
	if _eacc.Separator != nil {
		_bgfcg := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_cf.AddPreserveSpaceAttr(&_bgfcg, *_eacc.Separator)
		e.EncodeElement(_eacc.Separator, _bgfcg)
	}
	if _eacc.ShowLeaderLines != nil {
		_fbddc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_eacc.ShowLeaderLines, _fbddc)
	}
	if _eacc.LeaderLines != nil {
		_bfbfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_eacc.LeaderLines, _bfbfa)
	}
	return nil
}
func (_ggfgd ST_HoleSize) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _ggfgd.ST_HoleSizePercent != nil {
		e.EncodeToken(_c.CharData(*_ggfgd.ST_HoleSizePercent))
	}
	if _ggfgd.ST_HoleSizeUByte != nil {
		e.EncodeToken(_c.CharData(_aa.Sprintf("\u0025\u0064", *_ggfgd.ST_HoleSizeUByte)))
	}
	return e.EncodeToken(_c.EndElement{Name: start.Name})
}

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (_gbfce *CT_PivotFmts) ValidateWithPath(path string) error {
	for _eddbg, _adcgaf := range _gbfce.PivotFmt {
		if _egdcg := _adcgaf.ValidateWithPath(_aa.Sprintf("\u0025s\u002fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u005b\u0025\u0064\u005d", path, _eddbg)); _egdcg != nil {
			return _egdcg
		}
	}
	return nil
}

type CT_BarChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	Overlap    *CT_Overlap
	SerLines   []*CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_RadarChart() *CT_RadarChart {
	_cdeb := &CT_RadarChart{}
	_cdeb.RadarStyle = NewCT_RadarStyle()
	return _cdeb
}

type CT_BarDir struct{ ValAttr ST_BarDir }

const (
	ST_TickLblPosUnset  ST_TickLblPos = 0
	ST_TickLblPosHigh   ST_TickLblPos = 1
	ST_TickLblPosLow    ST_TickLblPos = 2
	ST_TickLblPosNextTo ST_TickLblPos = 3
	ST_TickLblPosNone   ST_TickLblPos = 4
)
const (
	ST_RadarStyleUnset    ST_RadarStyle = 0
	ST_RadarStyleStandard ST_RadarStyle = 1
	ST_RadarStyleMarker   ST_RadarStyle = 2
	ST_RadarStyleFilled   ST_RadarStyle = 3
)

func (_dfade *CT_FirstSliceAng) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dfade.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_dfade.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gabef *ST_SplitType) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_acdae, _aaagd := d.Token()
	if _aaagd != nil {
		return _aaagd
	}
	if _cdbaf, _aecec := _acdae.(_c.EndElement); _aecec && _cdbaf.Name == start.Name {
		*_gabef = 1
		return nil
	}
	if _ddaeb, _gefed := _acdae.(_c.CharData); !_gefed {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acdae)
	} else {
		switch string(_ddaeb) {
		case "":
			*_gabef = 0
		case "\u0061\u0075\u0074\u006f":
			*_gabef = 1
		case "\u0063\u0075\u0073\u0074":
			*_gabef = 2
		case "\u0070e\u0072\u0063\u0065\u006e\u0074":
			*_gabef = 3
		case "\u0070\u006f\u0073":
			*_gabef = 4
		case "\u0076\u0061\u006c":
			*_gabef = 5
		}
	}
	_acdae, _aaagd = d.Token()
	if _aaagd != nil {
		return _aaagd
	}
	if _dedd, _gfafc := _acdae.(_c.EndElement); _gfafc && _dedd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acdae)
}
func (_ccec ST_LayoutTarget) ValidateWithPath(path string) error {
	switch _ccec {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ccec))
	}
	return nil
}
func (_baef *CT_PivotFmts) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _baef.PivotFmt != nil {
		_bbdf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}}
		for _, _eefa := range _baef.PivotFmt {
			e.EncodeElement(_eefa, _bbdf)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_StrRef and its children
func (_bgcg *CT_StrRef) Validate() error {
	return _bgcg.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f")
}

type CT_ScatterStyle struct{ ValAttr ST_ScatterStyle }

// Validate validates the CT_StockChart and its children
func (_bfag *CT_StockChart) Validate() error {
	return _bfag.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074")
}

type CT_MultiLvlStrRef struct {
	F                string
	MultiLvlStrCache *CT_MultiLvlStrData
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_BarGrouping and its children, prefixing error messages with path
func (_ebdg *CT_BarGrouping) ValidateWithPath(path string) error {
	if _gfcf := _ebdg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gfcf != nil {
		return _gfcf
	}
	return nil
}

// Validate validates the EG_SerShared and its children
func (_agdga *EG_SerShared) Validate() error {
	return _agdga.ValidateWithPath("\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064")
}

// Validate validates the CT_TxChoice and its children
func (_ffgc *CT_TxChoice) Validate() error {
	return _ffgc.ValidateWithPath("C\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065")
}
func (_abfac *CT_SurfaceSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_gefda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_abfac.Idx, _gefda)
	_ddcfd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_abfac.Order, _ddcfd)
	if _abfac.Tx != nil {
		_gddag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_abfac.Tx, _gddag)
	}
	if _abfac.SpPr != nil {
		_debbg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_abfac.SpPr, _debbg)
	}
	if _abfac.Cat != nil {
		_ecfe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_abfac.Cat, _ecfe)
	}
	if _abfac.Val != nil {
		_faabc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_abfac.Val, _faabc)
	}
	if _abfac.ExtLst != nil {
		_gcdgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abfac.ExtLst, _gcdgf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_ecbcb ST_MarkerStyle) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gbcce := _c.Attr{}
	_gbcce.Name = name
	switch _ecbcb {
	case ST_MarkerStyleUnset:
		_gbcce.Value = ""
	case ST_MarkerStyleCircle:
		_gbcce.Value = "\u0063\u0069\u0072\u0063\u006c\u0065"
	case ST_MarkerStyleDash:
		_gbcce.Value = "\u0064\u0061\u0073\u0068"
	case ST_MarkerStyleDiamond:
		_gbcce.Value = "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case ST_MarkerStyleDot:
		_gbcce.Value = "\u0064\u006f\u0074"
	case ST_MarkerStyleNone:
		_gbcce.Value = "\u006e\u006f\u006e\u0065"
	case ST_MarkerStylePicture:
		_gbcce.Value = "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case ST_MarkerStylePlus:
		_gbcce.Value = "\u0070\u006c\u0075\u0073"
	case ST_MarkerStyleSquare:
		_gbcce.Value = "\u0073\u0071\u0075\u0061\u0072\u0065"
	case ST_MarkerStyleStar:
		_gbcce.Value = "\u0073\u0074\u0061\u0072"
	case ST_MarkerStyleTriangle:
		_gbcce.Value = "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case ST_MarkerStyleX:
		_gbcce.Value = "\u0078"
	case ST_MarkerStyleAuto:
		_gbcce.Value = "\u0061\u0075\u0074\u006f"
	}
	return _gbcce, nil
}

type ST_SplitType byte

func NewCT_TextLanguageID() *CT_TextLanguageID { _fdga := &CT_TextLanguageID{}; return _fdga }
func (_fgaad *EG_LegendEntryData) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bffc:
	for {
		_gaagf, _ebfeg := d.Token()
		if _ebfeg != nil {
			return _ebfeg
		}
		switch _dcgfc := _gaagf.(type) {
		case _c.StartElement:
			switch _dcgfc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fgaad.TxPr = _d.NewCT_TextBody()
				if _degad := d.DecodeElement(_fgaad.TxPr, &_dcgfc); _degad != nil {
					return _degad
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _dcgfc.Name)
				if _gecfeb := d.Skip(); _gecfeb != nil {
					return _gecfeb
				}
			}
		case _c.EndElement:
			break _bffc
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_SplitType() *CT_SplitType { _beag := &CT_SplitType{}; return _beag }

// Validate validates the CT_PictureOptions and its children
func (_edegf *CT_PictureOptions) Validate() error {
	return _edegf.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073")
}
func (_acgdd ST_PictureFormat) ValidateWithPath(path string) error {
	switch _acgdd {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acgdd))
	}
	return nil
}
func (_fbfad *UserShapes) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"
	return _fbfad.CT_Drawing.MarshalXML(e, start)
}
func NewCT_PageMargins() *CT_PageMargins { _dfgcd := &CT_PageMargins{}; return _dfgcd }

type ST_DispBlanksAs byte

const ST_GapAmountPercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

// Validate validates the CT_ExtensionList and its children
func (_faae *CT_ExtensionList) Validate() error {
	return _faae.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}
func (_abdbg ST_Shape) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_abdbg.String(), start)
}

// Validate validates the CT_PictureFormat and its children
func (_daded *CT_PictureFormat) Validate() error {
	return _daded.ValidateWithPath("\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074")
}
func (_geedf ST_MarkerStyle) Validate() error { return _geedf.ValidateWithPath("") }
func (_cfgefg ST_ErrBarType) ValidateWithPath(path string) error {
	switch _cfgefg {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cfgefg))
	}
	return nil
}
func NewCT_GapAmount() *CT_GapAmount { _fdcaf := &CT_GapAmount{}; return _fdcaf }
func (_fefgg *CT_ErrDir) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_gdfa, _febc := _fefgg.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _febc != nil {
		return _febc
	}
	start.Attr = append(start.Attr, _gdfa)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fbdc *CT_ErrValType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _fbdc.ValAttr != ST_ErrValTypeUnset {
		_cbeaf, _ecdf := _fbdc.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _ecdf != nil {
			return _ecdf
		}
		start.Attr = append(start.Attr, _cbeaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fffcc *CT_TrendlineLbl) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _fffcc.Layout != nil {
		_eddgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fffcc.Layout, _eddgf)
	}
	if _fffcc.Tx != nil {
		_afgag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fffcc.Tx, _afgag)
	}
	if _fffcc.NumFmt != nil {
		_ddgdf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fffcc.NumFmt, _ddgdf)
	}
	if _fffcc.SpPr != nil {
		_bdgdg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fffcc.SpPr, _bdgdg)
	}
	if _fffcc.TxPr != nil {
		_aacg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fffcc.TxPr, _aacg)
	}
	if _fffcc.ExtLst != nil {
		_eggcg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fffcc.ExtLst, _eggcg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gecfb ST_TimeUnit) Validate() error { return _gecfb.ValidateWithPath("") }
func NewCT_Protection() *CT_Protection     { _cagb := &CT_Protection{}; return _cagb }
func (_efee *CT_PivotFmt) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_efee.Idx = NewCT_UnsignedInt()
_cegba:
	for {
		_ggfcf, _bfff := d.Token()
		if _bfff != nil {
			return _bfff
		}
		switch _ddcb := _ggfcf.(type) {
		case _c.StartElement:
			switch _ddcb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bgbgd := d.DecodeElement(_efee.Idx, &_ddcb); _bgbgd != nil {
					return _bgbgd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_efee.SpPr = _d.NewCT_ShapeProperties()
				if _bbbe := d.DecodeElement(_efee.SpPr, &_ddcb); _bbbe != nil {
					return _bbbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_efee.TxPr = _d.NewCT_TextBody()
				if _ccgec := d.DecodeElement(_efee.TxPr, &_ddcb); _ccgec != nil {
					return _ccgec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_efee.Marker = NewCT_Marker()
				if _fbdcb := d.DecodeElement(_efee.Marker, &_ddcb); _fbdcb != nil {
					return _fbdcb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_efee.DLbl = NewCT_DLbl()
				if _befee := d.DecodeElement(_efee.DLbl, &_ddcb); _befee != nil {
					return _befee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efee.ExtLst = NewCT_ExtensionList()
				if _fafde := d.DecodeElement(_efee.ExtLst, &_ddcb); _fafde != nil {
					return _fafde
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0020\u0025\u0076", _ddcb.Name)
				if _adafd := d.Skip(); _adafd != nil {
					return _adafd
				}
			}
		case _c.EndElement:
			break _cegba
		case _c.CharData:
		}
	}
	return nil
}
func (_beedf *CT_LegendEntry) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_bgdab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_beedf.Idx, _bgdab)
	if _beedf.Choice != nil {
		_beedf.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _beedf.ExtLst != nil {
		_gdbef := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beedf.ExtLst, _gdbef)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cdeba *ST_DLblPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fbebc, _efffg := d.Token()
	if _efffg != nil {
		return _efffg
	}
	if _gcef, _fegeeg := _fbebc.(_c.EndElement); _fegeeg && _gcef.Name == start.Name {
		*_cdeba = 1
		return nil
	}
	if _debab, _ecbcc := _fbebc.(_c.CharData); !_ecbcc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbebc)
	} else {
		switch string(_debab) {
		case "":
			*_cdeba = 0
		case "\u0062e\u0073\u0074\u0046\u0069\u0074":
			*_cdeba = 1
		case "\u0062":
			*_cdeba = 2
		case "\u0063\u0074\u0072":
			*_cdeba = 3
		case "\u0069\u006e\u0042\u0061\u0073\u0065":
			*_cdeba = 4
		case "\u0069\u006e\u0045n\u0064":
			*_cdeba = 5
		case "\u006c":
			*_cdeba = 6
		case "\u006f\u0075\u0074\u0045\u006e\u0064":
			*_cdeba = 7
		case "\u0072":
			*_cdeba = 8
		case "\u0074":
			*_cdeba = 9
		}
	}
	_fbebc, _efffg = d.Token()
	if _efffg != nil {
		return _efffg
	}
	if _ecggg, _cccfa := _fbebc.(_c.EndElement); _cccfa && _ecggg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbebc)
}

type CT_AxPos struct{ ValAttr ST_AxPos }
type CT_LblOffset struct{ ValAttr *ST_LblOffset }

func (_dabdf *CT_TrendlineLbl) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cgfe:
	for {
		_efdfg, _gcffg := d.Token()
		if _gcffg != nil {
			return _gcffg
		}
		switch _cccdf := _efdfg.(type) {
		case _c.StartElement:
			switch _cccdf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_dabdf.Layout = NewCT_Layout()
				if _fabfd := d.DecodeElement(_dabdf.Layout, &_cccdf); _fabfd != nil {
					return _fabfd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_dabdf.Tx = NewCT_Tx()
				if _fdegc := d.DecodeElement(_dabdf.Tx, &_cccdf); _fdegc != nil {
					return _fdegc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_dabdf.NumFmt = NewCT_NumFmt()
				if _edaef := d.DecodeElement(_dabdf.NumFmt, &_cccdf); _edaef != nil {
					return _edaef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dabdf.SpPr = _d.NewCT_ShapeProperties()
				if _gfgb := d.DecodeElement(_dabdf.SpPr, &_cccdf); _gfgb != nil {
					return _gfgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dabdf.TxPr = _d.NewCT_TextBody()
				if _fadcg := d.DecodeElement(_dabdf.TxPr, &_cccdf); _fadcg != nil {
					return _fadcg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dabdf.ExtLst = NewCT_ExtensionList()
				if _cdbe := d.DecodeElement(_dabdf.ExtLst, &_cccdf); _cdbe != nil {
					return _cdbe
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c\u0020\u0025\u0076", _cccdf.Name)
				if _bggc := d.Skip(); _bggc != nil {
					return _bggc
				}
			}
		case _c.EndElement:
			break _cgfe
		case _c.CharData:
		}
	}
	return nil
}
func (_cceda ST_TrendlineType) ValidateWithPath(path string) error {
	switch _cceda {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cceda))
	}
	return nil
}
func (_fdcga ST_TrendlineType) String() string {
	switch _fdcga {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0070"
	case 2:
		return "\u006c\u0069\u006e\u0065\u0061\u0072"
	case 3:
		return "\u006c\u006f\u0067"
	case 4:
		return "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case 5:
		return "\u0070\u006f\u006c\u0079"
	case 6:
		return "\u0070\u006f\u0077e\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_AxisUnit and its children, prefixing error messages with path
func (_fcf *CT_AxisUnit) ValidateWithPath(path string) error {
	if _fcf.ValAttr <= 0 {
		return _aa.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _fcf.ValAttr)
	}
	return nil
}

// ValidateWithPath validates the CT_NumRef and its children, prefixing error messages with path
func (_efedc *CT_NumRef) ValidateWithPath(path string) error {
	if _efedc.NumCache != nil {
		if _gdec := _efedc.NumCache.ValidateWithPath(path + "\u002fN\u0075\u006d\u0043\u0061\u0063\u0068e"); _gdec != nil {
			return _gdec
		}
	}
	if _efedc.ExtLst != nil {
		if _gfef := _efedc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfef != nil {
			return _gfef
		}
	}
	return nil
}
func (_bcecfaa ST_LegendPos) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gbgedd := _c.Attr{}
	_gbgedd.Name = name
	switch _bcecfaa {
	case ST_LegendPosUnset:
		_gbgedd.Value = ""
	case ST_LegendPosB:
		_gbgedd.Value = "\u0062"
	case ST_LegendPosTr:
		_gbgedd.Value = "\u0074\u0072"
	case ST_LegendPosL:
		_gbgedd.Value = "\u006c"
	case ST_LegendPosR:
		_gbgedd.Value = "\u0072"
	case ST_LegendPosT:
		_gbgedd.Value = "\u0074"
	}
	return _gbgedd, nil
}
func (_geddf *ST_LblAlgn) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cgbgc, _cfgea := d.Token()
	if _cfgea != nil {
		return _cfgea
	}
	if _aeagg, _aegba := _cgbgc.(_c.EndElement); _aegba && _aeagg.Name == start.Name {
		*_geddf = 1
		return nil
	}
	if _dgabb, _eaabc := _cgbgc.(_c.CharData); !_eaabc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cgbgc)
	} else {
		switch string(_dgabb) {
		case "":
			*_geddf = 0
		case "\u0063\u0074\u0072":
			*_geddf = 1
		case "\u006c":
			*_geddf = 2
		case "\u0072":
			*_geddf = 3
		}
	}
	_cgbgc, _cfgea = d.Token()
	if _cfgea != nil {
		return _cfgea
	}
	if _bgfge, _fcfef := _cgbgc.(_c.EndElement); _fcfef && _bgfge.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cgbgc)
}
func NewCT_AxDataSourceChoice() *CT_AxDataSourceChoice { _bfa := &CT_AxDataSourceChoice{}; return _bfa }
func (_eega *CT_Grouping) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _defg := range start.Attr {
		if _defg.Name.Local == "\u0076\u0061\u006c" {
			_eega.ValAttr.UnmarshalXMLAttr(_defg)
			continue
		}
	}
	for {
		_dcafc, _ffgd := d.Token()
		if _ffgd != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0073", _ffgd)
		}
		if _baecg, _bacg := _dcafc.(_c.EndElement); _bacg && _baecg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSourceChoice and its children, prefixing error messages with path
func (_abe *CT_AxDataSourceChoice) ValidateWithPath(path string) error {
	if _abe.MultiLvlStrRef != nil {
		if _gcb := _abe.MultiLvlStrRef.ValidateWithPath(path + "\u002fM\u0075l\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"); _gcb != nil {
			return _gcb
		}
	}
	if _abe.NumRef != nil {
		if _fdde := _abe.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _fdde != nil {
			return _fdde
		}
	}
	if _abe.NumLit != nil {
		if _ffa := _abe.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _ffa != nil {
			return _ffa
		}
	}
	if _abe.StrRef != nil {
		if _deaa := _abe.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _deaa != nil {
			return _deaa
		}
	}
	if _abe.StrLit != nil {
		if _cbc := _abe.StrLit.ValidateWithPath(path + "\u002fS\u0074\u0072\u004c\u0069\u0074"); _cbc != nil {
			return _cbc
		}
	}
	return nil
}
func (_cafac *CT_Shape) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bebda := range start.Attr {
		if _bebda.Name.Local == "\u0076\u0061\u006c" {
			_cafac.ValAttr.UnmarshalXMLAttr(_bebda)
			continue
		}
	}
	for {
		_edcb, _cgge := d.Token()
		if _cgge != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0068\u0061\u0070\u0065: \u0025\u0073", _cgge)
		}
		if _bedeea, _gbcfc := _edcb.(_c.EndElement); _gbcfc && _bedeea.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_HeaderFooter struct {
	AlignWithMarginsAttr *bool
	DifferentOddEvenAttr *bool
	DifferentFirstAttr   *bool
	OddHeader            *string
	OddFooter            *string
	EvenHeader           *string
	EvenFooter           *string
	FirstHeader          *string
	FirstFooter          *string
}

// Validate validates the CT_FirstSliceAng and its children
func (_cggbg *CT_FirstSliceAng) Validate() error {
	return _cggbg.ValidateWithPath("\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067")
}

// ValidateWithPath validates the CT_TxChoice and its children, prefixing error messages with path
func (_febcf *CT_TxChoice) ValidateWithPath(path string) error {
	if _febcf.StrRef != nil {
		if _bdddg := _febcf.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _bdddg != nil {
			return _bdddg
		}
	}
	if _febcf.Rich != nil {
		if _bggeg := _febcf.Rich.ValidateWithPath(path + "\u002f\u0052\u0069c\u0068"); _bggeg != nil {
			return _bggeg
		}
	}
	return nil
}
func (_gdga *CT_HoleSize) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _aabd := range start.Attr {
		if _aabd.Name.Local == "\u0076\u0061\u006c" {
			_ccde, _ffbcb := ParseUnionST_HoleSize(_aabd.Value)
			if _ffbcb != nil {
				return _ffbcb
			}
			_gdga.ValAttr = &_ccde
			continue
		}
	}
	for {
		_bfada, _baaca := d.Token()
		if _baaca != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0073", _baaca)
		}
		if _daaf, _ebcf := _bfada.(_c.EndElement); _ebcf && _daaf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cbgbdc *ST_BuiltInUnit) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_aeafa, _bacgb := d.Token()
	if _bacgb != nil {
		return _bacgb
	}
	if _ggdgg, _caadc := _aeafa.(_c.EndElement); _caadc && _ggdgg.Name == start.Name {
		*_cbgbdc = 1
		return nil
	}
	if _bfaeab, _faddc := _aeafa.(_c.CharData); !_faddc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeafa)
	} else {
		switch string(_bfaeab) {
		case "":
			*_cbgbdc = 0
		case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
			*_cbgbdc = 1
		case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
			*_cbgbdc = 2
		case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_cbgbdc = 3
		case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_cbgbdc = 4
		case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_cbgbdc = 5
		case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_cbgbdc = 6
		case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_cbgbdc = 7
		case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_cbgbdc = 8
		case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
			*_cbgbdc = 9
		}
	}
	_aeafa, _bacgb = d.Token()
	if _bacgb != nil {
		return _bacgb
	}
	if _fbfec, _feeab := _aeafa.(_c.EndElement); _feeab && _fbfec.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeafa)
}
func (_eced *CT_ErrBars) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_eced.ErrBarType = NewCT_ErrBarType()
	_eced.ErrValType = NewCT_ErrValType()
_bbcae:
	for {
		_bggfd, _aaac := d.Token()
		if _aaac != nil {
			return _aaac
		}
		switch _effd := _bggfd.(type) {
		case _c.StartElement:
			switch _effd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}:
				_eced.ErrDir = NewCT_ErrDir()
				if _aeace := d.DecodeElement(_eced.ErrDir, &_effd); _aeace != nil {
					return _aeace
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}:
				if _bdgc := d.DecodeElement(_eced.ErrBarType, &_effd); _bdgc != nil {
					return _bdgc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}:
				if _gadg := d.DecodeElement(_eced.ErrValType, &_effd); _gadg != nil {
					return _gadg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}:
				_eced.NoEndCap = NewCT_Boolean()
				if _efdad := d.DecodeElement(_eced.NoEndCap, &_effd); _efdad != nil {
					return _efdad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}:
				_eced.Plus = NewCT_NumDataSource()
				if _dbf := d.DecodeElement(_eced.Plus, &_effd); _dbf != nil {
					return _dbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}:
				_eced.Minus = NewCT_NumDataSource()
				if _cecf := d.DecodeElement(_eced.Minus, &_effd); _cecf != nil {
					return _cecf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_eced.Val = NewCT_Double()
				if _bgafc := d.DecodeElement(_eced.Val, &_effd); _bgafc != nil {
					return _bgafc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eced.SpPr = _d.NewCT_ShapeProperties()
				if _faac := d.DecodeElement(_eced.SpPr, &_effd); _faac != nil {
					return _faac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eced.ExtLst = NewCT_ExtensionList()
				if _cgdg := d.DecodeElement(_eced.ExtLst, &_effd); _cgdg != nil {
					return _cgdg
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0072\u0072\u0042\u0061\u0072\u0073\u0020\u0025\u0076", _effd.Name)
				if _eddg := d.Skip(); _eddg != nil {
					return _eddg
				}
			}
		case _c.EndElement:
			break _bbcae
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_UpDownBars() *CT_UpDownBars { _degc := &CT_UpDownBars{}; return _degc }
func (_dbce *CT_LblOffset) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _cege := range start.Attr {
		if _cege.Name.Local == "\u0076\u0061\u006c" {
			_bcecf, _dbbcb := ParseUnionST_LblOffset(_cege.Value)
			if _dbbcb != nil {
				return _dbbcb
			}
			_dbce.ValAttr = &_bcecf
			continue
		}
	}
	for {
		_ffeb, _cfbab := d.Token()
		if _cfbab != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0062l\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0073", _cfbab)
		}
		if _cdd, _daad := _ffeb.(_c.EndElement); _daad && _cdd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ccfga *ST_ErrValType) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_ccfga = 0
	case "\u0063\u0075\u0073\u0074":
		*_ccfga = 1
	case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_ccfga = 2
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
		*_ccfga = 3
	case "\u0073\u0074\u0064\u0044\u0065\u0076":
		*_ccfga = 4
	case "\u0073\u0074\u0064\u0045\u0072\u0072":
		*_ccfga = 5
	}
	return nil
}

// ValidateWithPath validates the CT_AreaSer and its children, prefixing error messages with path
func (_efg *CT_AreaSer) ValidateWithPath(path string) error {
	if _gcf := _efg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gcf != nil {
		return _gcf
	}
	if _ggcg := _efg.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ggcg != nil {
		return _ggcg
	}
	if _efg.Tx != nil {
		if _bec := _efg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bec != nil {
			return _bec
		}
	}
	if _efg.SpPr != nil {
		if _fab := _efg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fab != nil {
			return _fab
		}
	}
	if _efg.PictureOptions != nil {
		if _fdc := _efg.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _fdc != nil {
			return _fdc
		}
	}
	for _ecg, _eab := range _efg.DPt {
		if _ddb := _eab.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _ecg)); _ddb != nil {
			return _ddb
		}
	}
	if _efg.DLbls != nil {
		if _fdcc := _efg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fdcc != nil {
			return _fdcc
		}
	}
	for _ceb, _fdd := range _efg.Trendline {
		if _gfb := _fdd.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _ceb)); _gfb != nil {
			return _gfb
		}
	}
	for _egbb, _agb := range _efg.ErrBars {
		if _afab := _agb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _egbb)); _afab != nil {
			return _afab
		}
	}
	if _efg.Cat != nil {
		if _abf := _efg.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _abf != nil {
			return _abf
		}
	}
	if _efg.Val != nil {
		if _daa := _efg.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _daa != nil {
			return _daa
		}
	}
	if _efg.ExtLst != nil {
		if _ebb := _efg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ebb != nil {
			return _ebb
		}
	}
	return nil
}

// Validate validates the CT_OfPieChart and its children
func (_aaabb *CT_OfPieChart) Validate() error {
	return _aaabb.ValidateWithPath("\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_eadbg *CT_PageSetup) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _aggf := range start.Attr {
		if _aggf.Name.Local == "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae" {
			_bdae, _cadfd := _e.ParseUint(_aggf.Value, 10, 32)
			if _cadfd != nil {
				return _cadfd
			}
			_bbcac := uint32(_bdae)
			_eadbg.PaperSizeAttr = &_bbcac
			continue
		}
		if _aggf.Name.Local == "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074" {
			_fgfcd, _agcda := _aggf.Value, error(nil)
			if _agcda != nil {
				return _agcda
			}
			_eadbg.PaperHeightAttr = &_fgfcd
			continue
		}
		if _aggf.Name.Local == "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068" {
			_eacfe, _bdba := _aggf.Value, error(nil)
			if _bdba != nil {
				return _bdba
			}
			_eadbg.PaperWidthAttr = &_eacfe
			continue
		}
		if _aggf.Name.Local == "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072" {
			_cefbd, _gbegc := _e.ParseUint(_aggf.Value, 10, 32)
			if _gbegc != nil {
				return _gbegc
			}
			_cbffd := uint32(_cefbd)
			_eadbg.FirstPageNumberAttr = &_cbffd
			continue
		}
		if _aggf.Name.Local == "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e" {
			_eadbg.OrientationAttr.UnmarshalXMLAttr(_aggf)
			continue
		}
		if _aggf.Name.Local == "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065" {
			_bdgb, _dbfcd := _e.ParseBool(_aggf.Value)
			if _dbfcd != nil {
				return _dbfcd
			}
			_eadbg.BlackAndWhiteAttr = &_bdgb
			continue
		}
		if _aggf.Name.Local == "\u0064\u0072\u0061f\u0074" {
			_dddfd, _daegg := _e.ParseBool(_aggf.Value)
			if _daegg != nil {
				return _daegg
			}
			_eadbg.DraftAttr = &_dddfd
			continue
		}
		if _aggf.Name.Local == "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072" {
			_deffd, _cefd := _e.ParseBool(_aggf.Value)
			if _cefd != nil {
				return _cefd
			}
			_eadbg.UseFirstPageNumberAttr = &_deffd
			continue
		}
		if _aggf.Name.Local == "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069" {
			_decdg, _bfcbe := _e.ParseInt(_aggf.Value, 10, 32)
			if _bfcbe != nil {
				return _bfcbe
			}
			_gccfg := int32(_decdg)
			_eadbg.HorizontalDpiAttr = &_gccfg
			continue
		}
		if _aggf.Name.Local == "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069" {
			_fddefd, _afabb := _e.ParseInt(_aggf.Value, 10, 32)
			if _afabb != nil {
				return _afabb
			}
			_gagge := int32(_fddefd)
			_eadbg.VerticalDpiAttr = &_gagge
			continue
		}
		if _aggf.Name.Local == "\u0063\u006f\u0070\u0069\u0065\u0073" {
			_dcegb, _gaga := _e.ParseUint(_aggf.Value, 10, 32)
			if _gaga != nil {
				return _gaga
			}
			_fbfa := uint32(_dcegb)
			_eadbg.CopiesAttr = &_fbfa
			continue
		}
	}
	for {
		_caff, _gdaea := d.Token()
		if _gdaea != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061g\u0065\u0053\u0065\u0074\u0075\u0070\u003a\u0020\u0025\u0073", _gdaea)
		}
		if _bagb, _afca := _caff.(_c.EndElement); _afca && _bagb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aecbe ST_TrendlineType) Validate() error { return _aecbe.ValidateWithPath("") }

// Validate validates the CT_MultiLvlStrRef and its children
func (_efcec *CT_MultiLvlStrRef) Validate() error {
	return _efcec.ValidateWithPath("\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066")
}
func (_cedga *CT_SurfaceSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cedga.Idx = NewCT_UnsignedInt()
	_cedga.Order = NewCT_UnsignedInt()
_dggbd:
	for {
		_befgc, _aagd := d.Token()
		if _aagd != nil {
			return _aagd
		}
		switch _fgcaac := _befgc.(type) {
		case _c.StartElement:
			switch _fgcaac.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gebfdg := d.DecodeElement(_cedga.Idx, &_fgcaac); _gebfdg != nil {
					return _gebfdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eacd := d.DecodeElement(_cedga.Order, &_fgcaac); _eacd != nil {
					return _eacd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cedga.Tx = NewCT_SerTx()
				if _fbgec := d.DecodeElement(_cedga.Tx, &_fgcaac); _fbgec != nil {
					return _fbgec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cedga.SpPr = _d.NewCT_ShapeProperties()
				if _debag := d.DecodeElement(_cedga.SpPr, &_fgcaac); _debag != nil {
					return _debag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_cedga.Cat = NewCT_AxDataSource()
				if _decdd := d.DecodeElement(_cedga.Cat, &_fgcaac); _decdd != nil {
					return _decdd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_cedga.Val = NewCT_NumDataSource()
				if _begca := d.DecodeElement(_cedga.Val, &_fgcaac); _begca != nil {
					return _begca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cedga.ExtLst = NewCT_ExtensionList()
				if _cdacb := d.DecodeElement(_cedga.ExtLst, &_fgcaac); _cdacb != nil {
					return _cdacb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053u\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072 \u0025\u0076", _fgcaac.Name)
				if _fbggd := d.Skip(); _fbggd != nil {
					return _fbggd
				}
			}
		case _c.EndElement:
			break _dggbd
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DoughnutChart and its children
func (_ccfb *CT_DoughnutChart) Validate() error {
	return _ccfb.ValidateWithPath("\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074")
}
func (_egfc *CT_DTable) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_beeb:
	for {
		_gega, _fefgf := d.Token()
		if _fefgf != nil {
			return _fefgf
		}
		switch _dgfc := _gega.(type) {
		case _c.StartElement:
			switch _dgfc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}:
				_egfc.ShowHorzBorder = NewCT_Boolean()
				if _agab := d.DecodeElement(_egfc.ShowHorzBorder, &_dgfc); _agab != nil {
					return _agab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}:
				_egfc.ShowVertBorder = NewCT_Boolean()
				if _decb := d.DecodeElement(_egfc.ShowVertBorder, &_dgfc); _decb != nil {
					return _decb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}:
				_egfc.ShowOutline = NewCT_Boolean()
				if _aeeg := d.DecodeElement(_egfc.ShowOutline, &_dgfc); _aeeg != nil {
					return _aeeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}:
				_egfc.ShowKeys = NewCT_Boolean()
				if _eddfb := d.DecodeElement(_egfc.ShowKeys, &_dgfc); _eddfb != nil {
					return _eddfb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_egfc.SpPr = _d.NewCT_ShapeProperties()
				if _gdde := d.DecodeElement(_egfc.SpPr, &_dgfc); _gdde != nil {
					return _gdde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_egfc.TxPr = _d.NewCT_TextBody()
				if _geeb := d.DecodeElement(_egfc.TxPr, &_dgfc); _geeb != nil {
					return _geeb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egfc.ExtLst = NewCT_ExtensionList()
				if _agcc := d.DecodeElement(_egfc.ExtLst, &_dgfc); _agcc != nil {
					return _agcc
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0054\u0061b\u006c\u0065 \u0025\u0076", _dgfc.Name)
				if _bgbd := d.Skip(); _bgbd != nil {
					return _bgbd
				}
			}
		case _c.EndElement:
			break _beeb
		case _c.CharData:
		}
	}
	return nil
}

type CT_SerTx struct{ Choice *CT_SerTxChoice }

func NewCT_SecondPieSize() *CT_SecondPieSize { _cbde := &CT_SecondPieSize{}; return _cbde }

// Validate validates the CT_SerAx and its children
func (_gfgff *CT_SerAx) Validate() error {
	return _gfgff.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078")
}

// ValidateWithPath validates the CT_BarSer and its children, prefixing error messages with path
func (_cbgg *CT_BarSer) ValidateWithPath(path string) error {
	if _fadf := _cbgg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fadf != nil {
		return _fadf
	}
	if _cadce := _cbgg.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _cadce != nil {
		return _cadce
	}
	if _cbgg.Tx != nil {
		if _egae := _cbgg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _egae != nil {
			return _egae
		}
	}
	if _cbgg.SpPr != nil {
		if _geff := _cbgg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _geff != nil {
			return _geff
		}
	}
	if _cbgg.InvertIfNegative != nil {
		if _feda := _cbgg.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _feda != nil {
			return _feda
		}
	}
	if _cbgg.PictureOptions != nil {
		if _eedc := _cbgg.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _eedc != nil {
			return _eedc
		}
	}
	for _dgdf, _bfae := range _cbgg.DPt {
		if _dfac := _bfae.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _dgdf)); _dfac != nil {
			return _dfac
		}
	}
	if _cbgg.DLbls != nil {
		if _dgdd := _cbgg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dgdd != nil {
			return _dgdd
		}
	}
	for _bcc, _acdb := range _cbgg.Trendline {
		if _gddg := _acdb.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _bcc)); _gddg != nil {
			return _gddg
		}
	}
	if _cbgg.ErrBars != nil {
		if _fgf := _cbgg.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _fgf != nil {
			return _fgf
		}
	}
	if _cbgg.Cat != nil {
		if _gga := _cbgg.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _gga != nil {
			return _gga
		}
	}
	if _cbgg.Val != nil {
		if _abfe := _cbgg.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _abfe != nil {
			return _abfe
		}
	}
	if _cbgg.Shape != nil {
		if _gcca := _cbgg.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _gcca != nil {
			return _gcca
		}
	}
	if _cbgg.ExtLst != nil {
		if _egd := _cbgg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egd != nil {
			return _egd
		}
	}
	return nil
}

type CT_NumDataSource struct{ Choice *CT_NumDataSourceChoice }

const ST_HPercentWithSymbolPattern = "0\u002a\u0028\u0028\u005b\u0035\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

func NewCT_CrossBetween() *CT_CrossBetween {
	_gddf := &CT_CrossBetween{}
	_gddf.ValAttr = ST_CrossBetween(1)
	return _gddf
}
func ParseUnionST_HPercent(s string) (ST_HPercent, error) {
	if ST_HPercentWithSymbolPatternRe.MatchString(s) {
		return ST_HPercent{ST_HPercentWithSymbol: &s}, nil
	}
	_aeda, _fgecf := _e.ParseUint(s, 10, 16)
	if _fgecf != nil {
		return ST_HPercent{}, _fgecf
	}
	_ggcgg := uint16(_aeda)
	return ST_HPercent{ST_HPercentUShort: &_ggcgg}, nil
}
func (_edgbg *CT_Scaling) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _edgbg.LogBase != nil {
		_edfgg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006c\u006f\u0067\u0042\u0061\u0073e"}}
		e.EncodeElement(_edgbg.LogBase, _edfgg)
	}
	if _edgbg.Orientation != nil {
		_cdfg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006f\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_edgbg.Orientation, _cdfg)
	}
	if _edgbg.Max != nil {
		_gecd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006da\u0078"}}
		e.EncodeElement(_edgbg.Max, _gecd)
	}
	if _edgbg.Min != nil {
		_beff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006di\u006e"}}
		e.EncodeElement(_edgbg.Min, _beff)
	}
	if _edgbg.ExtLst != nil {
		_cbeg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edgbg.ExtLst, _cbeg)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_PieChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	ExtLst        *CT_ExtensionList
}

func (_gfbed *CT_Extension) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _fea := range start.Attr {
		if _fea.Name.Local == "\u0075\u0072\u0069" {
			_faba, _bgcce := _fea.Value, error(nil)
			if _bgcce != nil {
				return _bgcce
			}
			_gfbed.UriAttr = &_faba
			continue
		}
	}
_aagf:
	for {
		_egdd, _dbfd := d.Token()
		if _dbfd != nil {
			return _dbfd
		}
		switch _ccda := _egdd.(type) {
		case _c.StartElement:
			switch _ccda.Name {
			default:
				if _eeef, _eeefc := _cf.CreateElement(_ccda); _eeefc != nil {
					return _eeefc
				} else {
					if _fgada := d.DecodeElement(_eeef, &_ccda); _fgada != nil {
						return _fgada
					}
					_gfbed.Any = _eeef
				}
			}
		case _c.EndElement:
			break _aagf
		case _c.CharData:
		}
	}
	return nil
}
func (_bgbdd *ST_LegendPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cefeb, _fcafb := d.Token()
	if _fcafb != nil {
		return _fcafb
	}
	if _gffcd, _cggbdg := _cefeb.(_c.EndElement); _cggbdg && _gffcd.Name == start.Name {
		*_bgbdd = 1
		return nil
	}
	if _eebd, _dfffg := _cefeb.(_c.CharData); !_dfffg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cefeb)
	} else {
		switch string(_eebd) {
		case "":
			*_bgbdd = 0
		case "\u0062":
			*_bgbdd = 1
		case "\u0074\u0072":
			*_bgbdd = 2
		case "\u006c":
			*_bgbdd = 3
		case "\u0072":
			*_bgbdd = 4
		case "\u0074":
			*_bgbdd = 5
		}
	}
	_cefeb, _fcafb = d.Token()
	if _fcafb != nil {
		return _fcafb
	}
	if _dcdcg, _efcaf := _cefeb.(_c.EndElement); _efcaf && _dcdcg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cefeb)
}
func (_febaf *CT_StrRef) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_acaeb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0066"}}
	_cf.AddPreserveSpaceAttr(&_acaeb, _febaf.F)
	e.EncodeElement(_febaf.F, _acaeb)
	if _febaf.StrCache != nil {
		_dgbda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_febaf.StrCache, _dgbda)
	}
	if _febaf.ExtLst != nil {
		_dfedc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febaf.ExtLst, _dfedc)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dbdde *CT_DispUnitsChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dbdde.CustUnit != nil {
		_acabg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dbdde.CustUnit, _acabg)
	}
	if _dbdde.BuiltInUnit != nil {
		_fgcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dbdde.BuiltInUnit, _fgcd)
	}
	return nil
}
func NewCT_PieSer() *CT_PieSer {
	_bcbaf := &CT_PieSer{}
	_bcbaf.Idx = NewCT_UnsignedInt()
	_bcbaf.Order = NewCT_UnsignedInt()
	return _bcbaf
}
func NewCT_LegendPos() *CT_LegendPos { _gfeg := &CT_LegendPos{}; return _gfeg }
func (_gdgd *CT_Protection) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_aegb:
	for {
		_ecffe, _bgedc := d.Token()
		if _bgedc != nil {
			return _bgedc
		}
		switch _cedbc := _ecffe.(type) {
		case _c.StartElement:
			switch _cedbc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}:
				_gdgd.ChartObject = NewCT_Boolean()
				if _bcaee := d.DecodeElement(_gdgd.ChartObject, &_cedbc); _bcaee != nil {
					return _bcaee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}:
				_gdgd.Data = NewCT_Boolean()
				if _dgaff := d.DecodeElement(_gdgd.Data, &_cedbc); _dgaff != nil {
					return _dgaff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}:
				_gdgd.Formatting = NewCT_Boolean()
				if _fcdbf := d.DecodeElement(_gdgd.Formatting, &_cedbc); _fcdbf != nil {
					return _fcdbf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}:
				_gdgd.Selection = NewCT_Boolean()
				if _eeaec := d.DecodeElement(_gdgd.Selection, &_cedbc); _eeaec != nil {
					return _eeaec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}:
				_gdgd.UserInterface = NewCT_Boolean()
				if _fcbac := d.DecodeElement(_gdgd.UserInterface, &_cedbc); _fcbac != nil {
					return _fcbac
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e \u0025\u0076", _cedbc.Name)
				if _gcea := d.Skip(); _gcea != nil {
					return _gcea
				}
			}
		case _c.EndElement:
			break _aegb
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_StrData and its children
func (_dbde *CT_StrData) Validate() error {
	return _dbde.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061")
}

// Validate validates the CT_LineChart and its children
func (_dggff *CT_LineChart) Validate() error {
	return _dggff.ValidateWithPath("\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074")
}
func NewCT_DLbl() *CT_DLbl { _gebf := &CT_DLbl{}; _gebf.Idx = NewCT_UnsignedInt(); return _gebf }
func (_cagc *CT_SecondPieSize) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _afbbd := range start.Attr {
		if _afbbd.Name.Local == "\u0076\u0061\u006c" {
			_bcffe, _fdeb := ParseUnionST_SecondPieSize(_afbbd.Value)
			if _fdeb != nil {
				return _fdeb
			}
			_cagc.ValAttr = &_bcffe
			continue
		}
	}
	for {
		_dcdf, _bgbcf := d.Token()
		if _bgbcf != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0065\u0063\u006fn\u0064P\u0069\u0065\u0053\u0069\u007a\u0065\u003a \u0025\u0073", _bgbcf)
		}
		if _decf, _edfe := _dcdf.(_c.EndElement); _edfe && _decf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Tx() *CT_Tx { _caegf := &CT_Tx{}; _caegf.Choice = NewCT_TxChoice(); return _caegf }

// ValidateWithPath validates the EG_LineChartShared and its children, prefixing error messages with path
func (_ededd *EG_LineChartShared) ValidateWithPath(path string) error {
	if _dfbfg := _ededd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dfbfg != nil {
		return _dfbfg
	}
	if _ededd.VaryColors != nil {
		if _agbbd := _ededd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _agbbd != nil {
			return _agbbd
		}
	}
	for _daged, _ebfc := range _ededd.Ser {
		if _bbbeb := _ebfc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _daged)); _bbbeb != nil {
			return _bbbeb
		}
	}
	if _ededd.DLbls != nil {
		if _fafga := _ededd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fafga != nil {
			return _fafga
		}
	}
	if _ededd.DropLines != nil {
		if _caba := _ededd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _caba != nil {
			return _caba
		}
	}
	return nil
}
func (_dfge *Chart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063:\u0063\u0068\u0061\u0072\u0074"
	return _dfge.CT_RelId.MarshalXML(e, start)
}
func (_efge *CT_PieSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_efge.Idx = NewCT_UnsignedInt()
	_efge.Order = NewCT_UnsignedInt()
_cebg:
	for {
		_begd, _gdfad := d.Token()
		if _gdfad != nil {
			return _gdfad
		}
		switch _fafgf := _begd.(type) {
		case _c.StartElement:
			switch _fafgf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _caadbe := d.DecodeElement(_efge.Idx, &_fafgf); _caadbe != nil {
					return _caadbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _fagcd := d.DecodeElement(_efge.Order, &_fafgf); _fagcd != nil {
					return _fagcd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_efge.Tx = NewCT_SerTx()
				if _ddfe := d.DecodeElement(_efge.Tx, &_fafgf); _ddfe != nil {
					return _ddfe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_efge.SpPr = _d.NewCT_ShapeProperties()
				if _abec := d.DecodeElement(_efge.SpPr, &_fafgf); _abec != nil {
					return _abec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_efge.Explosion = NewCT_UnsignedInt()
				if _agfgb := d.DecodeElement(_efge.Explosion, &_fafgf); _agfgb != nil {
					return _agfgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_bdfec := NewCT_DPt()
				if _bcfbe := d.DecodeElement(_bdfec, &_fafgf); _bcfbe != nil {
					return _bcfbe
				}
				_efge.DPt = append(_efge.DPt, _bdfec)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_efge.DLbls = NewCT_DLbls()
				if _acccf := d.DecodeElement(_efge.DLbls, &_fafgf); _acccf != nil {
					return _acccf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_efge.Cat = NewCT_AxDataSource()
				if _faeab := d.DecodeElement(_efge.Cat, &_fafgf); _faeab != nil {
					return _faeab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_efge.Val = NewCT_NumDataSource()
				if _eedd := d.DecodeElement(_efge.Val, &_fafgf); _eedd != nil {
					return _eedd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efge.ExtLst = NewCT_ExtensionList()
				if _ebaf := d.DecodeElement(_efge.ExtLst, &_fafgf); _ebaf != nil {
					return _ebaf
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0069\u0065S\u0065\u0072 \u0025\u0076", _fafgf.Name)
				if _caeg := d.Skip(); _caeg != nil {
					return _caeg
				}
			}
		case _c.EndElement:
			break _cebg
		case _c.CharData:
		}
	}
	return nil
}
func (_ecaga ST_TickMark) Validate() error { return _ecaga.ValidateWithPath("") }

type CT_Tx struct{ Choice *CT_TxChoice }

func NewEG_AxShared() *EG_AxShared {
	_ecfc := &EG_AxShared{}
	_ecfc.AxId = NewCT_UnsignedInt()
	_ecfc.Scaling = NewCT_Scaling()
	_ecfc.AxPos = NewCT_AxPos()
	_ecfc.CrossAx = NewCT_UnsignedInt()
	return _ecfc
}

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_fbbac *CT_Marker) ValidateWithPath(path string) error {
	if _fbbac.Symbol != nil {
		if _bccd := _fbbac.Symbol.ValidateWithPath(path + "\u002fS\u0079\u006d\u0062\u006f\u006c"); _bccd != nil {
			return _bccd
		}
	}
	if _fbbac.Size != nil {
		if _dadaa := _fbbac.Size.ValidateWithPath(path + "\u002f\u0053\u0069z\u0065"); _dadaa != nil {
			return _dadaa
		}
	}
	if _fbbac.SpPr != nil {
		if _gccge := _fbbac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gccge != nil {
			return _gccge
		}
	}
	if _fbbac.ExtLst != nil {
		if _egec := _fbbac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egec != nil {
			return _egec
		}
	}
	return nil
}
func (_aabeb ST_Crosses) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_fgagbc := _c.Attr{}
	_fgagbc.Name = name
	switch _aabeb {
	case ST_CrossesUnset:
		_fgagbc.Value = ""
	case ST_CrossesAutoZero:
		_fgagbc.Value = "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case ST_CrossesMax:
		_fgagbc.Value = "\u006d\u0061\u0078"
	case ST_CrossesMin:
		_fgagbc.Value = "\u006d\u0069\u006e"
	}
	return _fgagbc, nil
}

type CT_BandFmts struct{ BandFmt []*CT_BandFmt }
type CT_OfPieChart struct {
	OfPieType     *CT_OfPieType
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	GapWidth      *CT_GapAmount
	SplitType     *CT_SplitType
	SplitPos      *CT_Double
	CustSplit     *CT_CustSplit
	SecondPieSize *CT_SecondPieSize
	SerLines      []*CT_ChartLines
	ExtLst        *CT_ExtensionList
}

const (
	ST_TimeUnitUnset  ST_TimeUnit = 0
	ST_TimeUnitDays   ST_TimeUnit = 1
	ST_TimeUnitMonths ST_TimeUnit = 2
	ST_TimeUnitYears  ST_TimeUnit = 3
)

type CT_Overlap struct{ ValAttr *ST_Overlap }

func (_ccee *CT_Perspective) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ccee.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_ccee.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_Orientation struct{ ValAttr ST_Orientation }

func (_afc *CT_Crosses) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_abcb, _agfg := _afc.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
	if _agfg != nil {
		return _agfg
	}
	start.Attr = append(start.Attr, _abcb)
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_OfPieType struct{ ValAttr ST_OfPieType }

func (_cgad *CT_OfPieType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cgad.ValAttr != ST_OfPieTypeUnset {
		_agfb, _bcea := _cgad.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _bcea != nil {
			return _bcea
		}
		start.Attr = append(start.Attr, _agfb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_ChartSpace struct {
	Date1904       *CT_Boolean
	Lang           *CT_TextLanguageID
	RoundedCorners *CT_Boolean
	Style          *CT_Style
	ClrMapOvr      *_d.CT_ColorMapping
	PivotSource    *CT_PivotSource
	Protection     *CT_Protection
	Chart          *CT_Chart
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	ExternalData   *CT_ExternalData
	PrintSettings  *CT_PrintSettings
	UserShapes     *CT_RelId
	ExtLst         *CT_ExtensionList
}

func (_cbagcf ST_BuiltInUnit) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_cbagcf.String(), start)
}

// ValidateWithPath validates the CT_Boolean and its children, prefixing error messages with path
func (_caad *CT_Boolean) ValidateWithPath(path string) error { return nil }
func (_dedfg ST_TickMark) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_daaef := _c.Attr{}
	_daaef.Name = name
	switch _dedfg {
	case ST_TickMarkUnset:
		_daaef.Value = ""
	case ST_TickMarkCross:
		_daaef.Value = "\u0063\u0072\u006fs\u0073"
	case ST_TickMarkIn:
		_daaef.Value = "\u0069\u006e"
	case ST_TickMarkNone:
		_daaef.Value = "\u006e\u006f\u006e\u0065"
	case ST_TickMarkOut:
		_daaef.Value = "\u006f\u0075\u0074"
	}
	return _daaef, nil
}

type CT_Skip struct{ ValAttr uint32 }

func ParseUnionST_Thickness(s string) (ST_Thickness, error) {
	if ST_ThicknessPercentPatternRe.MatchString(s) {
		return ST_Thickness{ST_ThicknessPercent: &s}, nil
	}
	_bgbag, _effcc := _e.ParseUint(s, 10, 32)
	if _effcc != nil {
		return ST_Thickness{}, _effcc
	}
	_cbcee := uint32(_bgbag)
	return ST_Thickness{Uint32: &_cbcee}, nil
}

// ValidateWithPath validates the Group_DLbls and its children, prefixing error messages with path
func (_fddgc *Group_DLbls) ValidateWithPath(path string) error {
	if _fddgc.NumFmt != nil {
		if _gcfgc := _fddgc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gcfgc != nil {
			return _gcfgc
		}
	}
	if _fddgc.SpPr != nil {
		if _caaed := _fddgc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _caaed != nil {
			return _caaed
		}
	}
	if _fddgc.TxPr != nil {
		if _dbdge := _fddgc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dbdge != nil {
			return _dbdge
		}
	}
	if _fddgc.DLblPos != nil {
		if _baebc := _fddgc.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _baebc != nil {
			return _baebc
		}
	}
	if _fddgc.ShowLegendKey != nil {
		if _ggdgbb := _fddgc.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _ggdgbb != nil {
			return _ggdgbb
		}
	}
	if _fddgc.ShowVal != nil {
		if _eccc := _fddgc.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _eccc != nil {
			return _eccc
		}
	}
	if _fddgc.ShowCatName != nil {
		if _ccfd := _fddgc.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _ccfd != nil {
			return _ccfd
		}
	}
	if _fddgc.ShowSerName != nil {
		if _dagbg := _fddgc.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _dagbg != nil {
			return _dagbg
		}
	}
	if _fddgc.ShowPercent != nil {
		if _fcdbg := _fddgc.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fcdbg != nil {
			return _fcdbg
		}
	}
	if _fddgc.ShowBubbleSize != nil {
		if _bdfff := _fddgc.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _bdfff != nil {
			return _bdfff
		}
	}
	if _fddgc.ShowLeaderLines != nil {
		if _dggce := _fddgc.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _dggce != nil {
			return _dggce
		}
	}
	if _fddgc.LeaderLines != nil {
		if _fgga := _fddgc.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _fgga != nil {
			return _fgga
		}
	}
	return nil
}

// Validate validates the EG_LegendEntryData and its children
func (_bcgg *EG_LegendEntryData) Validate() error {
	return _bcgg.ValidateWithPath("\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061")
}
func (_beca *CT_LineSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_ccceg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_beca.Idx, _ccceg)
	_efgd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_beca.Order, _efgd)
	if _beca.Tx != nil {
		_adgab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_beca.Tx, _adgab)
	}
	if _beca.SpPr != nil {
		_edadf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_beca.SpPr, _edadf)
	}
	if _beca.Marker != nil {
		_agce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_beca.Marker, _agce)
	}
	if _beca.DPt != nil {
		_bbcag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _ecdd := range _beca.DPt {
			e.EncodeElement(_ecdd, _bbcag)
		}
	}
	if _beca.DLbls != nil {
		_gbga := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_beca.DLbls, _gbga)
	}
	if _beca.Trendline != nil {
		_dbdab := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _gdcg := range _beca.Trendline {
			e.EncodeElement(_gdcg, _dbdab)
		}
	}
	if _beca.ErrBars != nil {
		_dbed := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_beca.ErrBars, _dbed)
	}
	if _beca.Cat != nil {
		_ddab := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_beca.Cat, _ddab)
	}
	if _beca.Val != nil {
		_cbba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_beca.Val, _cbba)
	}
	if _beca.Smooth != nil {
		_egefd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_beca.Smooth, _egefd)
	}
	if _beca.ExtLst != nil {
		_acfe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beca.ExtLst, _acfe)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dedgfd *ST_LayoutMode) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_dedgfd = 0
	case "\u0065\u0064\u0067\u0065":
		*_dedgfd = 1
	case "\u0066\u0061\u0063\u0074\u006f\u0072":
		*_dedgfd = 2
	}
	return nil
}
func NewCT_Surface() *CT_Surface { _fdagb := &CT_Surface{}; return _fdagb }
func (_cebeb *CT_CatAx) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_fdgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_cebeb.AxId, _fdgf)
	_gcbc := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_cebeb.Scaling, _gcbc)
	if _cebeb.Delete != nil {
		_cecd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_cebeb.Delete, _cecd)
	}
	_edfg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_cebeb.AxPos, _edfg)
	if _cebeb.MajorGridlines != nil {
		_adfg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cebeb.MajorGridlines, _adfg)
	}
	if _cebeb.MinorGridlines != nil {
		_dfed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cebeb.MinorGridlines, _dfed)
	}
	if _cebeb.Title != nil {
		_aef := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_cebeb.Title, _aef)
	}
	if _cebeb.NumFmt != nil {
		_beec := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_cebeb.NumFmt, _beec)
	}
	if _cebeb.MajorTickMark != nil {
		_cfba := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cebeb.MajorTickMark, _cfba)
	}
	if _cebeb.MinorTickMark != nil {
		_bfcd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cebeb.MinorTickMark, _bfcd)
	}
	if _cebeb.TickLblPos != nil {
		_fbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_cebeb.TickLblPos, _fbc)
	}
	if _cebeb.SpPr != nil {
		_abfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cebeb.SpPr, _abfa)
	}
	if _cebeb.TxPr != nil {
		_fege := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cebeb.TxPr, _fege)
	}
	_dab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_cebeb.CrossAx, _dab)
	if _cebeb.Choice != nil {
		_cebeb.Choice.MarshalXML(e, _c.StartElement{})
	}
	if _cebeb.Auto != nil {
		_gfg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_cebeb.Auto, _gfg)
	}
	if _cebeb.LblAlgn != nil {
		_ddcg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006c\u0062\u006c\u0041\u006c\u0067n"}}
		e.EncodeElement(_cebeb.LblAlgn, _ddcg)
	}
	if _cebeb.LblOffset != nil {
		_fdac := _c.StartElement{Name: _c.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_cebeb.LblOffset, _fdac)
	}
	if _cebeb.TickLblSkip != nil {
		_ebdb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_cebeb.TickLblSkip, _ebdb)
	}
	if _cebeb.TickMarkSkip != nil {
		_fbb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_cebeb.TickMarkSkip, _fbb)
	}
	if _cebeb.NoMultiLvlLbl != nil {
		_cecde := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006eo\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}}
		e.EncodeElement(_cebeb.NoMultiLvlLbl, _cecde)
	}
	if _cebeb.ExtLst != nil {
		_edff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cebeb.ExtLst, _edff)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cbfaa *CT_PlotAreaChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cgacc:
	for {
		_efeg, _cgbba := d.Token()
		if _cgbba != nil {
			return _cgbba
		}
		switch _fcfag := _efeg.(type) {
		case _c.StartElement:
			switch _fcfag.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_cbfaa.AreaChart = NewCT_AreaChart()
				if _efae := d.DecodeElement(_cbfaa.AreaChart, &_fcfag); _efae != nil {
					return _efae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.Area3DChart = NewCT_Area3DChart()
				if _bddfa := d.DecodeElement(_cbfaa.Area3DChart, &_fcfag); _bddfa != nil {
					return _bddfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_cbfaa.LineChart = NewCT_LineChart()
				if _abgee := d.DecodeElement(_cbfaa.LineChart, &_fcfag); _abgee != nil {
					return _abgee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.Line3DChart = NewCT_Line3DChart()
				if _cedgb := d.DecodeElement(_cbfaa.Line3DChart, &_fcfag); _cedgb != nil {
					return _cedgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.StockChart = NewCT_StockChart()
				if _addca := d.DecodeElement(_cbfaa.StockChart, &_fcfag); _addca != nil {
					return _addca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.RadarChart = NewCT_RadarChart()
				if _gcaf := d.DecodeElement(_cbfaa.RadarChart, &_fcfag); _gcaf != nil {
					return _gcaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.ScatterChart = NewCT_ScatterChart()
				if _gfcab := d.DecodeElement(_cbfaa.ScatterChart, &_fcfag); _gfcab != nil {
					return _gfcab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.PieChart = NewCT_PieChart()
				if _gfbfb := d.DecodeElement(_cbfaa.PieChart, &_fcfag); _gfbfb != nil {
					return _gfbfb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.Pie3DChart = NewCT_Pie3DChart()
				if _eafgg := d.DecodeElement(_cbfaa.Pie3DChart, &_fcfag); _eafgg != nil {
					return _eafgg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.DoughnutChart = NewCT_DoughnutChart()
				if _eecgf := d.DecodeElement(_cbfaa.DoughnutChart, &_fcfag); _eecgf != nil {
					return _eecgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.BarChart = NewCT_BarChart()
				if _ggda := d.DecodeElement(_cbfaa.BarChart, &_fcfag); _ggda != nil {
					return _ggda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.Bar3DChart = NewCT_Bar3DChart()
				if _abed := d.DecodeElement(_cbfaa.Bar3DChart, &_fcfag); _abed != nil {
					return _abed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.OfPieChart = NewCT_OfPieChart()
				if _cfded := d.DecodeElement(_cbfaa.OfPieChart, &_fcfag); _cfded != nil {
					return _cfded
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.SurfaceChart = NewCT_SurfaceChart()
				if _dbca := d.DecodeElement(_cbfaa.SurfaceChart, &_fcfag); _dbca != nil {
					return _dbca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_cbfaa.Surface3DChart = NewCT_Surface3DChart()
				if _cccd := d.DecodeElement(_cbfaa.Surface3DChart, &_fcfag); _cccd != nil {
					return _cccd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_cbfaa.BubbleChart = NewCT_BubbleChart()
				if _fcaaf := d.DecodeElement(_cbfaa.BubbleChart, &_fcfag); _fcaaf != nil {
					return _fcaaf
				}
			default:
				_cf.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fcfag.Name)
				if _begdg := d.Skip(); _begdg != nil {
					return _begdg
				}
			}
		case _c.EndElement:
			break _cgacc
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Layout and its children, prefixing error messages with path
func (_aced *CT_Layout) ValidateWithPath(path string) error {
	if _aced.ManualLayout != nil {
		if _ffeg := _aced.ManualLayout.ValidateWithPath(path + "\u002f\u004d\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"); _ffeg != nil {
			return _ffeg
		}
	}
	if _aced.ExtLst != nil {
		if _dabaf := _aced.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dabaf != nil {
			return _dabaf
		}
	}
	return nil
}

const (
	ST_ShapeUnset        ST_Shape = 0
	ST_ShapeCone         ST_Shape = 1
	ST_ShapeConeToMax    ST_Shape = 2
	ST_ShapeBox          ST_Shape = 3
	ST_ShapeCylinder     ST_Shape = 4
	ST_ShapePyramid      ST_Shape = 5
	ST_ShapePyramidToMax ST_Shape = 6
)

type CT_AxDataSource struct{ Choice *CT_AxDataSourceChoice }

// Validate validates the CT_PlotAreaChoice1 and its children
func (_edafc *CT_PlotAreaChoice1) Validate() error {
	return _edafc.ValidateWithPath("\u0043T\u005fP\u006c\u006f\u0074\u0041\u0072e\u0061\u0043h\u006f\u0069\u0063\u0065\u0031")
}
func NewCT_RadarSer() *CT_RadarSer {
	_acdfe := &CT_RadarSer{}
	_acdfe.Idx = NewCT_UnsignedInt()
	_acdfe.Order = NewCT_UnsignedInt()
	return _acdfe
}

const (
	ST_BarGroupingUnset          ST_BarGrouping = 0
	ST_BarGroupingPercentStacked ST_BarGrouping = 1
	ST_BarGroupingClustered      ST_BarGrouping = 2
	ST_BarGroupingStandard       ST_BarGrouping = 3
	ST_BarGroupingStacked        ST_BarGrouping = 4
)

func (_dgecg *CT_SizeRepresents) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dgecg.ValAttr != ST_SizeRepresentsUnset {
		_dfgd, _ebea := _dgecg.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _ebea != nil {
			return _ebea
		}
		start.Attr = append(start.Attr, _dfgd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_PivotFmt() *CT_PivotFmt {
	_fgeda := &CT_PivotFmt{}
	_fgeda.Idx = NewCT_UnsignedInt()
	return _fgeda
}
func NewCT_ErrBarType() *CT_ErrBarType { _acbe := &CT_ErrBarType{}; return _acbe }
func (_eggdb *CT_LblOffset) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _eggdb.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_eggdb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BubbleChart and its children
func (_gcdc *CT_BubbleChart) Validate() error {
	return _gcdc.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074")
}
func NewCT_DispUnitsLbl() *CT_DispUnitsLbl { _efcc := &CT_DispUnitsLbl{}; return _efcc }
func (_fcfdg *ST_TickLblPos) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_fcfdg = 0
	case "\u0068\u0069\u0067\u0068":
		*_fcfdg = 1
	case "\u006c\u006f\u0077":
		*_fcfdg = 2
	case "\u006e\u0065\u0078\u0074\u0054\u006f":
		*_fcfdg = 3
	case "\u006e\u006f\u006e\u0065":
		*_fcfdg = 4
	}
	return nil
}
func NewCT_DLbls() *CT_DLbls { _ecba := &CT_DLbls{}; return _ecba }

type Group_DLbl struct {
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_gfgaf *CT_HeaderFooter) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _ffbg := range start.Attr {
		if _ffbg.Name.Local == "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073" {
			_bgdd, _afbf := _e.ParseBool(_ffbg.Value)
			if _afbf != nil {
				return _afbf
			}
			_gfgaf.AlignWithMarginsAttr = &_bgdd
			continue
		}
		if _ffbg.Name.Local == "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e" {
			_ecfb, _gfcbe := _e.ParseBool(_ffbg.Value)
			if _gfcbe != nil {
				return _gfcbe
			}
			_gfgaf.DifferentOddEvenAttr = &_ecfb
			continue
		}
		if _ffbg.Name.Local == "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074" {
			_egbf, _dfaad := _e.ParseBool(_ffbg.Value)
			if _dfaad != nil {
				return _dfaad
			}
			_gfgaf.DifferentFirstAttr = &_egbf
			continue
		}
	}
_eeacb:
	for {
		_fbdb, _daba := d.Token()
		if _daba != nil {
			return _daba
		}
		switch _cbcb := _fbdb.(type) {
		case _c.StartElement:
			switch _cbcb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}:
				_gfgaf.OddHeader = new(string)
				if _dgea := d.DecodeElement(_gfgaf.OddHeader, &_cbcb); _dgea != nil {
					return _dgea
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}:
				_gfgaf.OddFooter = new(string)
				if _fdgde := d.DecodeElement(_gfgaf.OddFooter, &_cbcb); _fdgde != nil {
					return _fdgde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_gfgaf.EvenHeader = new(string)
				if _dddge := d.DecodeElement(_gfgaf.EvenHeader, &_cbcb); _dddge != nil {
					return _dddge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_gfgaf.EvenFooter = new(string)
				if _gecc := d.DecodeElement(_gfgaf.EvenFooter, &_cbcb); _gecc != nil {
					return _gecc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_gfgaf.FirstHeader = new(string)
				if _egee := d.DecodeElement(_gfgaf.FirstHeader, &_cbcb); _egee != nil {
					return _egee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_gfgaf.FirstFooter = new(string)
				if _dafe := d.DecodeElement(_gfgaf.FirstFooter, &_cbcb); _dafe != nil {
					return _dafe
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0048\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072\u0020\u0025\u0076", _cbcb.Name)
				if _ceca := d.Skip(); _ceca != nil {
					return _ceca
				}
			}
		case _c.EndElement:
			break _eeacb
		case _c.CharData:
		}
	}
	return nil
}
func (_ebac *CT_DLbl) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ebac.Idx = NewCT_UnsignedInt()
_egad:
	for {
		_fdf, _bfga := d.Token()
		if _bfga != nil {
			return _bfga
		}
		switch _gdge := _fdf.(type) {
		case _c.StartElement:
			switch _gdge.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dgffb := d.DecodeElement(_ebac.Idx, &_gdge); _dgffb != nil {
					return _dgffb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _gebd := d.DecodeElement(&_ebac.Choice.Delete, &_gdge); _gebd != nil {
					return _gebd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _ggbe := d.DecodeElement(&_ebac.Choice.Layout, &_gdge); _ggbe != nil {
					return _ggbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _fbcg := d.DecodeElement(&_ebac.Choice.Tx, &_gdge); _fbcg != nil {
					return _fbcg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _badcc := d.DecodeElement(&_ebac.Choice.NumFmt, &_gdge); _badcc != nil {
					return _badcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _geed := d.DecodeElement(&_ebac.Choice.SpPr, &_gdge); _geed != nil {
					return _geed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _dbgbc := d.DecodeElement(&_ebac.Choice.TxPr, &_gdge); _dbgbc != nil {
					return _dbgbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _ggfd := d.DecodeElement(&_ebac.Choice.DLblPos, &_gdge); _ggfd != nil {
					return _ggfd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _aeac := d.DecodeElement(&_ebac.Choice.ShowLegendKey, &_gdge); _aeac != nil {
					return _aeac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _fcfca := d.DecodeElement(&_ebac.Choice.ShowVal, &_gdge); _fcfca != nil {
					return _fcfca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _bbee := d.DecodeElement(&_ebac.Choice.ShowCatName, &_gdge); _bbee != nil {
					return _bbee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _caga := d.DecodeElement(&_ebac.Choice.ShowSerName, &_gdge); _caga != nil {
					return _caga
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _fedaf := d.DecodeElement(&_ebac.Choice.ShowPercent, &_gdge); _fedaf != nil {
					return _fedaf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _cgcc := d.DecodeElement(&_ebac.Choice.ShowBubbleSize, &_gdge); _cgcc != nil {
					return _cgcc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _ebac.Choice == nil {
					_ebac.Choice = NewCT_DLblChoice()
				}
				if _dgcf := d.DecodeElement(&_ebac.Choice.Separator, &_gdge); _dgcf != nil {
					return _dgcf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebac.ExtLst = NewCT_ExtensionList()
				if _bggdg := d.DecodeElement(_ebac.ExtLst, &_gdge); _bggdg != nil {
					return _bggdg
				}
			default:
				_cf.Log("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _gdge.Name)
				if _gccdf := d.Skip(); _gccdf != nil {
					return _gccdf
				}
			}
		case _c.EndElement:
			break _egad
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_LegendEntry() *CT_LegendEntry {
	_affb := &CT_LegendEntry{}
	_affb.Idx = NewCT_UnsignedInt()
	return _affb
}

const ST_HoleSizePercentPattern = "\u0030\u002a\u0028\u005b\u0031\u002d\u0039\u005d\u007c\u0028\u005b1\u002d\u0038\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c9\u0030\u0029\u0025"

// ValidateWithPath validates the CT_AreaChart and its children, prefixing error messages with path
func (_fda *CT_AreaChart) ValidateWithPath(path string) error {
	if _fda.Grouping != nil {
		if _fed := _fda.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _fed != nil {
			return _fed
		}
	}
	if _fda.VaryColors != nil {
		if _baa := _fda.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _baa != nil {
			return _baa
		}
	}
	for _gefd, _aag := range _fda.Ser {
		if _db := _aag.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gefd)); _db != nil {
			return _db
		}
	}
	if _fda.DLbls != nil {
		if _gb := _fda.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gb != nil {
			return _gb
		}
	}
	if _fda.DropLines != nil {
		if _cgg := _fda.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cgg != nil {
			return _cgg
		}
	}
	for _gab, _dg := range _fda.AxId {
		if _aeg := _dg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gab)); _aeg != nil {
			return _aeg
		}
	}
	if _fda.ExtLst != nil {
		if _dbc := _fda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dbc != nil {
			return _dbc
		}
	}
	return nil
}

type CT_PivotFmt struct {
	Idx    *CT_UnsignedInt
	SpPr   *_d.CT_ShapeProperties
	TxPr   *_d.CT_TextBody
	Marker *CT_Marker
	DLbl   *CT_DLbl
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_Orientation and its children, prefixing error messages with path
func (_fdab *CT_Orientation) ValidateWithPath(path string) error {
	if _cbgcc := _fdab.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbgcc != nil {
		return _cbgcc
	}
	return nil
}

// Validate validates the CT_ErrValType and its children
func (_dadab *CT_ErrValType) Validate() error {
	return _dadab.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065")
}
func NewCT_Extension() *CT_Extension { _gceb := &CT_Extension{}; return _gceb }
func (_aafd *CT_TrendlineType) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _aafd.ValAttr != ST_TrendlineTypeUnset {
		_dagee, _geaff := _aafd.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _geaff != nil {
			return _geaff
		}
		start.Attr = append(start.Attr, _dagee)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Protection and its children
func (_cedff *CT_Protection) Validate() error {
	return _cedff.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e")
}
func (_gdebd *CT_HPercent) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _gdebd.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_gdebd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bfb *CT_AxDataSourceChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bfb.MultiLvlStrRef != nil {
		_eaba := _c.StartElement{Name: _c.Name{Local: "\u0063\u003am\u0075\u006c\u0074i\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_bfb.MultiLvlStrRef, _eaba)
	}
	if _bfb.NumRef != nil {
		_ddcc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_bfb.NumRef, _ddcc)
	}
	if _bfb.NumLit != nil {
		_edc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_bfb.NumLit, _edc)
	}
	if _bfb.StrRef != nil {
		_ega := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_bfb.StrRef, _ega)
	}
	if _bfb.StrLit != nil {
		_bac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u004c\u0069\u0074"}}
		e.EncodeElement(_bfb.StrLit, _bac)
	}
	return nil
}

type CT_Protection struct {
	ChartObject   *CT_Boolean
	Data          *CT_Boolean
	Formatting    *CT_Boolean
	Selection     *CT_Boolean
	UserInterface *CT_Boolean
}

// ValidateWithPath validates the CT_Double and its children, prefixing error messages with path
func (_gfdg *CT_Double) ValidateWithPath(path string) error { return nil }

type ST_TickLblPos byte

func (_bbeb *CT_TickMark) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bbeb.ValAttr != ST_TickMarkUnset {
		_eggg, _ccgcc := _bbeb.ValAttr.MarshalXMLAttr(_c.Name{Local: "\u0076\u0061\u006c"})
		if _ccgcc != nil {
			return _ccgcc
		}
		start.Attr = append(start.Attr, _eggg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_MarkerSize struct{ ValAttr *uint8 }

func (_aceeda *ST_SizeRepresents) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cddc, _fcbdd := d.Token()
	if _fcbdd != nil {
		return _fcbdd
	}
	if _aaga, _dddee := _cddc.(_c.EndElement); _dddee && _aaga.Name == start.Name {
		*_aceeda = 1
		return nil
	}
	if _dbdff, _ebgag := _cddc.(_c.CharData); !_ebgag {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cddc)
	} else {
		switch string(_dbdff) {
		case "":
			*_aceeda = 0
		case "\u0061\u0072\u0065\u0061":
			*_aceeda = 1
		case "\u0077":
			*_aceeda = 2
		}
	}
	_cddc, _fcbdd = d.Token()
	if _fcbdd != nil {
		return _fcbdd
	}
	if _cdcba, _ecade := _cddc.(_c.EndElement); _ecade && _cdcba.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cddc)
}

type Any interface {
	MarshalXML(_eabad *_c.Encoder, _cecca _c.StartElement) error
	UnmarshalXML(_ccaade *_c.Decoder, _bcbea _c.StartElement) error
}

func (_cfcb *CT_LayoutTarget) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _bggfg := range start.Attr {
		if _bggfg.Name.Local == "\u0076\u0061\u006c" {
			_cfcb.ValAttr.UnmarshalXMLAttr(_bggfg)
			continue
		}
	}
	for {
		_gacaa, _fgca := d.Token()
		if _fgca != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074T\u0061\u0072\u0067e\u0074:\u0020\u0025\u0073", _fgca)
		}
		if _ebae, _aabc := _gacaa.(_c.EndElement); _aabc && _ebae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_efecf *EG_LegendEntryData) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _efecf.TxPr != nil {
		_cbagc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_efecf.TxPr, _cbagc)
	}
	return nil
}
func (_efce *CT_DLblPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_efce.ValAttr = ST_DLblPos(1)
	for _, _egbe := range start.Attr {
		if _egbe.Name.Local == "\u0076\u0061\u006c" {
			_efce.ValAttr.UnmarshalXMLAttr(_egbe)
			continue
		}
	}
	for {
		_bcac, _edfcc := d.Token()
		if _edfcc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073\u003a\u0020%\u0073", _edfcc)
		}
		if _gcfd, _cgfb := _bcac.(_c.EndElement); _cgfb && _gcfd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_RelId struct{ IdAttr string }
type CT_ErrValType struct{ ValAttr ST_ErrValType }

func (_cadgf ST_LblAlgn) Validate() error { return _cadgf.ValidateWithPath("") }
func (_edga *ST_CrossBetween) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_eabgf, _bgeed := d.Token()
	if _bgeed != nil {
		return _bgeed
	}
	if _ccdb, _aggdb := _eabgf.(_c.EndElement); _aggdb && _ccdb.Name == start.Name {
		*_edga = 1
		return nil
	}
	if _bdcbb, _acbdd := _eabgf.(_c.CharData); !_acbdd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eabgf)
	} else {
		switch string(_bdcbb) {
		case "":
			*_edga = 0
		case "\u0062e\u0074\u0077\u0065\u0065\u006e":
			*_edga = 1
		case "\u006d\u0069\u0064\u0043\u0061\u0074":
			*_edga = 2
		}
	}
	_eabgf, _bgeed = d.Token()
	if _bgeed != nil {
		return _bgeed
	}
	if _fcabe, _gbdgb := _eabgf.(_c.EndElement); _gbdgb && _fcabe.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eabgf)
}

// ValidateWithPath validates the CT_TickLblPos and its children, prefixing error messages with path
func (_gbggb *CT_TickLblPos) ValidateWithPath(path string) error {
	if _gbgab := _gbggb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbgab != nil {
		return _gbgab
	}
	return nil
}

var ST_LblOffsetPercentPatternRe = _a.MustCompile(ST_LblOffsetPercentPattern)

func (_affba *CT_Overlap) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _affba.ValAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_affba.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_HeaderFooter() *CT_HeaderFooter { _fefb := &CT_HeaderFooter{}; return _fefb }
func (_fbfcd *CT_Style) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _fbfcd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_UpDownBars and its children, prefixing error messages with path
func (_dgegb *CT_UpDownBars) ValidateWithPath(path string) error {
	if _dgegb.GapWidth != nil {
		if _dcaed := _dgegb.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _dcaed != nil {
			return _dcaed
		}
	}
	if _dgegb.UpBars != nil {
		if _bdgba := _dgegb.UpBars.ValidateWithPath(path + "\u002fU\u0070\u0042\u0061\u0072\u0073"); _bdgba != nil {
			return _bdgba
		}
	}
	if _dgegb.DownBars != nil {
		if _fbfdb := _dgegb.DownBars.ValidateWithPath(path + "\u002fD\u006f\u0077\u006e\u0042\u0061\u0072s"); _fbfdb != nil {
			return _fbfdb
		}
	}
	if _dgegb.ExtLst != nil {
		if _cdgegb := _dgegb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdgegb != nil {
			return _cdgegb
		}
	}
	return nil
}

const (
	ST_PageSetupOrientationUnset     ST_PageSetupOrientation = 0
	ST_PageSetupOrientationDefault   ST_PageSetupOrientation = 1
	ST_PageSetupOrientationPortrait  ST_PageSetupOrientation = 2
	ST_PageSetupOrientationLandscape ST_PageSetupOrientation = 3
)

// Validate validates the CT_DLblPos and its children
func (_eaeb *CT_DLblPos) Validate() error {
	return _eaeb.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073")
}
func (_abfd *CT_BandFmt) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_abfd.Idx = NewCT_UnsignedInt()
_adf:
	for {
		_dfaa, _fga := d.Token()
		if _fga != nil {
			return _fga
		}
		switch _gfc := _dfaa.(type) {
		case _c.StartElement:
			switch _gfc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _abc := d.DecodeElement(_abfd.Idx, &_gfc); _abc != nil {
					return _abc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_abfd.SpPr = _d.NewCT_ShapeProperties()
				if _agg := d.DecodeElement(_abfd.SpPr, &_gfc); _agg != nil {
					return _agg
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fB\u0061\u006e\u0064\u0046\u006d\u0074\u0020\u0025\u0076", _gfc.Name)
				if _aca := d.Skip(); _aca != nil {
					return _aca
				}
			}
		case _c.EndElement:
			break _adf
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_SurfaceSer() *CT_SurfaceSer {
	_bfcbea := &CT_SurfaceSer{}
	_bfcbea.Idx = NewCT_UnsignedInt()
	_bfcbea.Order = NewCT_UnsignedInt()
	return _bfcbea
}

// Validate validates the CT_Style and its children
func (_aadea *CT_Style) Validate() error {
	return _aadea.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}
func (_gfce *CT_BarSer) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gfce.Idx = NewCT_UnsignedInt()
	_gfce.Order = NewCT_UnsignedInt()
_cfe:
	for {
		_agbc, _gde := d.Token()
		if _gde != nil {
			return _gde
		}
		switch _eba := _agbc.(type) {
		case _c.StartElement:
			switch _eba.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gfe := d.DecodeElement(_gfce.Idx, &_eba); _gfe != nil {
					return _gfe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eag := d.DecodeElement(_gfce.Order, &_eba); _eag != nil {
					return _eag
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gfce.Tx = NewCT_SerTx()
				if _bbg := d.DecodeElement(_gfce.Tx, &_eba); _bbg != nil {
					return _bbg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gfce.SpPr = _d.NewCT_ShapeProperties()
				if _addd := d.DecodeElement(_gfce.SpPr, &_eba); _addd != nil {
					return _addd
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_gfce.InvertIfNegative = NewCT_Boolean()
				if _ecef := d.DecodeElement(_gfce.InvertIfNegative, &_eba); _ecef != nil {
					return _ecef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_gfce.PictureOptions = NewCT_PictureOptions()
				if _fdg := d.DecodeElement(_gfce.PictureOptions, &_eba); _fdg != nil {
					return _fdg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_dfbb := NewCT_DPt()
				if _bedb := d.DecodeElement(_dfbb, &_eba); _bedb != nil {
					return _bedb
				}
				_gfce.DPt = append(_gfce.DPt, _dfbb)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gfce.DLbls = NewCT_DLbls()
				if _fcgf := d.DecodeElement(_gfce.DLbls, &_eba); _fcgf != nil {
					return _fcgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cbf := NewCT_Trendline()
				if _fccf := d.DecodeElement(_cbf, &_eba); _fccf != nil {
					return _fccf
				}
				_gfce.Trendline = append(_gfce.Trendline, _cbf)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gfce.ErrBars = NewCT_ErrBars()
				if _bca := d.DecodeElement(_gfce.ErrBars, &_eba); _bca != nil {
					return _bca
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_gfce.Cat = NewCT_AxDataSource()
				if _gge := d.DecodeElement(_gfce.Cat, &_eba); _gge != nil {
					return _gge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_gfce.Val = NewCT_NumDataSource()
				if _bfad := d.DecodeElement(_gfce.Val, &_eba); _bfad != nil {
					return _bfad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_gfce.Shape = NewCT_Shape()
				if _ffab := d.DecodeElement(_gfce.Shape, &_eba); _ffab != nil {
					return _ffab
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfce.ExtLst = NewCT_ExtensionList()
				if _cdea := d.DecodeElement(_gfce.ExtLst, &_eba); _cdea != nil {
					return _cdea
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0042\u0061\u0072S\u0065\u0072 \u0025\u0076", _eba.Name)
				if _bgab := d.Skip(); _bgab != nil {
					return _bgab
				}
			}
		case _c.EndElement:
			break _cfe
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_DispUnitsChoice() *CT_DispUnitsChoice { _dbbb := &CT_DispUnitsChoice{}; return _dbbb }

type CT_BubbleScale struct{ ValAttr *ST_BubbleScale }

func (_dfadf *EG_SerShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dfadf.Idx = NewCT_UnsignedInt()
	_dfadf.Order = NewCT_UnsignedInt()
_egddb:
	for {
		_gadda, _dbaaa := d.Token()
		if _dbaaa != nil {
			return _dbaaa
		}
		switch _fddcf := _gadda.(type) {
		case _c.StartElement:
			switch _fddcf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _egabf := d.DecodeElement(_dfadf.Idx, &_fddcf); _egabf != nil {
					return _egabf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _efeee := d.DecodeElement(_dfadf.Order, &_fddcf); _efeee != nil {
					return _efeee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_dfadf.Tx = NewCT_SerTx()
				if _ddgfda := d.DecodeElement(_dfadf.Tx, &_fddcf); _ddgfda != nil {
					return _ddgfda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dfadf.SpPr = _d.NewCT_ShapeProperties()
				if _bdeefg := d.DecodeElement(_dfadf.SpPr, &_fddcf); _bdeefg != nil {
					return _bdeefg
				}
			default:
				_cf.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047_S\u0065\u0072S\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _fddcf.Name)
				if _cfcf := d.Skip(); _cfcf != nil {
					return _cfcf
				}
			}
		case _c.EndElement:
			break _egddb
		case _c.CharData:
		}
	}
	return nil
}
func (_dcabe *ST_AxPos) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_facaa, _dacdf := d.Token()
	if _dacdf != nil {
		return _dacdf
	}
	if _eegcb, _aeeb := _facaa.(_c.EndElement); _aeeb && _eegcb.Name == start.Name {
		*_dcabe = 1
		return nil
	}
	if _aefc, _eeade := _facaa.(_c.CharData); !_eeade {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _facaa)
	} else {
		switch string(_aefc) {
		case "":
			*_dcabe = 0
		case "\u0062":
			*_dcabe = 1
		case "\u006c":
			*_dcabe = 2
		case "\u0072":
			*_dcabe = 3
		case "\u0074":
			*_dcabe = 4
		}
	}
	_facaa, _dacdf = d.Token()
	if _dacdf != nil {
		return _dacdf
	}
	if _dbad, _gcgef := _facaa.(_c.EndElement); _gcgef && _dbad.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _facaa)
}

// ValidateWithPath validates the CT_NumDataSource and its children, prefixing error messages with path
func (_caae *CT_NumDataSource) ValidateWithPath(path string) error {
	if _aeeea := _caae.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aeeea != nil {
		return _aeeea
	}
	return nil
}

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_eccd *CT_NumFmt) ValidateWithPath(path string) error { return nil }

type CT_FirstSliceAng struct{ ValAttr *uint16 }

func (_degda *CT_Style) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_degda.ValAttr = 1
	for _, _ceecf := range start.Attr {
		if _ceecf.Name.Local == "\u0076\u0061\u006c" {
			_fbadc, _gdebdb := _e.ParseUint(_ceecf.Value, 10, 8)
			if _gdebdb != nil {
				return _gdebdb
			}
			_degda.ValAttr = uint8(_fbadc)
			continue
		}
	}
	for {
		_gbbaf, _fcdcac := d.Token()
		if _fcdcac != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _fcdcac)
		}
		if _bebdc, _ddaa := _gbbaf.(_c.EndElement); _ddaa && _bebdc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Pie3DChart struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_CrossBetween and its children
func (_dda *CT_CrossBetween) Validate() error {
	return _dda.ValidateWithPath("\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e")
}

// Validate validates the CT_Skip and its children
func (_dcca *CT_Skip) Validate() error {
	return _dcca.ValidateWithPath("\u0043T\u005f\u0053\u006b\u0069\u0070")
}

type CT_Surface struct {
	Thickness      *CT_Thickness
	SpPr           *_d.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	ExtLst         *CT_ExtensionList
}

// ValidateWithPath validates the CT_UpDownBar and its children, prefixing error messages with path
func (_agda *CT_UpDownBar) ValidateWithPath(path string) error {
	if _agda.SpPr != nil {
		if _cagf := _agda.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cagf != nil {
			return _cagf
		}
	}
	return nil
}
func NewCT_ErrValType() *CT_ErrValType { _dbbaf := &CT_ErrValType{}; return _dbbaf }
func (_eaea *CT_LogBase) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _eaea.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_LblOffset(s string) (ST_LblOffset, error) {
	if ST_LblOffsetPercentPatternRe.MatchString(s) {
		return ST_LblOffset{ST_LblOffsetPercent: &s}, nil
	}
	_ffee, _gaafe := _e.ParseUint(s, 10, 16)
	if _gaafe != nil {
		return ST_LblOffset{}, _gaafe
	}
	_gdbccg := uint16(_ffee)
	return ST_LblOffset{ST_LblOffsetUShort: &_gdbccg}, nil
}

type ST_LegendPos byte

func NewCT_MultiLvlStrData() *CT_MultiLvlStrData { _agff := &CT_MultiLvlStrData{}; return _agff }
func (_bggd *CT_Bar3DChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_cda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_bggd.BarDir, _cda)
	if _bggd.Grouping != nil {
		_age := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_bggd.Grouping, _age)
	}
	if _bggd.VaryColors != nil {
		_afac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bggd.VaryColors, _afac)
	}
	if _bggd.Ser != nil {
		_ddce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bdde := range _bggd.Ser {
			e.EncodeElement(_bdde, _ddce)
		}
	}
	if _bggd.DLbls != nil {
		_dfb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bggd.DLbls, _dfb)
	}
	if _bggd.GapWidth != nil {
		_bgag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_bggd.GapWidth, _bgag)
	}
	if _bggd.GapDepth != nil {
		_aea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_bggd.GapDepth, _aea)
	}
	if _bggd.Shape != nil {
		_bfd := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_bggd.Shape, _bfd)
	}
	_acdc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bba := range _bggd.AxId {
		e.EncodeElement(_bba, _acdc)
	}
	if _bggd.ExtLst != nil {
		_dead := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bggd.ExtLst, _dead)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_dbdga *ST_Shape) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_dbdga = 0
	case "\u0063\u006f\u006e\u0065":
		*_dbdga = 1
	case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
		*_dbdga = 2
	case "\u0062\u006f\u0078":
		*_dbdga = 3
	case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
		*_dbdga = 4
	case "\u0070y\u0072\u0061\u006d\u0069\u0064":
		*_dbdga = 5
	case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
		*_dbdga = 6
	}
	return nil
}
func (_bgdeg *CT_UpDownBars) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_edce:
	for {
		_ecfgg, _ggega := d.Token()
		if _ggega != nil {
			return _ggega
		}
		switch _cbaag := _ecfgg.(type) {
		case _c.StartElement:
			switch _cbaag.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_bgdeg.GapWidth = NewCT_GapAmount()
				if _gece := d.DecodeElement(_bgdeg.GapWidth, &_cbaag); _gece != nil {
					return _gece
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}:
				_bgdeg.UpBars = NewCT_UpDownBar()
				if _ecggf := d.DecodeElement(_bgdeg.UpBars, &_cbaag); _ecggf != nil {
					return _ecggf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_bgdeg.DownBars = NewCT_UpDownBar()
				if _facde := d.DecodeElement(_bgdeg.DownBars, &_cbaag); _facde != nil {
					return _facde
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgdeg.ExtLst = NewCT_ExtensionList()
				if _dgaba := d.DecodeElement(_bgdeg.ExtLst, &_cbaag); _dgaba != nil {
					return _dgaba
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0055p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073 \u0025\u0076", _cbaag.Name)
				if _aafe := d.Skip(); _aafe != nil {
					return _aafe
				}
			}
		case _c.EndElement:
			break _edce
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RotX and its children, prefixing error messages with path
func (_fgaab *CT_RotX) ValidateWithPath(path string) error {
	if _fgaab.ValAttr != nil {
		if *_fgaab.ValAttr < -90 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003e\u003d\u0020\u002d\u0039\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_fgaab.ValAttr)
		}
		if *_fgaab.ValAttr > 90 {
			return _aa.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00390 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_fgaab.ValAttr)
		}
	}
	return nil
}
func NewCT_DepthPercent() *CT_DepthPercent { _dcaa := &CT_DepthPercent{}; return _dcaa }
func NewCT_ExternalData() *CT_ExternalData { _cefa := &CT_ExternalData{}; return _cefa }
func NewCT_AreaChart() *CT_AreaChart       { _gd := &CT_AreaChart{}; return _gd }

// ValidateWithPath validates the CT_MultiLvlStrData and its children, prefixing error messages with path
func (_dfbc *CT_MultiLvlStrData) ValidateWithPath(path string) error {
	if _dfbc.PtCount != nil {
		if _dbfb := _dfbc.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _dbfb != nil {
			return _dbfb
		}
	}
	for _aeggf, _eacb := range _dfbc.Lvl {
		if _fcgb := _eacb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u004c\u0076\u006c\u005b\u0025\u0064\u005d", path, _aeggf)); _fcgb != nil {
			return _fcgb
		}
	}
	if _dfbc.ExtLst != nil {
		if _bgecg := _dfbc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgecg != nil {
			return _bgecg
		}
	}
	return nil
}

// Validate validates the CT_PieChart and its children
func (_bead *CT_PieChart) Validate() error {
	return _bead.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_acbcf *CT_TextLanguageID) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _acbcf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fedaa *CT_PivotSource) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fedaa.FmtId = NewCT_UnsignedInt()
_dgdeg:
	for {
		_cbdg, _fggc := d.Token()
		if _fggc != nil {
			return _fggc
		}
		switch _aabbb := _cbdg.(type) {
		case _c.StartElement:
			switch _aabbb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				if _fbge := d.DecodeElement(&_fedaa.Name, &_aabbb); _fbge != nil {
					return _fbge
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}:
				if _gbed := d.DecodeElement(_fedaa.FmtId, &_aabbb); _gbed != nil {
					return _gbed
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbfda := NewCT_ExtensionList()
				if _gdca := d.DecodeElement(_fbfda, &_aabbb); _gdca != nil {
					return _gdca
				}
				_fedaa.ExtLst = append(_fedaa.ExtLst, _fbfda)
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053\u006fu\u0072c\u0065\u0020\u0025\u0076", _aabbb.Name)
				if _febb := d.Skip(); _febb != nil {
					return _febb
				}
			}
		case _c.EndElement:
			break _dgdeg
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Tx and its children, prefixing error messages with path
func (_dcgc *CT_Tx) ValidateWithPath(path string) error {
	if _ffage := _dcgc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ffage != nil {
		return _ffage
	}
	return nil
}

// ValidateWithPath validates the CT_DoughnutChart and its children, prefixing error messages with path
func (_aggg *CT_DoughnutChart) ValidateWithPath(path string) error {
	if _aggg.VaryColors != nil {
		if _gecg := _aggg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gecg != nil {
			return _gecg
		}
	}
	for _eceea, _addg := range _aggg.Ser {
		if _fffg := _addg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eceea)); _fffg != nil {
			return _fffg
		}
	}
	if _aggg.DLbls != nil {
		if _cbcf := _aggg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cbcf != nil {
			return _cbcf
		}
	}
	if _aggg.FirstSliceAng != nil {
		if _agcg := _aggg.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _agcg != nil {
			return _agcg
		}
	}
	if _aggg.HoleSize != nil {
		if _fegge := _aggg.HoleSize.ValidateWithPath(path + "\u002fH\u006f\u006c\u0065\u0053\u0069\u007ae"); _fegge != nil {
			return _fegge
		}
	}
	if _aggg.ExtLst != nil {
		if _gegc := _aggg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gegc != nil {
			return _gegc
		}
	}
	return nil
}

type CT_BarGrouping struct{ ValAttr ST_BarGrouping }
type CT_SecondPieSize struct{ ValAttr *ST_SecondPieSize }

func NewEG_AxSharedChoice() *EG_AxSharedChoice { _aeega := &EG_AxSharedChoice{}; return _aeega }
func (_eca *CT_AreaSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_bdg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_eca.Idx, _bdg)
	_ffff := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_eca.Order, _ffff)
	if _eca.Tx != nil {
		_ag := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eca.Tx, _ag)
	}
	if _eca.SpPr != nil {
		_fcd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eca.SpPr, _fcd)
	}
	if _eca.PictureOptions != nil {
		_gaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_eca.PictureOptions, _gaf)
	}
	if _eca.DPt != nil {
		_eda := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _fcc := range _eca.DPt {
			e.EncodeElement(_fcc, _eda)
		}
	}
	if _eca.DLbls != nil {
		_gec := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eca.DLbls, _gec)
	}
	if _eca.Trendline != nil {
		_aad := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _faf := range _eca.Trendline {
			e.EncodeElement(_faf, _aad)
		}
	}
	if _eca.ErrBars != nil {
		_bgf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _deg := range _eca.ErrBars {
			e.EncodeElement(_deg, _bgf)
		}
	}
	if _eca.Cat != nil {
		_ggb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_eca.Cat, _ggb)
	}
	if _eca.Val != nil {
		_gccg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_eca.Val, _gccg)
	}
	if _eca.ExtLst != nil {
		_dfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eca.ExtLst, _dfa)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_adeec *CT_NumFmt) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _egdg := range start.Attr {
		if _egdg.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_gecb, _bffb := _egdg.Value, error(nil)
			if _bffb != nil {
				return _bffb
			}
			_adeec.FormatCodeAttr = _gecb
			continue
		}
		if _egdg.Name.Local == "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064" {
			_cbgdf, _baee := _e.ParseBool(_egdg.Value)
			if _baee != nil {
				return _baee
			}
			_adeec.SourceLinkedAttr = &_cbgdf
			continue
		}
	}
	for {
		_becff, _dgfd := d.Token()
		if _dgfd != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004e\u0075\u006dF\u006d\u0074\u003a\u0020\u0025\u0073", _dgfd)
		}
		if _acbea, _gbfb := _becff.(_c.EndElement); _gbfb && _acbea.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_PictureFormat byte

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_dbcg *CT_Style) ValidateWithPath(path string) error {
	if _dbcg.ValAttr < 1 {
		return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _dbcg.ValAttr)
	}
	if _dbcg.ValAttr > 48 {
		return _aa.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00348 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _dbcg.ValAttr)
	}
	return nil
}

// Validate validates the CT_DispUnits and its children
func (_effb *CT_DispUnits) Validate() error {
	return _effb.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073")
}

// ValidateWithPath validates the CT_MarkerSize and its children, prefixing error messages with path
func (_daaeb *CT_MarkerSize) ValidateWithPath(path string) error {
	if _daaeb.ValAttr != nil {
		if *_daaeb.ValAttr < 2 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_daaeb.ValAttr)
		}
		if *_daaeb.ValAttr > 72 {
			return _aa.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00372 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_daaeb.ValAttr)
		}
	}
	return nil
}
func (_ccc *CT_Area3DChart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ee:
	for {
		_gg, _egb := d.Token()
		if _egb != nil {
			return _egb
		}
		switch _ca := _gg.(type) {
		case _c.StartElement:
			switch _ca.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ccc.Grouping = NewCT_Grouping()
				if _bf := d.DecodeElement(_ccc.Grouping, &_ca); _bf != nil {
					return _bf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ccc.VaryColors = NewCT_Boolean()
				if _dad := d.DecodeElement(_ccc.VaryColors, &_ca); _dad != nil {
					return _dad
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fc := NewCT_AreaSer()
				if _ec := d.DecodeElement(_fc, &_ca); _ec != nil {
					return _ec
				}
				_ccc.Ser = append(_ccc.Ser, _fc)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ccc.DLbls = NewCT_DLbls()
				if _fe := d.DecodeElement(_ccc.DLbls, &_ca); _fe != nil {
					return _fe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_ccc.DropLines = NewCT_ChartLines()
				if _gef := d.DecodeElement(_ccc.DropLines, &_ca); _gef != nil {
					return _gef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_ccc.GapDepth = NewCT_GapAmount()
				if _eeg := d.DecodeElement(_ccc.GapDepth, &_ca); _eeg != nil {
					return _eeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_ab := NewCT_UnsignedInt()
				if _ad := d.DecodeElement(_ab, &_ca); _ad != nil {
					return _ad
				}
				_ccc.AxId = append(_ccc.AxId, _ab)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccc.ExtLst = NewCT_ExtensionList()
				if _be := d.DecodeElement(_ccc.ExtLst, &_ca); _be != nil {
					return _be
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _ca.Name)
				if _ga := d.Skip(); _ga != nil {
					return _ga
				}
			}
		case _c.EndElement:
			break _ee
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarChart and its children, prefixing error messages with path
func (_afd *CT_BarChart) ValidateWithPath(path string) error {
	if _dgc := _afd.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _dgc != nil {
		return _dgc
	}
	if _afd.Grouping != nil {
		if _dfdd := _afd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dfdd != nil {
			return _dfdd
		}
	}
	if _afd.VaryColors != nil {
		if _cga := _afd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cga != nil {
			return _cga
		}
	}
	for _dagf, _ccbb := range _afd.Ser {
		if _ccf := _ccbb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dagf)); _ccf != nil {
			return _ccf
		}
	}
	if _afd.DLbls != nil {
		if _dbef := _afd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dbef != nil {
			return _dbef
		}
	}
	if _afd.GapWidth != nil {
		if _dcea := _afd.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _dcea != nil {
			return _dcea
		}
	}
	if _afd.Overlap != nil {
		if _dbga := _afd.Overlap.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0070"); _dbga != nil {
			return _dbga
		}
	}
	for _ccce, _ebg := range _afd.SerLines {
		if _aade := _ebg.ValidateWithPath(_aa.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _ccce)); _aade != nil {
			return _aade
		}
	}
	for _afe, _bae := range _afd.AxId {
		if _aeec := _bae.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _afe)); _aeec != nil {
			return _aeec
		}
	}
	if _afd.ExtLst != nil {
		if _cag := _afd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cag != nil {
			return _cag
		}
	}
	return nil
}
func NewCT_CatAx() *CT_CatAx {
	_fegcd := &CT_CatAx{}
	_fegcd.AxId = NewCT_UnsignedInt()
	_fegcd.Scaling = NewCT_Scaling()
	_fegcd.AxPos = NewCT_AxPos()
	_fegcd.CrossAx = NewCT_UnsignedInt()
	return _fegcd
}
func (_cacfd *ST_Orientation) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gggg, _ebaee := d.Token()
	if _ebaee != nil {
		return _ebaee
	}
	if _acdfc, _fcceb := _gggg.(_c.EndElement); _fcceb && _acdfc.Name == start.Name {
		*_cacfd = 1
		return nil
	}
	if _dgcce, _acde := _gggg.(_c.CharData); !_acde {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gggg)
	} else {
		switch string(_dgcce) {
		case "":
			*_cacfd = 0
		case "\u006d\u0061\u0078\u004d\u0069\u006e":
			*_cacfd = 1
		case "\u006d\u0069\u006e\u004d\u0061\u0078":
			*_cacfd = 2
		}
	}
	_gggg, _ebaee = d.Token()
	if _ebaee != nil {
		return _ebaee
	}
	if _gdgeg, _bedae := _gggg.(_c.EndElement); _bedae && _gdgeg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gggg)
}
func (_dca *CT_ChartSpace) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _dca.Date1904 != nil {
		_ddcf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}}
		e.EncodeElement(_dca.Date1904, _ddcf)
	}
	if _dca.Lang != nil {
		_aagea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u006e\u0067"}}
		e.EncodeElement(_dca.Lang, _aagea)
	}
	if _dca.RoundedCorners != nil {
		_afea := _c.StartElement{Name: _c.Name{Local: "\u0063\u003ar\u006f\u0075\u006ed\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"}}
		e.EncodeElement(_dca.RoundedCorners, _afea)
	}
	if _dca.Style != nil {
		_baf := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0073\u0074\u0079\u006c\u0065"}}
		e.EncodeElement(_dca.Style, _baf)
	}
	if _dca.ClrMapOvr != nil {
		_aebd := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0063\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"}}
		e.EncodeElement(_dca.ClrMapOvr, _aebd)
	}
	if _dca.PivotSource != nil {
		_bbed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}}
		e.EncodeElement(_dca.PivotSource, _bbed)
	}
	if _dca.Protection != nil {
		_gbbe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0070r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_dca.Protection, _gbbe)
	}
	_aeee := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0063\u0068\u0061\u0072\u0074"}}
	e.EncodeElement(_dca.Chart, _aeee)
	if _dca.SpPr != nil {
		_eggf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dca.SpPr, _eggf)
	}
	if _dca.TxPr != nil {
		_ccbd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dca.TxPr, _ccbd)
	}
	if _dca.ExternalData != nil {
		_bfgf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u0065\u0072\u006e\u0061l\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_dca.ExternalData, _bfgf)
	}
	if _dca.PrintSettings != nil {
		_fffe := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0070r\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}}
		e.EncodeElement(_dca.PrintSettings, _fffe)
	}
	if _dca.UserShapes != nil {
		_beb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}}
		e.EncodeElement(_dca.UserShapes, _beb)
	}
	if _dca.ExtLst != nil {
		_cfbe := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dca.ExtLst, _cfbe)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_Grouping() *CT_Grouping { _gdgb := &CT_Grouping{}; return _gdgb }
func (_gdaaf ST_PageSetupOrientation) ValidateWithPath(path string) error {
	switch _gdaaf {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdaaf))
	}
	return nil
}

type CT_ExtensionList struct{ Ext []*CT_Extension }

func NewCT_DTable() *CT_DTable { _ggeba := &CT_DTable{}; return _ggeba }

// Validate validates the CT_Shape and its children
func (_aebb *CT_Shape) Validate() error {
	return _aebb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

const (
	ST_DispBlanksAsUnset ST_DispBlanksAs = 0
	ST_DispBlanksAsSpan  ST_DispBlanksAs = 1
	ST_DispBlanksAsGap   ST_DispBlanksAs = 2
	ST_DispBlanksAsZero  ST_DispBlanksAs = 3
)

func (_fcdaf ST_CrossBetween) String() string {
	switch _fcdaf {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case 2:
		return "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return ""
}

type CT_UnsignedInt struct{ ValAttr uint32 }

func (_deedg ST_LayoutMode) ValidateWithPath(path string) error {
	switch _deedg {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_deedg))
	}
	return nil
}
func (_eggc *CT_ScatterSer) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dcefa := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_eggc.Idx, _dcefa)
	_ccdab := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_eggc.Order, _ccdab)
	if _eggc.Tx != nil {
		_debgg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eggc.Tx, _debgg)
	}
	if _eggc.SpPr != nil {
		_aacd := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eggc.SpPr, _aacd)
	}
	if _eggc.Marker != nil {
		_ddgbb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_eggc.Marker, _ddgbb)
	}
	if _eggc.DPt != nil {
		_ceaf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dgfbc := range _eggc.DPt {
			e.EncodeElement(_dgfbc, _ceaf)
		}
	}
	if _eggc.DLbls != nil {
		_gbbdg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eggc.DLbls, _gbbdg)
	}
	if _eggc.Trendline != nil {
		_dbbf := _c.StartElement{Name: _c.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _eafa := range _eggc.Trendline {
			e.EncodeElement(_eafa, _dbbf)
		}
	}
	if _eggc.ErrBars != nil {
		_ffbgb := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _abdbd := range _eggc.ErrBars {
			e.EncodeElement(_abdbd, _ffbgb)
		}
	}
	if _eggc.XVal != nil {
		_cfed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_eggc.XVal, _cfed)
	}
	if _eggc.YVal != nil {
		_cbfac := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_eggc.YVal, _cbfac)
	}
	if _eggc.Smooth != nil {
		_eacfb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_eggc.Smooth, _eacfb)
	}
	if _eggc.ExtLst != nil {
		_fdad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eggc.ExtLst, _fdad)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_AreaChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_egaae *ST_PictureFormat) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_egaae = 0
	case "\u0073t\u0072\u0065\u0074\u0063\u0068":
		*_egaae = 1
	case "\u0073\u0074\u0061c\u006b":
		*_egaae = 2
	case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
		*_egaae = 3
	}
	return nil
}

// ValidateWithPath validates the Group_DLbl and its children, prefixing error messages with path
func (_dfcab *Group_DLbl) ValidateWithPath(path string) error {
	if _dfcab.Layout != nil {
		if _ggdgb := _dfcab.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _ggdgb != nil {
			return _ggdgb
		}
	}
	if _dfcab.Tx != nil {
		if _gcbad := _dfcab.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gcbad != nil {
			return _gcbad
		}
	}
	if _dfcab.NumFmt != nil {
		if _eabf := _dfcab.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _eabf != nil {
			return _eabf
		}
	}
	if _dfcab.SpPr != nil {
		if _edda := _dfcab.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edda != nil {
			return _edda
		}
	}
	if _dfcab.TxPr != nil {
		if _bbcaca := _dfcab.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bbcaca != nil {
			return _bbcaca
		}
	}
	if _dfcab.DLblPos != nil {
		if _ecddd := _dfcab.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _ecddd != nil {
			return _ecddd
		}
	}
	if _dfcab.ShowLegendKey != nil {
		if _deaeg := _dfcab.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _deaeg != nil {
			return _deaeg
		}
	}
	if _dfcab.ShowVal != nil {
		if _cedbb := _dfcab.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _cedbb != nil {
			return _cedbb
		}
	}
	if _dfcab.ShowCatName != nil {
		if _edgbe := _dfcab.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _edgbe != nil {
			return _edgbe
		}
	}
	if _dfcab.ShowSerName != nil {
		if _agdfd := _dfcab.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _agdfd != nil {
			return _agdfd
		}
	}
	if _dfcab.ShowPercent != nil {
		if _babef := _dfcab.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _babef != nil {
			return _babef
		}
	}
	if _dfcab.ShowBubbleSize != nil {
		if _bfagc := _dfcab.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _bfagc != nil {
			return _bfagc
		}
	}
	return nil
}

type CT_HoleSize struct{ ValAttr *ST_HoleSize }

// Validate validates the CT_PlotAreaChoice and its children
func (_gbfe *CT_PlotAreaChoice) Validate() error {
	return _gbfe.ValidateWithPath("\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043h\u006f\u0069\u0063\u0065")
}

type CT_Order struct{ ValAttr *uint8 }

const ST_BubbleScalePercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0032\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0033\u0030\u0030\u0029\u0025"

func NewCT_Scaling() *CT_Scaling { _gcdb := &CT_Scaling{}; return _gcdb }

// Validate validates the CT_BandFmt and its children
func (_bag *CT_BandFmt) Validate() error {
	return _bag.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074")
}

// Validate validates the EG_AreaChartShared and its children
func (_afef *EG_AreaChartShared) Validate() error {
	return _afef.ValidateWithPath("\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}
func (_dabafg *CT_Orientation) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dcgb := range start.Attr {
		if _dcgb.Name.Local == "\u0076\u0061\u006c" {
			_dabafg.ValAttr.UnmarshalXMLAttr(_dcgb)
			continue
		}
	}
	for {
		_ecaab, _fbbf := d.Token()
		if _fbbf != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _fbbf)
		}
		if _cdgf, _fcgc := _ecaab.(_c.EndElement); _fcgc && _cdgf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_BubbleChart() *CT_BubbleChart { _agf := &CT_BubbleChart{}; return _agf }

const (
	ST_LayoutTargetUnset ST_LayoutTarget = 0
	ST_LayoutTargetInner ST_LayoutTarget = 1
	ST_LayoutTargetOuter ST_LayoutTarget = 2
)

func (_dcbea ST_GapAmount) String() string {
	if _dcbea.ST_GapAmountPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_dcbea.ST_GapAmountPercent)
	}
	if _dcbea.ST_GapAmountUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_dcbea.ST_GapAmountUShort)
	}
	return ""
}
func NewCT_OfPieChart() *CT_OfPieChart {
	_bbedf := &CT_OfPieChart{}
	_bbedf.OfPieType = NewCT_OfPieType()
	return _bbedf
}

type CT_Scaling struct {
	LogBase     *CT_LogBase
	Orientation *CT_Orientation
	Max         *CT_Double
	Min         *CT_Double
	ExtLst      *CT_ExtensionList
}
type ST_ScatterStyle byte

func (_febgd *CT_PlotArea) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _febgd.Layout != nil {
		_bbcbc := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_febgd.Layout, _bbcbc)
	}
	for _, _abfgg := range _febgd.Choice {
		_abfgg.MarshalXML(e, _c.StartElement{})
	}
	if _febgd.CChoice != nil {
		_febgd.CChoice.MarshalXML(e, _c.StartElement{})
	}
	if _febgd.DTable != nil {
		_baaecb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0064\u0054\u0061\u0062\u006c\u0065"}}
		e.EncodeElement(_febgd.DTable, _baaecb)
	}
	if _febgd.SpPr != nil {
		_gbagg := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_febgd.SpPr, _gbagg)
	}
	if _febgd.ExtLst != nil {
		_cceed := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febgd.ExtLst, _cceed)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_aadde *EG_DLblShared) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cgfcf:
	for {
		_aabbcd, _ggbgg := d.Token()
		if _ggbgg != nil {
			return _ggbgg
		}
		switch _gbbac := _aabbcd.(type) {
		case _c.StartElement:
			switch _gbbac.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_aadde.NumFmt = NewCT_NumFmt()
				if _afbec := d.DecodeElement(_aadde.NumFmt, &_gbbac); _afbec != nil {
					return _afbec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aadde.SpPr = _d.NewCT_ShapeProperties()
				if _fcdbc := d.DecodeElement(_aadde.SpPr, &_gbbac); _fcdbc != nil {
					return _fcdbc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_aadde.TxPr = _d.NewCT_TextBody()
				if _eeee := d.DecodeElement(_aadde.TxPr, &_gbbac); _eeee != nil {
					return _eeee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_aadde.DLblPos = NewCT_DLblPos()
				if _efcfa := d.DecodeElement(_aadde.DLblPos, &_gbbac); _efcfa != nil {
					return _efcfa
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_aadde.ShowLegendKey = NewCT_Boolean()
				if _dbecf := d.DecodeElement(_aadde.ShowLegendKey, &_gbbac); _dbecf != nil {
					return _dbecf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_aadde.ShowVal = NewCT_Boolean()
				if _abdgf := d.DecodeElement(_aadde.ShowVal, &_gbbac); _abdgf != nil {
					return _abdgf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_aadde.ShowCatName = NewCT_Boolean()
				if _gefce := d.DecodeElement(_aadde.ShowCatName, &_gbbac); _gefce != nil {
					return _gefce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_aadde.ShowSerName = NewCT_Boolean()
				if _dceef := d.DecodeElement(_aadde.ShowSerName, &_gbbac); _dceef != nil {
					return _dceef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_aadde.ShowPercent = NewCT_Boolean()
				if _bbfdc := d.DecodeElement(_aadde.ShowPercent, &_gbbac); _bbfdc != nil {
					return _bbfdc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_aadde.ShowBubbleSize = NewCT_Boolean()
				if _bebg := d.DecodeElement(_aadde.ShowBubbleSize, &_gbbac); _bebg != nil {
					return _bebg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_aadde.Separator = new(string)
				if _cfgde := d.DecodeElement(_aadde.Separator, &_gbbac); _cfgde != nil {
					return _cfgde
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0044L\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064 \u0025\u0076", _gbbac.Name)
				if _gceaf := d.Skip(); _gceaf != nil {
					return _gceaf
				}
			}
		case _c.EndElement:
			break _cgfcf
		case _c.CharData:
		}
	}
	return nil
}
func (_fgcbf *ST_Orientation) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_fgcbf = 0
	case "\u006d\u0061\u0078\u004d\u0069\u006e":
		*_fgcbf = 1
	case "\u006d\u0069\u006e\u004d\u0061\u0078":
		*_fgcbf = 2
	}
	return nil
}

type CT_SurfaceChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}
type CT_Shape struct{ ValAttr ST_Shape }
type CT_ErrBars struct {
	ErrDir     *CT_ErrDir
	ErrBarType *CT_ErrBarType
	ErrValType *CT_ErrValType
	NoEndCap   *CT_Boolean
	Plus       *CT_NumDataSource
	Minus      *CT_NumDataSource
	Val        *CT_Double
	SpPr       *_d.CT_ShapeProperties
	ExtLst     *CT_ExtensionList
}

func (_fafea *CT_NumData) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_cecfe:
	for {
		_eafc, _deeg := d.Token()
		if _deeg != nil {
			return _deeg
		}
		switch _fbdcf := _eafc.(type) {
		case _c.StartElement:
			switch _fbdcf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}:
				_fafea.FormatCode = new(string)
				if _gfba := d.DecodeElement(_fafea.FormatCode, &_fbdcf); _gfba != nil {
					return _gfba
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_fafea.PtCount = NewCT_UnsignedInt()
				if _gbgb := d.DecodeElement(_fafea.PtCount, &_fbdcf); _gbgb != nil {
					return _gbgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_ecdba := NewCT_NumVal()
				if _agfe := d.DecodeElement(_ecdba, &_fbdcf); _agfe != nil {
					return _agfe
				}
				_fafea.Pt = append(_fafea.Pt, _ecdba)
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fafea.ExtLst = NewCT_ExtensionList()
				if _eacba := d.DecodeElement(_fafea.ExtLst, &_fbdcf); _eacba != nil {
					return _eacba
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fN\u0075\u006d\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _fbdcf.Name)
				if _abbb := d.Skip(); _abbb != nil {
					return _abbb
				}
			}
		case _c.EndElement:
			break _cecfe
		case _c.CharData:
		}
	}
	return nil
}
func NewGroup_DLbl() *Group_DLbl { _gbece := &Group_DLbl{}; return _gbece }

// ValidateWithPath validates the CT_PivotSource and its children, prefixing error messages with path
func (_gabeb *CT_PivotSource) ValidateWithPath(path string) error {
	if _ffaga := _gabeb.FmtId.ValidateWithPath(path + "\u002f\u0046\u006d\u0074\u0049\u0064"); _ffaga != nil {
		return _ffaga
	}
	for _bgfd, _cabcc := range _gabeb.ExtLst {
		if _ggeg := _cabcc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _bgfd)); _ggeg != nil {
			return _ggeg
		}
	}
	return nil
}
func (_abgdd *CT_Double) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _abgdd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_gggdc *CT_Overlap) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _dbeaf := range start.Attr {
		if _dbeaf.Name.Local == "\u0076\u0061\u006c" {
			_gddb, _fcaf := ParseUnionST_Overlap(_dbeaf.Value)
			if _fcaf != nil {
				return _fcaf
			}
			_gggdc.ValAttr = &_gddb
			continue
		}
	}
	for {
		_bebd, _bbcgc := d.Token()
		if _bbcgc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u003a\u0020%\u0073", _bbcgc)
		}
		if _ggdf, _dgdaf := _bebd.(_c.EndElement); _dgdaf && _ggdf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggce *CT_Chart) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ggce.PlotArea = NewCT_PlotArea()
_gebe:
	for {
		_cbcg, _deag := d.Token()
		if _deag != nil {
			return _deag
		}
		switch _agcb := _cbcg.(type) {
		case _c.StartElement:
			switch _agcb.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_ggce.Title = NewCT_Title()
				if _ddfg := d.DecodeElement(_ggce.Title, &_agcb); _ddfg != nil {
					return _ddfg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}:
				_ggce.AutoTitleDeleted = NewCT_Boolean()
				if _daef := d.DecodeElement(_ggce.AutoTitleDeleted, &_agcb); _daef != nil {
					return _daef
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}:
				_ggce.PivotFmts = NewCT_PivotFmts()
				if _dcda := d.DecodeElement(_ggce.PivotFmts, &_agcb); _dcda != nil {
					return _dcda
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}:
				_ggce.View3D = NewCT_View3D()
				if _afec := d.DecodeElement(_ggce.View3D, &_agcb); _afec != nil {
					return _afec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}:
				_ggce.Floor = NewCT_Surface()
				if _abcee := d.DecodeElement(_ggce.Floor, &_agcb); _abcee != nil {
					return _abcee
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}:
				_ggce.SideWall = NewCT_Surface()
				if _aaecb := d.DecodeElement(_ggce.SideWall, &_agcb); _aaecb != nil {
					return _aaecb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}:
				_ggce.BackWall = NewCT_Surface()
				if _abgbb := d.DecodeElement(_ggce.BackWall, &_agcb); _abgbb != nil {
					return _abgbb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}:
				if _egcf := d.DecodeElement(_ggce.PlotArea, &_agcb); _egcf != nil {
					return _egcf
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}:
				_ggce.Legend = NewCT_Legend()
				if _fgaac := d.DecodeElement(_ggce.Legend, &_agcb); _fgaac != nil {
					return _fgaac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}:
				_ggce.PlotVisOnly = NewCT_Boolean()
				if _cdac := d.DecodeElement(_ggce.PlotVisOnly, &_agcb); _cdac != nil {
					return _cdac
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}:
				_ggce.DispBlanksAs = NewCT_DispBlanksAs()
				if _aggc := d.DecodeElement(_ggce.DispBlanksAs, &_agcb); _aggc != nil {
					return _aggc
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}:
				_ggce.ShowDLblsOverMax = NewCT_Boolean()
				if _fgb := d.DecodeElement(_ggce.ShowDLblsOverMax, &_agcb); _fgb != nil {
					return _fgb
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggce.ExtLst = NewCT_ExtensionList()
				if _ggg := d.DecodeElement(_ggce.ExtLst, &_agcb); _ggg != nil {
					return _ggg
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _agcb.Name)
				if _dgaf := d.Skip(); _dgaf != nil {
					return _dgaf
				}
			}
		case _c.EndElement:
			break _gebe
		case _c.CharData:
		}
	}
	return nil
}
func (_gebb ST_ScatterStyle) ValidateWithPath(path string) error {
	switch _gebb {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gebb))
	}
	return nil
}

type CT_DLbl struct {
	Idx    *CT_UnsignedInt
	Choice *CT_DLblChoice
	ExtLst *CT_ExtensionList
}

func (_cegccg ST_LegendPos) Validate() error { return _cegccg.ValidateWithPath("") }
func (_bgagae *CT_Surface) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_aabgd:
	for {
		_acbba, _baead := d.Token()
		if _baead != nil {
			return _baead
		}
		switch _cebaf := _acbba.(type) {
		case _c.StartElement:
			switch _cebaf.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}:
				_bgagae.Thickness = NewCT_Thickness()
				if _fecgeg := d.DecodeElement(_bgagae.Thickness, &_cebaf); _fecgeg != nil {
					return _fecgeg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bgagae.SpPr = _d.NewCT_ShapeProperties()
				if _fcae := d.DecodeElement(_bgagae.SpPr, &_cebaf); _fcae != nil {
					return _fcae
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_bgagae.PictureOptions = NewCT_PictureOptions()
				if _cabcg := d.DecodeElement(_bgagae.PictureOptions, &_cebaf); _cabcg != nil {
					return _cabcg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgagae.ExtLst = NewCT_ExtensionList()
				if _dddeaa := d.DecodeElement(_bgagae.ExtLst, &_cebaf); _dddeaa != nil {
					return _dddeaa
				}
			default:
				_cf.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0020\u0025\u0076", _cebaf.Name)
				if _fdaf := d.Skip(); _fdaf != nil {
					return _fdaf
				}
			}
		case _c.EndElement:
			break _aabgd
		case _c.CharData:
		}
	}
	return nil
}
func (_feea *CT_DispUnitsLbl) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_ffbb:
	for {
		_cgb, _ebde := d.Token()
		if _ebde != nil {
			return _ebde
		}
		switch _fagc := _cgb.(type) {
		case _c.StartElement:
			switch _fagc.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_feea.Layout = NewCT_Layout()
				if _gce := d.DecodeElement(_feea.Layout, &_fagc); _gce != nil {
					return _gce
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_feea.Tx = NewCT_Tx()
				if _eegbe := d.DecodeElement(_feea.Tx, &_fagc); _eegbe != nil {
					return _eegbe
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_feea.SpPr = _d.NewCT_ShapeProperties()
				if _bcec := d.DecodeElement(_feea.SpPr, &_fagc); _bcec != nil {
					return _bcec
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_feea.TxPr = _d.NewCT_TextBody()
				if _egeb := d.DecodeElement(_feea.TxPr, &_fagc); _egeb != nil {
					return _egeb
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c\u0020\u0025\u0076", _fagc.Name)
				if _abaa := d.Skip(); _abaa != nil {
					return _abaa
				}
			}
		case _c.EndElement:
			break _ffbb
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_PictureOptions() *CT_PictureOptions { _cadcd := &CT_PictureOptions{}; return _cadcd }
func NewCT_NumData() *CT_NumData               { _gbaf := &CT_NumData{}; return _gbaf }
func (_febaa *CT_LegendEntryChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_gfcef:
	for {
		_afadg, _fbff := d.Token()
		if _fbff != nil {
			return _fbff
		}
		switch _ddfd := _afadg.(type) {
		case _c.StartElement:
			switch _ddfd.Name {
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_febaa.Delete = NewCT_Boolean()
				if _ecff := d.DecodeElement(_febaa.Delete, &_ddfd); _ecff != nil {
					return _ecff
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _c.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_febaa.TxPr = _d.NewCT_TextBody()
				if _bbcab := d.DecodeElement(_febaa.TxPr, &_ddfd); _bbcab != nil {
					return _bbcab
				}
			default:
				_cf.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ddfd.Name)
				if _aaagg := d.Skip(); _aaagg != nil {
					return _aaagg
				}
			}
		case _c.EndElement:
			break _gfcef
		case _c.CharData:
		}
	}
	return nil
}

type CT_NumData struct {
	FormatCode *string
	PtCount    *CT_UnsignedInt
	Pt         []*CT_NumVal
	ExtLst     *CT_ExtensionList
}

func NewCT_BubbleScale() *CT_BubbleScale { _cae := &CT_BubbleScale{}; return _cae }
func (_gfdef ST_OfPieType) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gbgdb := _c.Attr{}
	_gbgdb.Name = name
	switch _gfdef {
	case ST_OfPieTypeUnset:
		_gbgdb.Value = ""
	case ST_OfPieTypePie:
		_gbgdb.Value = "\u0070\u0069\u0065"
	case ST_OfPieTypeBar:
		_gbgdb.Value = "\u0062\u0061\u0072"
	}
	return _gbgdb, nil
}
func NewCT_Layout() *CT_Layout     { _feba := &CT_Layout{}; return _feba }
func NewCT_TimeUnit() *CT_TimeUnit { _bddab := &CT_TimeUnit{}; return _bddab }
func (_dcggee *CT_Skip) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dcggee.ValAttr = 1
	for _, _ffagad := range start.Attr {
		if _ffagad.Name.Local == "\u0076\u0061\u006c" {
			_gabaa, _gcfe := _e.ParseUint(_ffagad.Value, 10, 32)
			if _gcfe != nil {
				return _gcfe
			}
			_dcggee.ValAttr = uint32(_gabaa)
			continue
		}
	}
	for {
		_edbge, _ebcfc := d.Token()
		if _ebcfc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0053\u006b\u0069\u0070\u003a\u0020\u0025\u0073", _ebcfc)
		}
		if _fcedae, _eaegf := _edbge.(_c.EndElement); _eaegf && _fcedae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dbd *CT_BarChart) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_gbf := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_dbd.BarDir, _gbf)
	if _dbd.Grouping != nil {
		_gcgb := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_dbd.Grouping, _gcgb)
	}
	if _dbd.VaryColors != nil {
		_ede := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dbd.VaryColors, _ede)
	}
	if _dbd.Ser != nil {
		_bcff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dagb := range _dbd.Ser {
			e.EncodeElement(_dagb, _bcff)
		}
	}
	if _dbd.DLbls != nil {
		_dbg := _c.StartElement{Name: _c.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dbd.DLbls, _dbg)
	}
	if _dbd.GapWidth != nil {
		_dfff := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_dbd.GapWidth, _dfff)
	}
	if _dbd.Overlap != nil {
		_fge := _c.StartElement{Name: _c.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061p"}}
		e.EncodeElement(_dbd.Overlap, _fge)
	}
	if _dbd.SerLines != nil {
		_cfce := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _def := range _dbd.SerLines {
			e.EncodeElement(_def, _cfce)
		}
	}
	_bad := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _efa := range _dbd.AxId {
		e.EncodeElement(_efa, _bad)
	}
	if _dbd.ExtLst != nil {
		_cge := _c.StartElement{Name: _c.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbd.ExtLst, _cge)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ErrValTypeUnset      ST_ErrValType = 0
	ST_ErrValTypeCust       ST_ErrValType = 1
	ST_ErrValTypeFixedVal   ST_ErrValType = 2
	ST_ErrValTypePercentage ST_ErrValType = 3
	ST_ErrValTypeStdDev     ST_ErrValType = 4
	ST_ErrValTypeStdErr     ST_ErrValType = 5
)

// Validate validates the CT_BuiltInUnit and its children
func (_ffdg *CT_BuiltInUnit) Validate() error {
	return _ffdg.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074")
}

// ST_BubbleScale is a union type
type ST_BubbleScale struct {
	ST_BubbleScalePercent *string
	ST_BubbleScaleUInt    *uint32
}

// ST_DepthPercent is a union type
type ST_DepthPercent struct {
	ST_DepthPercentWithSymbol *string
	ST_DepthPercentUShort     *uint16
}

func (_fcad *ST_DispBlanksAs) UnmarshalXMLAttr(attr _c.Attr) error {
	switch attr.Value {
	case "":
		*_fcad = 0
	case "\u0073\u0070\u0061\u006e":
		*_fcad = 1
	case "\u0067\u0061\u0070":
		*_fcad = 2
	case "\u007a\u0065\u0072\u006f":
		*_fcad = 3
	}
	return nil
}
func (_ebeg *CT_PageMargins) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _ebeg.LAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0072"}, Value: _aa.Sprintf("\u0025\u0076", _ebeg.RAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0074"}, Value: _aa.Sprintf("\u0025\u0076", _ebeg.TAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0062"}, Value: _aa.Sprintf("\u0025\u0076", _ebeg.BAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0068\u0065\u0061\u0064\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0076", _ebeg.HeaderAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u006f\u006f\u0074\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0076", _ebeg.FooterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_CatAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_d.CT_ShapeProperties
	TxPr           *_d.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblAlgn        *CT_LblAlgn
	LblOffset      *CT_LblOffset
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	NoMultiLvlLbl  *CT_Boolean
	ExtLst         *CT_ExtensionList
}

func (_fffdg ST_TickMark) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return e.EncodeElement(_fffdg.String(), start)
}

type CT_RotX struct{ ValAttr *int8 }

// Validate validates the CT_Overlap and its children
func (_aaefc *CT_Overlap) Validate() error {
	return _aaefc.ValidateWithPath("\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070")
}
func (_bcaa ST_Grouping) MarshalXMLAttr(name _c.Name) (_c.Attr, error) {
	_gebgg := _c.Attr{}
	_gebgg.Name = name
	switch _bcaa {
	case ST_GroupingUnset:
		_gebgg.Value = ""
	case ST_GroupingPercentStacked:
		_gebgg.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_GroupingStandard:
		_gebgg.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_GroupingStacked:
		_gebgg.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _gebgg, nil
}

// ValidateWithPath validates the CT_AxPos and its children, prefixing error messages with path
func (_ffcd *CT_AxPos) ValidateWithPath(path string) error {
	if _ffcd.ValAttr == ST_AxPosUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bgb := _ffcd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bgb != nil {
		return _bgb
	}
	return nil
}

type CT_BubbleChart struct {
	VaryColors     *CT_Boolean
	Ser            []*CT_BubbleSer
	DLbls          *CT_DLbls
	Bubble3D       *CT_Boolean
	BubbleScale    *CT_BubbleScale
	ShowNegBubbles *CT_Boolean
	SizeRepresents *CT_SizeRepresents
	AxId           []*CT_UnsignedInt
	ExtLst         *CT_ExtensionList
}

// Validate validates the EG_AxSharedChoice and its children
func (_eaae *EG_AxSharedChoice) Validate() error {
	return _eaae.ValidateWithPath("\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043h\u006f\u0069\u0063\u0065")
}
func init() {
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e", NewCT_Boolean)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce", NewCT_Double)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074", NewCT_UnsignedInt)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064", NewCT_RelId)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l", NewCT_NumVal)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061", NewCT_NumData)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f", NewCT_NumRef)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_NumDataSource)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l", NewCT_StrVal)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061", NewCT_StrData)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f", NewCT_StrRef)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0078", NewCT_Tx)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044", NewCT_TextLanguageID)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0076\u006c", NewCT_Lvl)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061", NewCT_MultiLvlStrData)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066", NewCT_MultiLvlStrRef)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_AxDataSource)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078", NewCT_SerTx)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074", NewCT_LayoutTarget)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065", NewCT_LayoutMode)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074", NewCT_ManualLayout)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t", NewCT_Layout)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065", NewCT_Title)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0058", NewCT_RotX)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_HPercent)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0059", NewCT_RotY)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_DepthPercent)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065", NewCT_Perspective)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D", NewCT_View3D)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065", NewCT_Surface)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073", NewCT_Thickness)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce", NewCT_DTable)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074", NewCT_GapAmount)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070", NewCT_Overlap)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065", NewCT_BubbleScale)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073", NewCT_SizeRepresents)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067", NewCT_FirstSliceAng)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065", NewCT_HoleSize)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065", NewCT_SplitType)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074", NewCT_CustSplit)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065", NewCT_SecondPieSize)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt", NewCT_NumFmt)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e", NewCT_LblAlgn)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_DLblPos)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u004c\u0062\u006c", NewCT_DLbl)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073", NewCT_DLbls)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065", NewCT_MarkerStyle)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065", NewCT_MarkerSize)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u0050\u0074", NewCT_DPt)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065", NewCT_TrendlineType)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072", NewCT_Order)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd", NewCT_Period)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c", NewCT_TrendlineLbl)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065", NewCT_Trendline)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r", NewCT_ErrDir)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065", NewCT_ErrBarType)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065", NewCT_ErrValType)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073", NewCT_ErrBars)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072", NewCT_UpDownBar)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073", NewCT_UpDownBars)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072", NewCT_LineSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072", NewCT_ScatterSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072", NewCT_RadarSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r", NewCT_BarSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072", NewCT_AreaSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r", NewCT_PieSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072", NewCT_BubbleSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072", NewCT_SurfaceSer)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067", NewCT_Grouping)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073", NewCT_ChartLines)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_LineChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Line3DChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074", NewCT_StockChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_ScatterStyle)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_ScatterChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_RadarStyle)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_RadarChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067", NewCT_BarGrouping)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r", NewCT_BarDir)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_BarChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Bar3DChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074", NewCT_AreaChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Area3DChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_PieChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Pie3DChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074", NewCT_DoughnutChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065", NewCT_OfPieType)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_OfPieChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074", NewCT_BubbleChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074", NewCT_BandFmt)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073", NewCT_BandFmts)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_SurfaceChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Surface3DChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073", NewCT_AxPos)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073", NewCT_Crosses)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e", NewCT_CrossBetween)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b", NewCT_TickMark)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_TickLblPos)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u006b\u0069\u0070", NewCT_Skip)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074", NewCT_TimeUnit)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074", NewCT_AxisUnit)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074", NewCT_BuiltInUnit)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074", NewCT_PictureFormat)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074", NewCT_PictureStackUnit)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073", NewCT_PictureOptions)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c", NewCT_DispUnitsLbl)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073", NewCT_DispUnits)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e", NewCT_Orientation)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065", NewCT_LogBase)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067", NewCT_Scaling)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074", NewCT_LblOffset)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078", NewCT_CatAx)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x", NewCT_DateAx)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078", NewCT_SerAx)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078", NewCT_ValAx)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061", NewCT_PlotArea)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074", NewCT_PivotFmt)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073", NewCT_PivotFmts)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073", NewCT_LegendPos)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079", NewCT_LegendEntry)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed", NewCT_Legend)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073", NewCT_DispBlanksAs)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074", NewCT_Chart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065", NewCT_PivotSource)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Protection)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072", NewCT_HeaderFooter)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073", NewCT_PageMargins)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061", NewCT_ExternalData)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070", NewCT_PageSetup)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073", NewCT_PrintSettings)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewCT_ChartSpace)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewChartSpace)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073", NewUserShapes)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061r\u0074", NewChart)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_DLblShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c", NewGroup_DLbl)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073", NewGroup_DLbls)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SerShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_LineChartShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_BarChartShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_AreaChartShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_PieChartShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SurfaceChartShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_AxShared)
	_cf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061", NewEG_LegendEntryData)
}
