//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package diagram

import (
	_a "encoding/xml"
	_bg "fmt"
	_fb "github.com/unidoc/unioffice"
	_bb "github.com/unidoc/unioffice/schema/soo/dml"
	_b "strconv"
)

func (_dgce ST_AnimOneStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dgce.String(), start)
}

const (
	ST_SecondaryChildAlignmentUnset ST_SecondaryChildAlignment = 0
	ST_SecondaryChildAlignmentNone  ST_SecondaryChildAlignment = 1
	ST_SecondaryChildAlignmentT     ST_SecondaryChildAlignment = 2
	ST_SecondaryChildAlignmentB     ST_SecondaryChildAlignment = 3
	ST_SecondaryChildAlignmentL     ST_SecondaryChildAlignment = 4
	ST_SecondaryChildAlignmentR     ST_SecondaryChildAlignment = 5
)

func (_cbaac ST_OutputShapeType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_aaag := _a.Attr{}
	_aaag.Name = name
	switch _cbaac {
	case ST_OutputShapeTypeUnset:
		_aaag.Value = ""
	case ST_OutputShapeTypeNone:
		_aaag.Value = "\u006e\u006f\u006e\u0065"
	case ST_OutputShapeTypeConn:
		_aaag.Value = "\u0063\u006f\u006e\u006e"
	}
	return _aaag, nil
}
func (_fgfef ST_Breakpoint) ValidateWithPath(path string) error {
	switch _fgfef {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgfef))
	}
	return nil
}

// ValidateWithPath validates the CT_CTCategory and its children, prefixing error messages with path
func (_baf *CT_CTCategory) ValidateWithPath(path string) error { return nil }
func (_ebbdd *CT_ColorTransform) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fed := range start.Attr {
		if _fed.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_gfced, _abf := _fed.Value, error(nil)
			if _abf != nil {
				return _abf
			}
			_ebbdd.UniqueIdAttr = &_gfced
			continue
		}
		if _fed.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_acd, _fbeg := _fed.Value, error(nil)
			if _fbeg != nil {
				return _fbeg
			}
			_ebbdd.MinVerAttr = &_acd
			continue
		}
	}
_edg:
	for {
		_bgbb, _ebe := d.Token()
		if _ebe != nil {
			return _ebe
		}
		switch _aca := _bgbb.(type) {
		case _a.StartElement:
			switch _aca.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_aga := NewCT_CTName()
				if _gdd := d.DecodeElement(_aga, &_aca); _gdd != nil {
					return _gdd
				}
				_ebbdd.Title = append(_ebbdd.Title, _aga)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_bccaf := NewCT_CTDescription()
				if _bec := d.DecodeElement(_bccaf, &_aca); _bec != nil {
					return _bec
				}
				_ebbdd.Desc = append(_ebbdd.Desc, _bccaf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_ebbdd.CatLst = NewCT_CTCategories()
				if _caca := d.DecodeElement(_ebbdd.CatLst, &_aca); _caca != nil {
					return _caca
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_cda := NewCT_CTStyleLabel()
				if _dgdc := d.DecodeElement(_cda, &_aca); _dgdc != nil {
					return _dgdc
				}
				_ebbdd.StyleLbl = append(_ebbdd.StyleLbl, _cda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebbdd.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _gaf := d.DecodeElement(_ebbdd.ExtLst, &_aca); _gaf != nil {
					return _gaf
				}
			default:
				_fb.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0020\u0025\u0076", _aca.Name)
				if _gbgg := d.Skip(); _gbgg != nil {
					return _gbgg
				}
			}
		case _a.EndElement:
			break _edg
		case _a.CharData:
		}
	}
	return nil
}
func (_cbea *ColorsDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f"
	return _cbea.CT_ColorTransform.MarshalXML(e, start)
}
func NewCT_Shape() *CT_Shape { _edefg := &CT_Shape{}; return _edefg }

// Validate validates the CT_StyleDefinitionHeader and its children
func (_edfa *CT_StyleDefinitionHeader) Validate() error {
	return _edfa.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072")
}

const (
	ST_ClrAppMethodUnset  ST_ClrAppMethod = 0
	ST_ClrAppMethodSpan   ST_ClrAppMethod = 1
	ST_ClrAppMethodCycle  ST_ClrAppMethod = 2
	ST_ClrAppMethodRepeat ST_ClrAppMethod = 3
)

func (_g *AG_ConstraintRefAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _g.RefTypeAttr != ST_ConstraintTypeUnset {
		_gd, _da := _g.RefTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _da != nil {
			return _da
		}
		start.Attr = append(start.Attr, _gd)
	}
	if _g.RefForAttr != ST_ConstraintRelationshipUnset {
		_ab, _df := _g.RefForAttr.MarshalXMLAttr(_a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _df != nil {
			return _df
		}
		start.Attr = append(start.Attr, _ab)
	}
	if _g.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_g.RefForNameAttr)})
	}
	if _g.RefPtTypeAttr != ST_ElementTypeUnset {
		_be, _ffb := _g.RefPtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _ffb != nil {
			return _ffb
		}
		start.Attr = append(start.Attr, _be)
	}
	return nil
}

type CT_ElemPropSet struct {
	PresAssocIDAttr          *ST_ModelId
	PresNameAttr             *string
	PresStyleLblAttr         *string
	PresStyleIdxAttr         *int32
	PresStyleCntAttr         *int32
	LoTypeIdAttr             *string
	LoCatIdAttr              *string
	QsTypeIdAttr             *string
	QsCatIdAttr              *string
	CsTypeIdAttr             *string
	CsCatIdAttr              *string
	Coherent3DOffAttr        *bool
	PhldrTAttr               *string
	PhldrAttr                *bool
	CustAngAttr              *int32
	CustFlipVertAttr         *bool
	CustFlipHorAttr          *bool
	CustSzXAttr              *int32
	CustSzYAttr              *int32
	CustScaleXAttr           *ST_PrSetCustVal
	CustScaleYAttr           *ST_PrSetCustVal
	CustTAttr                *bool
	CustLinFactXAttr         *ST_PrSetCustVal
	CustLinFactYAttr         *ST_PrSetCustVal
	CustLinFactNeighborXAttr *ST_PrSetCustVal
	CustLinFactNeighborYAttr *ST_PrSetCustVal
	CustRadScaleRadAttr      *ST_PrSetCustVal
	CustRadScaleIncAttr      *ST_PrSetCustVal
	PresLayoutVars           *CT_LayoutVariablePropertySet
	Style                    *_bb.CT_ShapeStyle
}
type CT_NumericRule struct {
	ValAttr     *float64
	FactAttr    *float64
	MaxAttr     *float64
	ExtLst      *_bb.CT_OfficeArtExtensionList
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}
type CT_Description struct {
	LangAttr *string
	ValAttr  string
}

func (_gbe *CT_CTCategories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_cacg:
	for {
		_aag, _ceca := d.Token()
		if _ceca != nil {
			return _ceca
		}
		switch _bfab := _aag.(type) {
		case _a.StartElement:
			switch _bfab.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_gfd := NewCT_CTCategory()
				if _bbg := d.DecodeElement(_gfd, &_bfab); _bbg != nil {
					return _bbg
				}
				_gbe.Cat = append(_gbe.Cat, _gfd)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _bfab.Name)
				if _dca := d.Skip(); _dca != nil {
					return _dca
				}
			}
		case _a.EndElement:
			break _cacg
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_ContinueDirectionUnset   ST_ContinueDirection = 0
	ST_ContinueDirectionRevDir  ST_ContinueDirection = 1
	ST_ContinueDirectionSameDir ST_ContinueDirection = 2
)

func (_abaa ST_AxisType) Validate() error { return _abaa.ValidateWithPath("") }

type CT_Categories struct{ Cat []*CT_Category }

// Validate validates the StyleDefHdrLst and its children
func (_fbbd *StyleDefHdrLst) Validate() error {
	return _fbbd.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074")
}

type ST_ElementType byte

func (_adbeb ST_LinearDirection) String() string {
	switch _adbeb {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u004c"
	case 2:
		return "\u0066\u0072\u006fm\u0052"
	case 3:
		return "\u0066\u0072\u006fm\u0054"
	case 4:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func (_bfgfg *ST_ClrAppMethod) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfgfg = 0
	case "\u0073\u0070\u0061\u006e":
		*_bfgfg = 1
	case "\u0063\u0079\u0063l\u0065":
		*_bfgfg = 2
	case "\u0072\u0065\u0070\u0065\u0061\u0074":
		*_bfgfg = 3
	}
	return nil
}
func (_dggb *ST_ResizeHandlesStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dggb = 0
	case "\u0065\u0078\u0061c\u0074":
		*_dggb = 1
	case "\u0072\u0065\u006c":
		*_dggb = 2
	}
	return nil
}
func (_eddc ST_TextDirection) String() string {
	switch _eddc {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u0054"
	case 2:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}

type ST_ElementTypes []ST_ElementType

func (_ecca *ST_ModelId) Validate() error               { return _ecca.ValidateWithPath("") }
func ParseUnionST_ModelId(s string) (ST_ModelId, error) { return ST_ModelId{}, nil }

type ST_ClrAppMethod byte

func (_daae ST_FallbackDimension) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_daae.String(), start)
}

// Validate validates the ColorsDefHdrLst and its children
func (_dbdbf *ColorsDefHdrLst) Validate() error {
	return _dbdbf.ValidateWithPath("\u0043o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}
func (_eadc ST_AnimOneStr) ValidateWithPath(path string) error {
	switch _eadc {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eadc))
	}
	return nil
}

type ST_ConnectorRouting byte

func (_cbed ST_SecondaryChildAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_baba := _a.Attr{}
	_baba.Name = name
	switch _cbed {
	case ST_SecondaryChildAlignmentUnset:
		_baba.Value = ""
	case ST_SecondaryChildAlignmentNone:
		_baba.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryChildAlignmentT:
		_baba.Value = "\u0074"
	case ST_SecondaryChildAlignmentB:
		_baba.Value = "\u0062"
	case ST_SecondaryChildAlignmentL:
		_baba.Value = "\u006c"
	case ST_SecondaryChildAlignmentR:
		_baba.Value = "\u0072"
	}
	return _baba, nil
}

// ST_PrSetCustVal is a union type
type ST_PrSetCustVal struct {
	ST_Percentage *string
	Int32         *int32
}

// ValidateWithPath validates the AG_ConstraintRefAttributes and its children, prefixing error messages with path
func (_gg *AG_ConstraintRefAttributes) ValidateWithPath(path string) error {
	if _dcc := _gg.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _dcc != nil {
		return _dcc
	}
	if _ec := _gg.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _ec != nil {
		return _ec
	}
	if _ca := _gg.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _ca != nil {
		return _ca
	}
	return nil
}

type ColorsDefHdr struct{ CT_ColorTransformHeader }

func (_aae *CT_Algorithm) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aae.TypeAttr = ST_AlgorithmType(1)
	for _, _bdb := range start.Attr {
		if _bdb.Name.Local == "\u0074\u0079\u0070\u0065" {
			_aae.TypeAttr.UnmarshalXMLAttr(_bdb)
			continue
		}
		if _bdb.Name.Local == "\u0072\u0065\u0076" {
			_fcf, _fad := _b.ParseUint(_bdb.Value, 10, 32)
			if _fad != nil {
				return _fad
			}
			_affb := uint32(_fcf)
			_aae.RevAttr = &_affb
			continue
		}
	}
_fba:
	for {
		_edeb, _cac := d.Token()
		if _cac != nil {
			return _cac
		}
		switch _cge := _edeb.(type) {
		case _a.StartElement:
			switch _cge.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0061\u0072a\u006d"}:
				_eeb := NewCT_Parameter()
				if _cca := d.DecodeElement(_eeb, &_cge); _cca != nil {
					return _cca
				}
				_aae.Param = append(_aae.Param, _eeb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aae.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _gde := d.DecodeElement(_aae.ExtLst, &_cge); _gde != nil {
					return _gde
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u006c\u0067o\u0072\u0069\u0074\u0068\u006d\u0020\u0025\u0076", _cge.Name)
				if _ace := d.Skip(); _ace != nil {
					return _ace
				}
			}
		case _a.EndElement:
			break _fba
		case _a.CharData:
		}
	}
	return nil
}

type ST_AlgorithmType byte

func (_bfc ST_OutputShapeType) Validate() error { return _bfc.ValidateWithPath("") }
func (_ccfg ST_AxisType) String() string {
	switch _ccfg {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	case 4:
		return "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case 5:
		return "\u0070\u0061\u0072"
	case 6:
		return "\u0061\u006e\u0063s\u0074"
	case 7:
		return "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case 8:
		return "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case 9:
		return "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case 10:
		return "\u0066\u006f\u006c\u006c\u006f\u0077"
	case 11:
		return "\u0070\u0072\u0065\u0063\u0065\u0064"
	case 12:
		return "\u0072\u006f\u006f\u0074"
	case 13:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

type CT_Category struct {
	TypeAttr string
	PriAttr  uint32
}

func (_adcag *ST_Direction) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcbd, _dace := d.Token()
	if _dace != nil {
		return _dace
	}
	if _effag, _cfbe := _dcbd.(_a.EndElement); _cfbe && _effag.Name == start.Name {
		*_adcag = 1
		return nil
	}
	if _bffag, _fdab := _dcbd.(_a.CharData); !_fdab {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcbd)
	} else {
		switch string(_bffag) {
		case "":
			*_adcag = 0
		case "\u006e\u006f\u0072\u006d":
			*_adcag = 1
		case "\u0072\u0065\u0076":
			*_adcag = 2
		}
	}
	_dcbd, _dace = d.Token()
	if _dace != nil {
		return _dace
	}
	if _fcee, _eecgg := _dcbd.(_a.EndElement); _eecgg && _fcee.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcbd)
}

type ST_DiagramHorizontalAlignment byte

func (_fadcf ST_ChildDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fadcf.String(), start)
}
func NewCT_DataModel() *CT_DataModel {
	_cadcf := &CT_DataModel{}
	_cadcf.PtLst = NewCT_PtList()
	return _cadcf
}

type CT_ColorTransformHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	ResIdAttr    *int32
	Title        []*CT_CTName
	Desc         []*CT_CTDescription
	CatLst       *CT_CTCategories
	ExtLst       *_bb.CT_OfficeArtExtensionList
}

const (
	ST_ResizeHandlesStrUnset ST_ResizeHandlesStr = 0
	ST_ResizeHandlesStrExact ST_ResizeHandlesStr = 1
	ST_ResizeHandlesStrRel   ST_ResizeHandlesStr = 2
)

func (_abef *CT_Colors) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _abef.MethAttr != ST_ClrAppMethodUnset {
		_aced, _ggcf := _abef.MethAttr.MarshalXMLAttr(_a.Name{Local: "\u006d\u0065\u0074\u0068"})
		if _ggcf != nil {
			return _ggcf
		}
		start.Attr = append(start.Attr, _aced)
	}
	if _abef.HueDirAttr != ST_HueDirUnset {
		_adbf, _cdcc := _abef.HueDirAttr.MarshalXMLAttr(_a.Name{Local: "\u0068\u0075\u0065\u0044\u0069\u0072"})
		if _cdcc != nil {
			return _cdcc
		}
		start.Attr = append(start.Attr, _adbf)
	}
	e.EncodeToken(start)
	if _abef.EG_ColorChoice != nil {
		for _, _bacd := range _abef.EG_ColorChoice {
			_bacd.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ddaed *ST_FlowDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bcedd, _egbdgd := d.Token()
	if _egbdgd != nil {
		return _egbdgd
	}
	if _aabba, _feded := _bcedd.(_a.EndElement); _feded && _aabba.Name == start.Name {
		*_ddaed = 1
		return nil
	}
	if _cfbgee, _cdccg := _bcedd.(_a.CharData); !_cdccg {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcedd)
	} else {
		switch string(_cfbgee) {
		case "":
			*_ddaed = 0
		case "\u0072\u006f\u0077":
			*_ddaed = 1
		case "\u0063\u006f\u006c":
			*_ddaed = 2
		}
	}
	_bcedd, _egbdgd = d.Token()
	if _egbdgd != nil {
		return _egbdgd
	}
	if _eaagd, _gdgcf := _bcedd.(_a.EndElement); _gdgcf && _eaagd.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcedd)
}
func (_cfab ST_ChildOrderType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_efec := _a.Attr{}
	_efec.Name = name
	switch _cfab {
	case ST_ChildOrderTypeUnset:
		_efec.Value = ""
	case ST_ChildOrderTypeB:
		_efec.Value = "\u0062"
	case ST_ChildOrderTypeT:
		_efec.Value = "\u0074"
	}
	return _efec, nil
}
func (_deaa ST_HueDir) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_deaa.String(), start)
}
func (_dbbaf ST_ArrowheadStyle) ValidateWithPath(path string) error {
	switch _dbbaf {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbbaf))
	}
	return nil
}
func (_ddeba *CT_Otherwise) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _egeaa := range start.Attr {
		if _egeaa.Name.Local == "\u006e\u0061\u006d\u0065" {
			_edea, _afgcg := _egeaa.Value, error(nil)
			if _afgcg != nil {
				return _afgcg
			}
			_ddeba.NameAttr = &_edea
			continue
		}
	}
_eebc:
	for {
		_eagc, _acdb := d.Token()
		if _acdb != nil {
			return _acdb
		}
		switch _fag := _eagc.(type) {
		case _a.StartElement:
			switch _fag.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_fgdg := NewCT_Algorithm()
				if _bfe := d.DecodeElement(_fgdg, &_fag); _bfe != nil {
					return _bfe
				}
				_ddeba.Alg = append(_ddeba.Alg, _fgdg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ebdea := NewCT_Shape()
				if _dbcc := d.DecodeElement(_ebdea, &_fag); _dbcc != nil {
					return _dbcc
				}
				_ddeba.Shape = append(_ddeba.Shape, _ebdea)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_caef := NewCT_PresentationOf()
				if _dgdb := d.DecodeElement(_caef, &_fag); _dgdb != nil {
					return _dgdb
				}
				_ddeba.PresOf = append(_ddeba.PresOf, _caef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_gabcc := NewCT_Constraints()
				if _eeea := d.DecodeElement(_gabcc, &_fag); _eeea != nil {
					return _eeea
				}
				_ddeba.ConstrLst = append(_ddeba.ConstrLst, _gabcc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_dbbf := NewCT_Rules()
				if _cfad := d.DecodeElement(_dbbf, &_fag); _cfad != nil {
					return _cfad
				}
				_ddeba.RuleLst = append(_ddeba.RuleLst, _dbbf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_gdg := NewCT_ForEach()
				if _debd := d.DecodeElement(_gdg, &_fag); _debd != nil {
					return _debd
				}
				_ddeba.ForEach = append(_ddeba.ForEach, _gdg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_dddf := NewCT_LayoutNode()
				if _cfcf := d.DecodeElement(_dddf, &_fag); _cfcf != nil {
					return _cfcf
				}
				_ddeba.LayoutNode = append(_ddeba.LayoutNode, _dddf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_cggb := NewCT_Choose()
				if _bced := d.DecodeElement(_cggb, &_fag); _bced != nil {
					return _bced
				}
				_ddeba.Choose = append(_ddeba.Choose, _cggb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbge := _bb.NewCT_OfficeArtExtensionList()
				if _afba := d.DecodeElement(_bbge, &_fag); _afba != nil {
					return _afba
				}
				_ddeba.ExtLst = append(_ddeba.ExtLst, _bbge)
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_O\u0074\u0068e\u0072\u0077\u0069\u0073\u0065\u0020\u0025\u0076", _fag.Name)
				if _bffd := d.Skip(); _bffd != nil {
					return _bffd
				}
			}
		case _a.EndElement:
			break _eebc
		case _a.CharData:
		}
	}
	return nil
}
func (_fbaff ST_Offset) Validate() error { return _fbaff.ValidateWithPath("") }
func NewCT_CTCategory() *CT_CTCategory   { _dcd := &CT_CTCategory{}; return _dcd }

const (
	ST_FlowDirectionUnset ST_FlowDirection = 0
	ST_FlowDirectionRow   ST_FlowDirection = 1
	ST_FlowDirectionCol   ST_FlowDirection = 2
)

func NewCT_Direction() *CT_Direction              { _bgebc := &CT_Direction{}; return _bgebc }
func (_fbeff ST_StartingElement) Validate() error { return _fbeff.ValidateWithPath("") }
func (_cfgb ST_FunctionOperator) Validate() error { return _cfgb.ValidateWithPath("") }

const (
	ST_ChildDirectionUnset ST_ChildDirection = 0
	ST_ChildDirectionHorz  ST_ChildDirection = 1
	ST_ChildDirectionVert  ST_ChildDirection = 2
)

type CT_ForEach struct {
	NameAttr          *string
	RefAttr           *string
	Alg               []*CT_Algorithm
	Shape             []*CT_Shape
	PresOf            []*CT_PresentationOf
	ConstrLst         []*CT_Constraints
	RuleLst           []*CT_Rules
	ForEach           []*CT_ForEach
	LayoutNode        []*CT_LayoutNode
	Choose            []*CT_Choose
	ExtLst            []*_bb.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_afgab *ST_VerticalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_facfe, _cafeg := d.Token()
	if _cafeg != nil {
		return _cafeg
	}
	if _febc, _ddggg := _facfe.(_a.EndElement); _ddggg && _febc.Name == start.Name {
		*_afgab = 1
		return nil
	}
	if _cdec, _eccg := _facfe.(_a.CharData); !_eccg {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _facfe)
	} else {
		switch string(_cdec) {
		case "":
			*_afgab = 0
		case "\u0074":
			*_afgab = 1
		case "\u006d\u0069\u0064":
			*_afgab = 2
		case "\u0062":
			*_afgab = 3
		case "\u006e\u006f\u006e\u0065":
			*_afgab = 4
		}
	}
	_facfe, _cafeg = d.Token()
	if _cafeg != nil {
		return _cafeg
	}
	if _gadcg, _faedg := _facfe.(_a.EndElement); _faedg && _gadcg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _facfe)
}
func (_gfde *ST_DiagramHorizontalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fcaba, _dcdb := d.Token()
	if _dcdb != nil {
		return _dcdb
	}
	if _baeae, _abedg := _fcaba.(_a.EndElement); _abedg && _baeae.Name == start.Name {
		*_gfde = 1
		return nil
	}
	if _faefb, _befa := _fcaba.(_a.CharData); !_befa {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcaba)
	} else {
		switch string(_faefb) {
		case "":
			*_gfde = 0
		case "\u006c":
			*_gfde = 1
		case "\u0063\u0074\u0072":
			*_gfde = 2
		case "\u0072":
			*_gfde = 3
		case "\u006e\u006f\u006e\u0065":
			*_gfde = 4
		}
	}
	_fcaba, _dcdb = d.Token()
	if _dcdb != nil {
		return _dcdb
	}
	if _fefa, _ddce := _fcaba.(_a.EndElement); _ddce && _fefa.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcaba)
}

// ValidateWithPath validates the CT_Choose and its children, prefixing error messages with path
func (_fbffa *CT_Choose) ValidateWithPath(path string) error {
	for _bgca, _dgg := range _fbffa.If {
		if _abd := _dgg.ValidateWithPath(_bg.Sprintf("\u0025s\u002f\u0049\u0066\u005b\u0025\u0064]", path, _bgca)); _abd != nil {
			return _abd
		}
	}
	if _fbffa.Else != nil {
		if _ggf := _fbffa.Else.ValidateWithPath(path + "\u002f\u0045\u006cs\u0065"); _ggf != nil {
			return _ggf
		}
	}
	return nil
}
func (_bbddc ST_ClrAppMethod) ValidateWithPath(path string) error {
	switch _bbddc {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbddc))
	}
	return nil
}
func (_eabeb ST_FlowDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eabeb.String(), start)
}

// ValidateWithPath validates the StyleDef and its children, prefixing error messages with path
func (_dbac *StyleDef) ValidateWithPath(path string) error {
	if _dafdc := _dbac.CT_StyleDefinition.ValidateWithPath(path); _dafdc != nil {
		return _dafdc
	}
	return nil
}

// ValidateWithPath validates the LayoutDefHdr and its children, prefixing error messages with path
func (_cgfbb *LayoutDefHdr) ValidateWithPath(path string) error {
	if _bfea := _cgfbb.CT_DiagramDefinitionHeader.ValidateWithPath(path); _bfea != nil {
		return _bfea
	}
	return nil
}

type ColorsDefHdrLst struct{ CT_ColorTransformHeaderLst }

func (_ecaa *CT_ChildPref) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bca := range start.Attr {
		if _bca.Name.Local == "\u0076\u0061\u006c" {
			_caae, _bce := _b.ParseInt(_bca.Value, 10, 32)
			if _bce != nil {
				return _bce
			}
			_eba := int32(_caae)
			_ecaa.ValAttr = &_eba
			continue
		}
	}
	for {
		_egf, _beeb := d.Token()
		if _beeb != nil {
			return _bg.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068i\u006c\u0064\u0050\u0072\u0065\u0066\u003a\u0020\u0025\u0073", _beeb)
		}
		if _cfa, _afa := _egf.(_a.EndElement); _afa && _cfa.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Otherwise and its children
func (_gacgg *CT_Otherwise) Validate() error {
	return _gacgg.ValidateWithPath("\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065")
}

type ST_NodeHorizontalAlignment byte

// Validate validates the CT_LayoutNode and its children
func (_dfgb *CT_LayoutNode) Validate() error {
	return _dfgb.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065")
}

// Validate validates the CT_StyleLabel and its children
func (_gdcf *CT_StyleLabel) Validate() error {
	return _gdcf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}

// Validate validates the CT_Shape and its children
func (_gadae *CT_Shape) Validate() error {
	return _gadae.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}
func (_bbaf *CT_BulletEnabled) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bfa := range start.Attr {
		if _bfa.Name.Local == "\u0076\u0061\u006c" {
			_ead, _cgc := _b.ParseBool(_bfa.Value)
			if _cgc != nil {
				return _cgc
			}
			_bbaf.ValAttr = &_ead
			continue
		}
	}
	for {
		_faa, _caa := d.Token()
		if _caa != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0042\u0075\u006c\u006ce\u0074E\u006e\u0061\u0062\u006c\u0065\u0064\u003a \u0025\u0073", _caa)
		}
		if _dgf, _gbg := _faa.(_a.EndElement); _gbg && _dgf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fcab *CT_CTCategory) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _affa := range start.Attr {
		if _affa.Name.Local == "\u0074\u0079\u0070\u0065" {
			_cdf, _afc := _affa.Value, error(nil)
			if _afc != nil {
				return _afc
			}
			_fcab.TypeAttr = _cdf
			continue
		}
		if _affa.Name.Local == "\u0070\u0072\u0069" {
			_cfb, _bgfa := _b.ParseUint(_affa.Value, 10, 32)
			if _bgfa != nil {
				return _bgfa
			}
			_fcab.PriAttr = uint32(_cfb)
			continue
		}
	}
	for {
		_ebg, _ge := d.Token()
		if _ge != nil {
			return _bg.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0043T\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _ge)
		}
		if _dfa, _cffe := _ebg.(_a.EndElement); _cffe && _dfa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ecgga ST_TextAnchorVertical) ValidateWithPath(path string) error {
	switch _ecgga {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ecgga))
	}
	return nil
}

type ST_BendPoint byte

// ValidateWithPath validates the CT_Otherwise and its children, prefixing error messages with path
func (_aab *CT_Otherwise) ValidateWithPath(path string) error {
	for _bffg, _deeb := range _aab.Alg {
		if _agbf := _deeb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _bffg)); _agbf != nil {
			return _agbf
		}
	}
	for _cagb, _efcef := range _aab.Shape {
		if _ceda := _efcef.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _cagb)); _ceda != nil {
			return _ceda
		}
	}
	for _egbd, _gdfbg := range _aab.PresOf {
		if _fbbb := _gdfbg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _egbd)); _fbbb != nil {
			return _fbbb
		}
	}
	for _cbda, _acfg := range _aab.ConstrLst {
		if _gcbg := _acfg.ValidateWithPath(_bg.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _cbda)); _gcbg != nil {
			return _gcbg
		}
	}
	for _aabb, _bgbf := range _aab.RuleLst {
		if _ebdd := _bgbf.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _aabb)); _ebdd != nil {
			return _ebdd
		}
	}
	for _adfg, _abed := range _aab.ForEach {
		if _gfdd := _abed.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _adfg)); _gfdd != nil {
			return _gfdd
		}
	}
	for _befbc, _afgde := range _aab.LayoutNode {
		if _caaaf := _afgde.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _befbc)); _caaaf != nil {
			return _caaaf
		}
	}
	for _acbf, _fgcb := range _aab.Choose {
		if _abdea := _fgcb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _acbf)); _abdea != nil {
			return _abdea
		}
	}
	for _bgfcd, _egeg := range _aab.ExtLst {
		if _fgede := _egeg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _bgfcd)); _fgede != nil {
			return _fgede
		}
	}
	return nil
}
func (_eeddeb ST_ContinueDirection) Validate() error { return _eeddeb.ValidateWithPath("") }
func (_edfg ST_LinearDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ebfag := _a.Attr{}
	_ebfag.Name = name
	switch _edfg {
	case ST_LinearDirectionUnset:
		_ebfag.Value = ""
	case ST_LinearDirectionFromL:
		_ebfag.Value = "\u0066\u0072\u006fm\u004c"
	case ST_LinearDirectionFromR:
		_ebfag.Value = "\u0066\u0072\u006fm\u0052"
	case ST_LinearDirectionFromT:
		_ebfag.Value = "\u0066\u0072\u006fm\u0054"
	case ST_LinearDirectionFromB:
		_ebfag.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _ebfag, nil
}

type CT_ColorTransform struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	Title        []*CT_CTName
	Desc         []*CT_CTDescription
	CatLst       *CT_CTCategories
	StyleLbl     []*CT_CTStyleLabel
	ExtLst       *_bb.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_Description and its children, prefixing error messages with path
func (_egca *CT_Description) ValidateWithPath(path string) error { return nil }

type CT_Colors struct {
	MethAttr       ST_ClrAppMethod
	HueDirAttr     ST_HueDir
	EG_ColorChoice []*_bb.EG_ColorChoice
}
type CT_Parameter struct {
	TypeAttr ST_ParameterId
	ValAttr  ST_ParameterVal
}

func NewCT_Cxn() *CT_Cxn { _aec := &CT_Cxn{}; return _aec }
func (_cedda *ST_Offset) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gdfbb, _bgbfc := d.Token()
	if _bgbfc != nil {
		return _bgbfc
	}
	if _adbfa, _dacgc := _gdfbb.(_a.EndElement); _dacgc && _adbfa.Name == start.Name {
		*_cedda = 1
		return nil
	}
	if _dadad, _gaeeb := _gdfbb.(_a.CharData); !_gaeeb {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdfbb)
	} else {
		switch string(_dadad) {
		case "":
			*_cedda = 0
		case "\u0063\u0074\u0072":
			*_cedda = 1
		case "\u006f\u0066\u0066":
			*_cedda = 2
		}
	}
	_gdfbb, _bgbfc = d.Token()
	if _bgbfc != nil {
		return _bgbfc
	}
	if _cdfdgd, _deagc := _gdfbb.(_a.EndElement); _deagc && _cdfdgd.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdfbb)
}
func (_aeda *ST_TextBlockDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_aeda = 0
	case "\u0068\u006f\u0072\u007a":
		*_aeda = 1
	case "\u0076\u0065\u0072\u0074":
		*_aeda = 2
	}
	return nil
}

// Validate validates the CT_DataModel and its children
func (_ffbgd *CT_DataModel) Validate() error {
	return _ffbgd.ValidateWithPath("\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c")
}

type CT_DiagramDefinitionHeaderLst struct{ LayoutDefHdr []*CT_DiagramDefinitionHeader }

func NewCT_AnimLvl() *CT_AnimLvl { _dff := &CT_AnimLvl{}; return _dff }

// ValidateWithPath validates the CT_BulletEnabled and its children, prefixing error messages with path
func (_dbe *CT_BulletEnabled) ValidateWithPath(path string) error { return nil }
func (_fceec *ST_BoolOperator) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fceec = 0
	case "\u006e\u006f\u006e\u0065":
		*_fceec = 1
	case "\u0065\u0071\u0075":
		*_fceec = 2
	case "\u0067\u0074\u0065":
		*_fceec = 3
	case "\u006c\u0074\u0065":
		*_fceec = 4
	}
	return nil
}
func (_ddega *ST_NodeHorizontalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_faege, _fceg := d.Token()
	if _fceg != nil {
		return _fceg
	}
	if _gdgg, _fcace := _faege.(_a.EndElement); _fcace && _gdgg.Name == start.Name {
		*_ddega = 1
		return nil
	}
	if _aggbb, _eebf := _faege.(_a.CharData); !_eebf {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _faege)
	} else {
		switch string(_aggbb) {
		case "":
			*_ddega = 0
		case "\u006c":
			*_ddega = 1
		case "\u0063\u0074\u0072":
			*_ddega = 2
		case "\u0072":
			*_ddega = 3
		}
	}
	_faege, _fceg = d.Token()
	if _fceg != nil {
		return _fceg
	}
	if _ddadb, _bgfd := _faege.(_a.EndElement); _bgfd && _ddadb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _faege)
}

type ST_VariableType byte

func (_dgfa ST_ParameterVal) String() string {
	if _dgfa.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		return _dgfa.ST_DiagramHorizontalAlignment.String()
	}
	if _dgfa.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		return _dgfa.ST_VerticalAlignment.String()
	}
	if _dgfa.ST_ChildDirection != ST_ChildDirectionUnset {
		return _dgfa.ST_ChildDirection.String()
	}
	if _dgfa.ST_ChildAlignment != ST_ChildAlignmentUnset {
		return _dgfa.ST_ChildAlignment.String()
	}
	if _dgfa.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		return _dgfa.ST_SecondaryChildAlignment.String()
	}
	if _dgfa.ST_LinearDirection != ST_LinearDirectionUnset {
		return _dgfa.ST_LinearDirection.String()
	}
	if _dgfa.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		return _dgfa.ST_SecondaryLinearDirection.String()
	}
	if _dgfa.ST_StartingElement != ST_StartingElementUnset {
		return _dgfa.ST_StartingElement.String()
	}
	if _dgfa.ST_BendPoint != ST_BendPointUnset {
		return _dgfa.ST_BendPoint.String()
	}
	if _dgfa.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		return _dgfa.ST_ConnectorRouting.String()
	}
	if _dgfa.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		return _dgfa.ST_ArrowheadStyle.String()
	}
	if _dgfa.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		return _dgfa.ST_ConnectorDimension.String()
	}
	if _dgfa.ST_RotationPath != ST_RotationPathUnset {
		return _dgfa.ST_RotationPath.String()
	}
	if _dgfa.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		return _dgfa.ST_CenterShapeMapping.String()
	}
	if _dgfa.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		return _dgfa.ST_NodeHorizontalAlignment.String()
	}
	if _dgfa.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		return _dgfa.ST_NodeVerticalAlignment.String()
	}
	if _dgfa.ST_FallbackDimension != ST_FallbackDimensionUnset {
		return _dgfa.ST_FallbackDimension.String()
	}
	if _dgfa.ST_TextDirection != ST_TextDirectionUnset {
		return _dgfa.ST_TextDirection.String()
	}
	if _dgfa.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		return _dgfa.ST_PyramidAccentPosition.String()
	}
	if _dgfa.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		return _dgfa.ST_PyramidAccentTextMargin.String()
	}
	if _dgfa.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		return _dgfa.ST_TextBlockDirection.String()
	}
	if _dgfa.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		return _dgfa.ST_TextAnchorHorizontal.String()
	}
	if _dgfa.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		return _dgfa.ST_TextAnchorVertical.String()
	}
	if _dgfa.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		return _dgfa.ST_DiagramTextAlignment.String()
	}
	if _dgfa.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		return _dgfa.ST_AutoTextRotation.String()
	}
	if _dgfa.ST_GrowDirection != ST_GrowDirectionUnset {
		return _dgfa.ST_GrowDirection.String()
	}
	if _dgfa.ST_FlowDirection != ST_FlowDirectionUnset {
		return _dgfa.ST_FlowDirection.String()
	}
	if _dgfa.ST_ContinueDirection != ST_ContinueDirectionUnset {
		return _dgfa.ST_ContinueDirection.String()
	}
	if _dgfa.ST_Breakpoint != ST_BreakpointUnset {
		return _dgfa.ST_Breakpoint.String()
	}
	if _dgfa.ST_Offset != ST_OffsetUnset {
		return _dgfa.ST_Offset.String()
	}
	if _dgfa.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		return _dgfa.ST_HierarchyAlignment.String()
	}
	if _dgfa.Int32 != nil {
		return _bg.Sprintf("\u0025\u0076", *_dgfa.Int32)
	}
	if _dgfa.Float64 != nil {
		return _bg.Sprintf("\u0025\u0076", *_dgfa.Float64)
	}
	if _dgfa.Bool != nil {
		return _bg.Sprintf("\u0025\u0076", *_dgfa.Bool)
	}
	if _dgfa.StringVal != nil {
		return _bg.Sprintf("\u0025\u0076", *_dgfa.StringVal)
	}
	if _dgfa.ST_ConnectorPoint != ST_ConnectorPointUnset {
		return _dgfa.ST_ConnectorPoint.String()
	}
	return ""
}

const (
	ST_ConnectorRoutingUnset     ST_ConnectorRouting = 0
	ST_ConnectorRoutingStra      ST_ConnectorRouting = 1
	ST_ConnectorRoutingBend      ST_ConnectorRouting = 2
	ST_ConnectorRoutingCurve     ST_ConnectorRouting = 3
	ST_ConnectorRoutingLongCurve ST_ConnectorRouting = 4
)

func (_dged *CT_CTDescription) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dged.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_dged.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _dged.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bcdaaa ST_Breakpoint) String() string {
	switch _bcdaaa {
	case 0:
		return ""
	case 1:
		return "\u0065\u006e\u0064\u0043\u006e\u0076"
	case 2:
		return "\u0062\u0061\u006c"
	case 3:
		return "\u0066\u0069\u0078e\u0064"
	}
	return ""
}
func (_bgd *CT_ColorTransformHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dfg := range start.Attr {
		if _dfg.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_edgf, _gcafb := _dfg.Value, error(nil)
			if _gcafb != nil {
				return _gcafb
			}
			_bgd.UniqueIdAttr = _edgf
			continue
		}
		if _dfg.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_daad, _bdc := _dfg.Value, error(nil)
			if _bdc != nil {
				return _bdc
			}
			_bgd.MinVerAttr = &_daad
			continue
		}
		if _dfg.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_dcgg, _eged := _b.ParseInt(_dfg.Value, 10, 32)
			if _eged != nil {
				return _eged
			}
			_ced := int32(_dcgg)
			_bgd.ResIdAttr = &_ced
			continue
		}
	}
_bfgb:
	for {
		_bacg, _bacc := d.Token()
		if _bacc != nil {
			return _bacc
		}
		switch _gfb := _bacg.(type) {
		case _a.StartElement:
			switch _gfb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cecb := NewCT_CTName()
				if _ddbe := d.DecodeElement(_cecb, &_gfb); _ddbe != nil {
					return _ddbe
				}
				_bgd.Title = append(_bgd.Title, _cecb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_deba := NewCT_CTDescription()
				if _eac := d.DecodeElement(_deba, &_gfb); _eac != nil {
					return _eac
				}
				_bgd.Desc = append(_bgd.Desc, _deba)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_bgd.CatLst = NewCT_CTCategories()
				if _afbg := d.DecodeElement(_bgd.CatLst, &_gfb); _afbg != nil {
					return _afbg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgd.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _dbd := d.DecodeElement(_bgd.ExtLst, &_gfb); _dbd != nil {
					return _dbd
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d\u0048\u0065a\u0064\u0065\u0072 \u0025\u0076", _gfb.Name)
				if _ffe := d.Skip(); _ffe != nil {
					return _ffe
				}
			}
		case _a.EndElement:
			break _bfgb
		case _a.CharData:
		}
	}
	return nil
}
func (_degc *CT_CxnList) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _degc.Cxn != nil {
		_gcda := _a.StartElement{Name: _a.Name{Local: "\u0063\u0078\u006e"}}
		for _, _gadb := range _degc.Cxn {
			e.EncodeElement(_gadb, _gcda)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_deef ST_HierarchyAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_affc := _a.Attr{}
	_affc.Name = name
	switch _deef {
	case ST_HierarchyAlignmentUnset:
		_affc.Value = ""
	case ST_HierarchyAlignmentTL:
		_affc.Value = "\u0074\u004c"
	case ST_HierarchyAlignmentTR:
		_affc.Value = "\u0074\u0052"
	case ST_HierarchyAlignmentTCtrCh:
		_affc.Value = "\u0074\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentTCtrDes:
		_affc.Value = "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentBL:
		_affc.Value = "\u0062\u004c"
	case ST_HierarchyAlignmentBR:
		_affc.Value = "\u0062\u0052"
	case ST_HierarchyAlignmentBCtrCh:
		_affc.Value = "\u0062\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentBCtrDes:
		_affc.Value = "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentLT:
		_affc.Value = "\u006c\u0054"
	case ST_HierarchyAlignmentLB:
		_affc.Value = "\u006c\u0042"
	case ST_HierarchyAlignmentLCtrCh:
		_affc.Value = "\u006c\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentLCtrDes:
		_affc.Value = "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentRT:
		_affc.Value = "\u0072\u0054"
	case ST_HierarchyAlignmentRB:
		_affc.Value = "\u0072\u0042"
	case ST_HierarchyAlignmentRCtrCh:
		_affc.Value = "\u0072\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentRCtrDes:
		_affc.Value = "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return _affc, nil
}

// ValidateWithPath validates the CT_SDName and its children, prefixing error messages with path
func (_fgee *CT_SDName) ValidateWithPath(path string) error { return nil }

type ColorsDef struct{ CT_ColorTransform }

const (
	ST_DiagramHorizontalAlignmentUnset ST_DiagramHorizontalAlignment = 0
	ST_DiagramHorizontalAlignmentL     ST_DiagramHorizontalAlignment = 1
	ST_DiagramHorizontalAlignmentCtr   ST_DiagramHorizontalAlignment = 2
	ST_DiagramHorizontalAlignmentR     ST_DiagramHorizontalAlignment = 3
	ST_DiagramHorizontalAlignmentNone  ST_DiagramHorizontalAlignment = 4
)

// ValidateWithPath validates the CT_RelIds and its children, prefixing error messages with path
func (_gcade *CT_RelIds) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_dccf *CT_Shape) ValidateWithPath(path string) error {
	if _dccf.TypeAttr != nil {
		if _gbfeg := _dccf.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _gbfeg != nil {
			return _gbfeg
		}
	}
	if _dccf.AdjLst != nil {
		if _ccgdc := _dccf.AdjLst.ValidateWithPath(path + "\u002fA\u0064\u006a\u004c\u0073\u0074"); _ccgdc != nil {
			return _ccgdc
		}
	}
	if _dccf.ExtLst != nil {
		if _ccac := _dccf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccac != nil {
			return _ccac
		}
	}
	return nil
}
func (_dafe ST_ConstraintRelationship) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdfg := _a.Attr{}
	_gdfg.Name = name
	switch _dafe {
	case ST_ConstraintRelationshipUnset:
		_gdfg.Value = ""
	case ST_ConstraintRelationshipSelf:
		_gdfg.Value = "\u0073\u0065\u006c\u0066"
	case ST_ConstraintRelationshipCh:
		_gdfg.Value = "\u0063\u0068"
	case ST_ConstraintRelationshipDes:
		_gdfg.Value = "\u0064\u0065\u0073"
	}
	return _gdfg, nil
}
func (_cggd ST_HierBranchStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cggd.String(), start)
}
func (_bddf ST_NodeHorizontalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cdgbd := _a.Attr{}
	_cdgbd.Name = name
	switch _bddf {
	case ST_NodeHorizontalAlignmentUnset:
		_cdgbd.Value = ""
	case ST_NodeHorizontalAlignmentL:
		_cdgbd.Value = "\u006c"
	case ST_NodeHorizontalAlignmentCtr:
		_cdgbd.Value = "\u0063\u0074\u0072"
	case ST_NodeHorizontalAlignmentR:
		_cdgbd.Value = "\u0072"
	}
	return _cdgbd, nil
}
func (_gbfec *ST_AnimOneStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ccdb, _cgeb := d.Token()
	if _cgeb != nil {
		return _cgeb
	}
	if _acedg, _gdege := _ccdb.(_a.EndElement); _gdege && _acedg.Name == start.Name {
		*_gbfec = 1
		return nil
	}
	if _gaggd, _aegfg := _ccdb.(_a.CharData); !_aegfg {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ccdb)
	} else {
		switch string(_gaggd) {
		case "":
			*_gbfec = 0
		case "\u006e\u006f\u006e\u0065":
			*_gbfec = 1
		case "\u006f\u006e\u0065":
			*_gbfec = 2
		case "\u0062\u0072\u0061\u006e\u0063\u0068":
			*_gbfec = 3
		}
	}
	_ccdb, _cgeb = d.Token()
	if _cgeb != nil {
		return _cgeb
	}
	if _fagf, _ebegd := _ccdb.(_a.EndElement); _ebegd && _fagf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ccdb)
}

// ValidateWithPath validates the CT_ElemPropSet and its children, prefixing error messages with path
func (_ecbb *CT_ElemPropSet) ValidateWithPath(path string) error {
	if _ecbb.PresAssocIDAttr != nil {
		if _dgge := _ecbb.PresAssocIDAttr.ValidateWithPath(path + "\u002f\u0050r\u0065\u0073\u0041s\u0073\u006f\u0063\u0049\u0044\u0041\u0074\u0074\u0072"); _dgge != nil {
			return _dgge
		}
	}
	if _ecbb.CustScaleXAttr != nil {
		if _beafe := _ecbb.CustScaleXAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0058\u0041\u0074\u0074\u0072"); _beafe != nil {
			return _beafe
		}
	}
	if _ecbb.CustScaleYAttr != nil {
		if _dgba := _ecbb.CustScaleYAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0059\u0041\u0074\u0074\u0072"); _dgba != nil {
			return _dgba
		}
	}
	if _ecbb.CustLinFactXAttr != nil {
		if _cabd := _ecbb.CustLinFactXAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074X\u0041\u0074\u0074\u0072"); _cabd != nil {
			return _cabd
		}
	}
	if _ecbb.CustLinFactYAttr != nil {
		if _bgfba := _ecbb.CustLinFactYAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074Y\u0041\u0074\u0074\u0072"); _bgfba != nil {
			return _bgfba
		}
	}
	if _ecbb.CustLinFactNeighborXAttr != nil {
		if _feadg := _ecbb.CustLinFactNeighborXAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0058\u0041\u0074\u0074r"); _feadg != nil {
			return _feadg
		}
	}
	if _ecbb.CustLinFactNeighborYAttr != nil {
		if _dafg := _ecbb.CustLinFactNeighborYAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0059\u0041\u0074\u0074r"); _dafg != nil {
			return _dafg
		}
	}
	if _ecbb.CustRadScaleRadAttr != nil {
		if _aada := _ecbb.CustRadScaleRadAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0052\u0061\u0064At\u0074\u0072"); _aada != nil {
			return _aada
		}
	}
	if _ecbb.CustRadScaleIncAttr != nil {
		if _dbad := _ecbb.CustRadScaleIncAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0049\u006e\u0063At\u0074\u0072"); _dbad != nil {
			return _dbad
		}
	}
	if _ecbb.PresLayoutVars != nil {
		if _adgf := _ecbb.PresLayoutVars.ValidateWithPath(path + "\u002fP\u0072e\u0073\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0073"); _adgf != nil {
			return _adgf
		}
	}
	if _ecbb.Style != nil {
		if _cfed := _ecbb.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _cfed != nil {
			return _cfed
		}
	}
	return nil
}

type ST_SecondaryChildAlignment byte

// Validate validates the CT_CTName and its children
func (_fdf *CT_CTName) Validate() error {
	return _fdf.ValidateWithPath("\u0043T\u005f\u0043\u0054\u004e\u0061\u006de")
}
func (_becad ST_ChildDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ffcge := _a.Attr{}
	_ffcge.Name = name
	switch _becad {
	case ST_ChildDirectionUnset:
		_ffcge.Value = ""
	case ST_ChildDirectionHorz:
		_ffcge.Value = "\u0068\u006f\u0072\u007a"
	case ST_ChildDirectionVert:
		_ffcge.Value = "\u0076\u0065\u0072\u0074"
	}
	return _ffcge, nil
}
func NewLayoutDef() *LayoutDef {
	_abdfe := &LayoutDef{}
	_abdfe.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	return _abdfe
}

// Validate validates the RelIds and its children
func (_bcdfd *RelIds) Validate() error {
	return _bcdfd.ValidateWithPath("\u0052\u0065\u006c\u0049\u0064\u0073")
}
func (_fgeb ST_ParameterId) ValidateWithPath(path string) error {
	switch _fgeb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgeb))
	}
	return nil
}
func (_ddcda ST_TextBlockDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bdba := _a.Attr{}
	_bdba.Name = name
	switch _ddcda {
	case ST_TextBlockDirectionUnset:
		_bdba.Value = ""
	case ST_TextBlockDirectionHorz:
		_bdba.Value = "\u0068\u006f\u0072\u007a"
	case ST_TextBlockDirectionVert:
		_bdba.Value = "\u0076\u0065\u0072\u0074"
	}
	return _bdba, nil
}
func NewCT_ChildPref() *CT_ChildPref { _dee := &CT_ChildPref{}; return _dee }
func NewCT_Pt() *CT_Pt               { _gfegc := &CT_Pt{}; return _gfegc }

type ST_ConstraintType byte

const (
	ST_AnimLvlStrUnset ST_AnimLvlStr = 0
	ST_AnimLvlStrNone  ST_AnimLvlStr = 1
	ST_AnimLvlStrLvl   ST_AnimLvlStr = 2
	ST_AnimLvlStrCtr   ST_AnimLvlStr = 3
)

func (_eabed ST_BoolOperator) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eabed.String(), start)
}
func (_agee ST_NodeHorizontalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_agee.String(), start)
}
func (_egae ST_PtType) Validate() error { return _egae.ValidateWithPath("") }

// Validate validates the CT_ElemPropSet and its children
func (_fcaac *CT_ElemPropSet) Validate() error {
	return _fcaac.ValidateWithPath("\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074")
}
func (_cbgdd ST_DiagramHorizontalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cbgdd.String(), start)
}
func (_baca *CT_DiagramDefinition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_baca.LayoutNode = NewCT_LayoutNode()
	for _, _gage := range start.Attr {
		if _gage.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_begg, _edce := _gage.Value, error(nil)
			if _edce != nil {
				return _edce
			}
			_baca.UniqueIdAttr = &_begg
			continue
		}
		if _gage.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_egg, _dggc := _gage.Value, error(nil)
			if _dggc != nil {
				return _dggc
			}
			_baca.MinVerAttr = &_egg
			continue
		}
		if _gage.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_gbcg, _deee := _gage.Value, error(nil)
			if _deee != nil {
				return _deee
			}
			_baca.DefStyleAttr = &_gbcg
			continue
		}
	}
_fcgb:
	for {
		_gcce, _eedc := d.Token()
		if _eedc != nil {
			return _eedc
		}
		switch _gccb := _gcce.(type) {
		case _a.StartElement:
			switch _gccb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_ebeg := NewCT_Name()
				if _dggf := d.DecodeElement(_ebeg, &_gccb); _dggf != nil {
					return _dggf
				}
				_baca.Title = append(_baca.Title, _ebeg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_ffed := NewCT_Description()
				if _aacd := d.DecodeElement(_ffed, &_gccb); _aacd != nil {
					return _aacd
				}
				_baca.Desc = append(_baca.Desc, _ffed)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_baca.CatLst = NewCT_Categories()
				if _bgab := d.DecodeElement(_baca.CatLst, &_gccb); _bgab != nil {
					return _bgab
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_baca.SampData = NewCT_SampleData()
				if _cdge := d.DecodeElement(_baca.SampData, &_gccb); _cdge != nil {
					return _cdge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_baca.StyleData = NewCT_SampleData()
				if _ecea := d.DecodeElement(_baca.StyleData, &_gccb); _ecea != nil {
					return _ecea
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_baca.ClrData = NewCT_SampleData()
				if _fbfc := d.DecodeElement(_baca.ClrData, &_gccb); _fbfc != nil {
					return _fbfc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _caba := d.DecodeElement(_baca.LayoutNode, &_gccb); _caba != nil {
					return _caba
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_baca.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _becf := d.DecodeElement(_baca.ExtLst, &_gccb); _becf != nil {
					return _becf
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _gccb.Name)
				if _efcg := d.Skip(); _efcg != nil {
					return _efcg
				}
			}
		case _a.EndElement:
			break _fcgb
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the LayoutDefHdrLst and its children, prefixing error messages with path
func (_facaa *LayoutDefHdrLst) ValidateWithPath(path string) error {
	if _bcfe := _facaa.CT_DiagramDefinitionHeaderLst.ValidateWithPath(path); _bcfe != nil {
		return _bcfe
	}
	return nil
}

// ValidateWithPath validates the CT_CTDescription and its children, prefixing error messages with path
func (_ddfb *CT_CTDescription) ValidateWithPath(path string) error { return nil }
func (_dbbc *ST_OutputShapeType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dbbc = 0
	case "\u006e\u006f\u006e\u0065":
		*_dbbc = 1
	case "\u0063\u006f\u006e\u006e":
		*_dbbc = 2
	}
	return nil
}

type CT_PtList struct{ Pt []*CT_Pt }

func (_ecaga *ST_ParameterId) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ecaga = 0
	case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
		*_ecaga = 1
	case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
		*_ecaga = 2
	case "\u0063\u0068\u0044i\u0072":
		*_ecaga = 3
	case "\u0063h\u0041\u006c\u0069\u0067\u006e":
		*_ecaga = 4
	case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
		*_ecaga = 5
	case "\u006c\u0069\u006e\u0044\u0069\u0072":
		*_ecaga = 6
	case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
		*_ecaga = 7
	case "\u0073\u0074\u0045\u006c\u0065\u006d":
		*_ecaga = 8
	case "\u0062\u0065\u006e\u0064\u0050\u0074":
		*_ecaga = 9
	case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
		*_ecaga = 10
	case "\u0062\u0065\u0067\u0053\u0074\u0079":
		*_ecaga = 11
	case "\u0065\u006e\u0064\u0053\u0074\u0079":
		*_ecaga = 12
	case "\u0064\u0069\u006d":
		*_ecaga = 13
	case "\u0072o\u0074\u0050\u0061\u0074\u0068":
		*_ecaga = 14
	case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
		*_ecaga = 15
	case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
		*_ecaga = 16
	case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
		*_ecaga = 17
	case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
		*_ecaga = 18
	case "\u0074\u0078\u0044i\u0072":
		*_ecaga = 19
	case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
		*_ecaga = 20
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
		*_ecaga = 21
	case "\u0074x\u0042\u006c\u0044\u0069\u0072":
		*_ecaga = 22
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
		*_ecaga = 23
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
		*_ecaga = 24
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
		*_ecaga = 25
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
		*_ecaga = 26
	case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
		*_ecaga = 27
	case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
		*_ecaga = 28
	case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_ecaga = 29
	case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_ecaga = 30
	case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
		*_ecaga = 31
	case "\u0067\u0072\u0044i\u0072":
		*_ecaga = 32
	case "\u0066l\u006f\u0077\u0044\u0069\u0072":
		*_ecaga = 33
	case "\u0063o\u006e\u0074\u0044\u0069\u0072":
		*_ecaga = 34
	case "\u0062\u006b\u0070\u0074":
		*_ecaga = 35
	case "\u006f\u0066\u0066":
		*_ecaga = 36
	case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
		*_ecaga = 37
	case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_ecaga = 38
	case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
		*_ecaga = 39
	case "\u0073\u0074\u0041n\u0067":
		*_ecaga = 40
	case "\u0073p\u0061\u006e\u0041\u006e\u0067":
		*_ecaga = 41
	case "\u0061\u0072":
		*_ecaga = 42
	case "\u006cn\u0053\u0070\u0050\u0061\u0072":
		*_ecaga = 43
	case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
		*_ecaga = 44
	case "\u006c\u006e\u0053\u0070\u0043\u0068":
		*_ecaga = 45
	case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
		*_ecaga = 46
	case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
		*_ecaga = 47
	case "\u0061l\u0069\u0067\u006e\u0054\u0078":
		*_ecaga = 48
	case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
		*_ecaga = 49
	case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
		*_ecaga = 50
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
		*_ecaga = 51
	case "\u0073r\u0063\u004e\u006f\u0064\u0065":
		*_ecaga = 52
	case "\u0064s\u0074\u004e\u006f\u0064\u0065":
		*_ecaga = 53
	case "\u0062\u0065\u0067\u0050\u0074\u0073":
		*_ecaga = 54
	case "\u0065\u006e\u0064\u0050\u0074\u0073":
		*_ecaga = 55
	}
	return nil
}
func (_gbgb ST_AutoTextRotation) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gbgb.String(), start)
}
func (_beg *CT_Categories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _beg.Cat != nil {
		_begc := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _feab := range _beg.Cat {
			e.EncodeElement(_feab, _begc)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cfdc ST_CenterShapeMapping) String() string {
	switch _cfdc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u004e\u006fd\u0065"
	}
	return ""
}
func (_gecaa ST_AxisType) ValidateWithPath(path string) error {
	switch _gecaa {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gecaa))
	}
	return nil
}
func (_eddgd ST_ConstraintType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_acgce := _a.Attr{}
	_acgce.Name = name
	switch _eddgd {
	case ST_ConstraintTypeUnset:
		_acgce.Value = ""
	case ST_ConstraintTypeNone:
		_acgce.Value = "\u006e\u006f\u006e\u0065"
	case ST_ConstraintTypeAlignOff:
		_acgce.Value = "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case ST_ConstraintTypeBegMarg:
		_acgce.Value = "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeBendDist:
		_acgce.Value = "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeBegPad:
		_acgce.Value = "\u0062\u0065\u0067\u0050\u0061\u0064"
	case ST_ConstraintTypeB:
		_acgce.Value = "\u0062"
	case ST_ConstraintTypeBMarg:
		_acgce.Value = "\u0062\u004d\u0061r\u0067"
	case ST_ConstraintTypeBOff:
		_acgce.Value = "\u0062\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrX:
		_acgce.Value = "\u0063\u0074\u0072\u0058"
	case ST_ConstraintTypeCtrXOff:
		_acgce.Value = "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrY:
		_acgce.Value = "\u0063\u0074\u0072\u0059"
	case ST_ConstraintTypeCtrYOff:
		_acgce.Value = "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case ST_ConstraintTypeConnDist:
		_acgce.Value = "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeDiam:
		_acgce.Value = "\u0064\u0069\u0061\u006d"
	case ST_ConstraintTypeEndMarg:
		_acgce.Value = "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeEndPad:
		_acgce.Value = "\u0065\u006e\u0064\u0050\u0061\u0064"
	case ST_ConstraintTypeH:
		_acgce.Value = "\u0068"
	case ST_ConstraintTypeHArH:
		_acgce.Value = "\u0068\u0041\u0072\u0048"
	case ST_ConstraintTypeHOff:
		_acgce.Value = "\u0068\u004f\u0066\u0066"
	case ST_ConstraintTypeL:
		_acgce.Value = "\u006c"
	case ST_ConstraintTypeLMarg:
		_acgce.Value = "\u006c\u004d\u0061r\u0067"
	case ST_ConstraintTypeLOff:
		_acgce.Value = "\u006c\u004f\u0066\u0066"
	case ST_ConstraintTypeR:
		_acgce.Value = "\u0072"
	case ST_ConstraintTypeRMarg:
		_acgce.Value = "\u0072\u004d\u0061r\u0067"
	case ST_ConstraintTypeROff:
		_acgce.Value = "\u0072\u004f\u0066\u0066"
	case ST_ConstraintTypePrimFontSz:
		_acgce.Value = "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case ST_ConstraintTypePyraAcctRatio:
		_acgce.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case ST_ConstraintTypeSecFontSz:
		_acgce.Value = "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case ST_ConstraintTypeSibSp:
		_acgce.Value = "\u0073\u0069\u0062S\u0070"
	case ST_ConstraintTypeSecSibSp:
		_acgce.Value = "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case ST_ConstraintTypeSp:
		_acgce.Value = "\u0073\u0070"
	case ST_ConstraintTypeStemThick:
		_acgce.Value = "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case ST_ConstraintTypeT:
		_acgce.Value = "\u0074"
	case ST_ConstraintTypeTMarg:
		_acgce.Value = "\u0074\u004d\u0061r\u0067"
	case ST_ConstraintTypeTOff:
		_acgce.Value = "\u0074\u004f\u0066\u0066"
	case ST_ConstraintTypeUserA:
		_acgce.Value = "\u0075\u0073\u0065r\u0041"
	case ST_ConstraintTypeUserB:
		_acgce.Value = "\u0075\u0073\u0065r\u0042"
	case ST_ConstraintTypeUserC:
		_acgce.Value = "\u0075\u0073\u0065r\u0043"
	case ST_ConstraintTypeUserD:
		_acgce.Value = "\u0075\u0073\u0065r\u0044"
	case ST_ConstraintTypeUserE:
		_acgce.Value = "\u0075\u0073\u0065r\u0045"
	case ST_ConstraintTypeUserF:
		_acgce.Value = "\u0075\u0073\u0065r\u0046"
	case ST_ConstraintTypeUserG:
		_acgce.Value = "\u0075\u0073\u0065r\u0047"
	case ST_ConstraintTypeUserH:
		_acgce.Value = "\u0075\u0073\u0065r\u0048"
	case ST_ConstraintTypeUserI:
		_acgce.Value = "\u0075\u0073\u0065r\u0049"
	case ST_ConstraintTypeUserJ:
		_acgce.Value = "\u0075\u0073\u0065r\u004a"
	case ST_ConstraintTypeUserK:
		_acgce.Value = "\u0075\u0073\u0065r\u004b"
	case ST_ConstraintTypeUserL:
		_acgce.Value = "\u0075\u0073\u0065r\u004c"
	case ST_ConstraintTypeUserM:
		_acgce.Value = "\u0075\u0073\u0065r\u004d"
	case ST_ConstraintTypeUserN:
		_acgce.Value = "\u0075\u0073\u0065r\u004e"
	case ST_ConstraintTypeUserO:
		_acgce.Value = "\u0075\u0073\u0065r\u004f"
	case ST_ConstraintTypeUserP:
		_acgce.Value = "\u0075\u0073\u0065r\u0050"
	case ST_ConstraintTypeUserQ:
		_acgce.Value = "\u0075\u0073\u0065r\u0051"
	case ST_ConstraintTypeUserR:
		_acgce.Value = "\u0075\u0073\u0065r\u0052"
	case ST_ConstraintTypeUserS:
		_acgce.Value = "\u0075\u0073\u0065r\u0053"
	case ST_ConstraintTypeUserT:
		_acgce.Value = "\u0075\u0073\u0065r\u0054"
	case ST_ConstraintTypeUserU:
		_acgce.Value = "\u0075\u0073\u0065r\u0055"
	case ST_ConstraintTypeUserV:
		_acgce.Value = "\u0075\u0073\u0065r\u0056"
	case ST_ConstraintTypeUserW:
		_acgce.Value = "\u0075\u0073\u0065r\u0057"
	case ST_ConstraintTypeUserX:
		_acgce.Value = "\u0075\u0073\u0065r\u0058"
	case ST_ConstraintTypeUserY:
		_acgce.Value = "\u0075\u0073\u0065r\u0059"
	case ST_ConstraintTypeUserZ:
		_acgce.Value = "\u0075\u0073\u0065r\u005a"
	case ST_ConstraintTypeW:
		_acgce.Value = "\u0077"
	case ST_ConstraintTypeWArH:
		_acgce.Value = "\u0077\u0041\u0072\u0048"
	case ST_ConstraintTypeWOff:
		_acgce.Value = "\u0077\u004f\u0066\u0066"
	}
	return _acgce, nil
}

const (
	ST_LinearDirectionUnset ST_LinearDirection = 0
	ST_LinearDirectionFromL ST_LinearDirection = 1
	ST_LinearDirectionFromR ST_LinearDirection = 2
	ST_LinearDirectionFromT ST_LinearDirection = 3
	ST_LinearDirectionFromB ST_LinearDirection = 4
)

func (_afbdb ST_ClrAppMethod) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cadb := _a.Attr{}
	_cadb.Name = name
	switch _afbdb {
	case ST_ClrAppMethodUnset:
		_cadb.Value = ""
	case ST_ClrAppMethodSpan:
		_cadb.Value = "\u0073\u0070\u0061\u006e"
	case ST_ClrAppMethodCycle:
		_cadb.Value = "\u0063\u0079\u0063l\u0065"
	case ST_ClrAppMethodRepeat:
		_cadb.Value = "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return _cadb, nil
}
func (_geabg *ST_ConstraintType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bcadd, _afbdc := d.Token()
	if _afbdc != nil {
		return _afbdc
	}
	if _fgaee, _cgbbf := _bcadd.(_a.EndElement); _cgbbf && _fgaee.Name == start.Name {
		*_geabg = 1
		return nil
	}
	if _bdcce, _befe := _bcadd.(_a.CharData); !_befe {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcadd)
	} else {
		switch string(_bdcce) {
		case "":
			*_geabg = 0
		case "\u006e\u006f\u006e\u0065":
			*_geabg = 1
		case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
			*_geabg = 2
		case "\u0062e\u0067\u004d\u0061\u0072\u0067":
			*_geabg = 3
		case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
			*_geabg = 4
		case "\u0062\u0065\u0067\u0050\u0061\u0064":
			*_geabg = 5
		case "\u0062":
			*_geabg = 6
		case "\u0062\u004d\u0061r\u0067":
			*_geabg = 7
		case "\u0062\u004f\u0066\u0066":
			*_geabg = 8
		case "\u0063\u0074\u0072\u0058":
			*_geabg = 9
		case "\u0063t\u0072\u0058\u004f\u0066\u0066":
			*_geabg = 10
		case "\u0063\u0074\u0072\u0059":
			*_geabg = 11
		case "\u0063t\u0072\u0059\u004f\u0066\u0066":
			*_geabg = 12
		case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
			*_geabg = 13
		case "\u0064\u0069\u0061\u006d":
			*_geabg = 14
		case "\u0065n\u0064\u004d\u0061\u0072\u0067":
			*_geabg = 15
		case "\u0065\u006e\u0064\u0050\u0061\u0064":
			*_geabg = 16
		case "\u0068":
			*_geabg = 17
		case "\u0068\u0041\u0072\u0048":
			*_geabg = 18
		case "\u0068\u004f\u0066\u0066":
			*_geabg = 19
		case "\u006c":
			*_geabg = 20
		case "\u006c\u004d\u0061r\u0067":
			*_geabg = 21
		case "\u006c\u004f\u0066\u0066":
			*_geabg = 22
		case "\u0072":
			*_geabg = 23
		case "\u0072\u004d\u0061r\u0067":
			*_geabg = 24
		case "\u0072\u004f\u0066\u0066":
			*_geabg = 25
		case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
			*_geabg = 26
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
			*_geabg = 27
		case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
			*_geabg = 28
		case "\u0073\u0069\u0062S\u0070":
			*_geabg = 29
		case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
			*_geabg = 30
		case "\u0073\u0070":
			*_geabg = 31
		case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
			*_geabg = 32
		case "\u0074":
			*_geabg = 33
		case "\u0074\u004d\u0061r\u0067":
			*_geabg = 34
		case "\u0074\u004f\u0066\u0066":
			*_geabg = 35
		case "\u0075\u0073\u0065r\u0041":
			*_geabg = 36
		case "\u0075\u0073\u0065r\u0042":
			*_geabg = 37
		case "\u0075\u0073\u0065r\u0043":
			*_geabg = 38
		case "\u0075\u0073\u0065r\u0044":
			*_geabg = 39
		case "\u0075\u0073\u0065r\u0045":
			*_geabg = 40
		case "\u0075\u0073\u0065r\u0046":
			*_geabg = 41
		case "\u0075\u0073\u0065r\u0047":
			*_geabg = 42
		case "\u0075\u0073\u0065r\u0048":
			*_geabg = 43
		case "\u0075\u0073\u0065r\u0049":
			*_geabg = 44
		case "\u0075\u0073\u0065r\u004a":
			*_geabg = 45
		case "\u0075\u0073\u0065r\u004b":
			*_geabg = 46
		case "\u0075\u0073\u0065r\u004c":
			*_geabg = 47
		case "\u0075\u0073\u0065r\u004d":
			*_geabg = 48
		case "\u0075\u0073\u0065r\u004e":
			*_geabg = 49
		case "\u0075\u0073\u0065r\u004f":
			*_geabg = 50
		case "\u0075\u0073\u0065r\u0050":
			*_geabg = 51
		case "\u0075\u0073\u0065r\u0051":
			*_geabg = 52
		case "\u0075\u0073\u0065r\u0052":
			*_geabg = 53
		case "\u0075\u0073\u0065r\u0053":
			*_geabg = 54
		case "\u0075\u0073\u0065r\u0054":
			*_geabg = 55
		case "\u0075\u0073\u0065r\u0055":
			*_geabg = 56
		case "\u0075\u0073\u0065r\u0056":
			*_geabg = 57
		case "\u0075\u0073\u0065r\u0057":
			*_geabg = 58
		case "\u0075\u0073\u0065r\u0058":
			*_geabg = 59
		case "\u0075\u0073\u0065r\u0059":
			*_geabg = 60
		case "\u0075\u0073\u0065r\u005a":
			*_geabg = 61
		case "\u0077":
			*_geabg = 62
		case "\u0077\u0041\u0072\u0048":
			*_geabg = 63
		case "\u0077\u004f\u0066\u0066":
			*_geabg = 64
		}
	}
	_bcadd, _afbdc = d.Token()
	if _afbdc != nil {
		return _afbdc
	}
	if _abgg, _cgebc := _bcadd.(_a.EndElement); _cgebc && _abgg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcadd)
}
func NewCT_Rules() *CT_Rules { _fbgd := &CT_Rules{}; return _fbgd }

type ST_OutputShapeType byte

func (_gedgc *ST_BendPoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gedgc = 0
	case "\u0062\u0065\u0067":
		*_gedgc = 1
	case "\u0064\u0065\u0066":
		*_gedgc = 2
	case "\u0065\u006e\u0064":
		*_gedgc = 3
	}
	return nil
}
func (_edaef ST_TextAnchorHorizontal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_edaef.String(), start)
}
func (_gabf *CT_RelIds) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _abccf := range start.Attr {
		if _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _abccf.Name.Local == "\u0064\u006d" || _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _abccf.Name.Local == "\u0064\u006d" {
			_faf, _bfeb := _abccf.Value, error(nil)
			if _bfeb != nil {
				return _bfeb
			}
			_gabf.DmAttr = _faf
			continue
		}
		if _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _abccf.Name.Local == "\u006c\u006f" || _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _abccf.Name.Local == "\u006c\u006f" {
			_bgacb, _ffgf := _abccf.Value, error(nil)
			if _ffgf != nil {
				return _ffgf
			}
			_gabf.LoAttr = _bgacb
			continue
		}
		if _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _abccf.Name.Local == "\u0071\u0073" || _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _abccf.Name.Local == "\u0071\u0073" {
			_egbcc, _agdc := _abccf.Value, error(nil)
			if _agdc != nil {
				return _agdc
			}
			_gabf.QsAttr = _egbcc
			continue
		}
		if _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _abccf.Name.Local == "\u0063\u0073" || _abccf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _abccf.Name.Local == "\u0063\u0073" {
			_deec, _dbab := _abccf.Value, error(nil)
			if _dbab != nil {
				return _dbab
			}
			_gabf.CsAttr = _deec
			continue
		}
	}
	for {
		_dgdg, _aceb := d.Token()
		if _aceb != nil {
			return _bg.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0052\u0065\u006cI\u0064\u0073\u003a\u0020\u0025\u0073", _aceb)
		}
		if _dfga, _eefdb := _dgdg.(_a.EndElement); _eefdb && _dfga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bcebf *ST_DiagramTextAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bcebf = 0
	case "\u006c":
		*_bcebf = 1
	case "\u0063\u0074\u0072":
		*_bcebf = 2
	case "\u0072":
		*_bcebf = 3
	}
	return nil
}
func NewCT_CTStyleLabel() *CT_CTStyleLabel { _add := &CT_CTStyleLabel{}; return _add }
func (_egfa *ST_AnimLvlStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dfeb, _bgedb := d.Token()
	if _bgedb != nil {
		return _bgedb
	}
	if _bffad, _dfebe := _dfeb.(_a.EndElement); _dfebe && _bffad.Name == start.Name {
		*_egfa = 1
		return nil
	}
	if _aeaa, _cdebc := _dfeb.(_a.CharData); !_cdebc {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfeb)
	} else {
		switch string(_aeaa) {
		case "":
			*_egfa = 0
		case "\u006e\u006f\u006e\u0065":
			*_egfa = 1
		case "\u006c\u0076\u006c":
			*_egfa = 2
		case "\u0063\u0074\u0072":
			*_egfa = 3
		}
	}
	_dfeb, _bgedb = d.Token()
	if _bgedb != nil {
		return _bgedb
	}
	if _cadaa, _dcga := _dfeb.(_a.EndElement); _dcga && _cadaa.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfeb)
}

type CT_ResizeHandles struct{ ValAttr ST_ResizeHandlesStr }
type ST_BoolOperator byte
type ST_ParameterId byte

// ValidateWithPath validates the CT_OrgChart and its children, prefixing error messages with path
func (_gfgg *CT_OrgChart) ValidateWithPath(path string) error { return nil }
func (_cbga ST_GrowDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ecbea := _a.Attr{}
	_ecbea.Name = name
	switch _cbga {
	case ST_GrowDirectionUnset:
		_ecbea.Value = ""
	case ST_GrowDirectionTL:
		_ecbea.Value = "\u0074\u004c"
	case ST_GrowDirectionTR:
		_ecbea.Value = "\u0074\u0052"
	case ST_GrowDirectionBL:
		_ecbea.Value = "\u0062\u004c"
	case ST_GrowDirectionBR:
		_ecbea.Value = "\u0062\u0052"
	}
	return _ecbea, nil
}

// Validate validates the CT_SDDescription and its children
func (_dfaee *CT_SDDescription) Validate() error {
	return _dfaee.ValidateWithPath("\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}
func (_bcabg ST_DiagramTextAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bcabg.String(), start)
}
func (_daga ST_ElementType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_adac := _a.Attr{}
	_adac.Name = name
	switch _daga {
	case ST_ElementTypeUnset:
		_adac.Value = ""
	case ST_ElementTypeAll:
		_adac.Value = "\u0061\u006c\u006c"
	case ST_ElementTypeDoc:
		_adac.Value = "\u0064\u006f\u0063"
	case ST_ElementTypeNode:
		_adac.Value = "\u006e\u006f\u0064\u0065"
	case ST_ElementTypeNorm:
		_adac.Value = "\u006e\u006f\u0072\u006d"
	case ST_ElementTypeNonNorm:
		_adac.Value = "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case ST_ElementTypeAsst:
		_adac.Value = "\u0061\u0073\u0073\u0074"
	case ST_ElementTypeNonAsst:
		_adac.Value = "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case ST_ElementTypeParTrans:
		_adac.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_ElementTypePres:
		_adac.Value = "\u0070\u0072\u0065\u0073"
	case ST_ElementTypeSibTrans:
		_adac.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _adac, nil
}
func (_acedc *ST_SecondaryChildAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_acedc = 0
	case "\u006e\u006f\u006e\u0065":
		*_acedc = 1
	case "\u0074":
		*_acedc = 2
	case "\u0062":
		*_acedc = 3
	case "\u006c":
		*_acedc = 4
	case "\u0072":
		*_acedc = 5
	}
	return nil
}
func NewCT_SDDescription() *CT_SDDescription { _faag := &CT_SDDescription{}; return _faag }

type ST_SecondaryLinearDirection byte

func (_gdeged ST_ChildAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gdeged.String(), start)
}
func (_cdcb ST_RotationPath) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fcabfg := _a.Attr{}
	_fcabfg.Name = name
	switch _cdcb {
	case ST_RotationPathUnset:
		_fcabfg.Value = ""
	case ST_RotationPathNone:
		_fcabfg.Value = "\u006e\u006f\u006e\u0065"
	case ST_RotationPathAlongPath:
		_fcabfg.Value = "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return _fcabfg, nil
}
func (_abbge *CT_ElemPropSet) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _abbge.PresAssocIDAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.PresAssocIDAttr)})
	}
	if _abbge.PresNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.PresNameAttr)})
	}
	if _abbge.PresStyleLblAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.PresStyleLblAttr)})
	}
	if _abbge.PresStyleIdxAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.PresStyleIdxAttr)})
	}
	if _abbge.PresStyleCntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.PresStyleCntAttr)})
	}
	if _abbge.LoTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.LoTypeIdAttr)})
	}
	if _abbge.LoCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006co\u0043\u0061\u0074\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.LoCatIdAttr)})
	}
	if _abbge.QsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.QsTypeIdAttr)})
	}
	if _abbge.QsCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0071s\u0043\u0061\u0074\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.QsCatIdAttr)})
	}
	if _abbge.CsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CsTypeIdAttr)})
	}
	if _abbge.CsCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063s\u0043\u0061\u0074\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CsCatIdAttr)})
	}
	if _abbge.Coherent3DOffAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_abbge.Coherent3DOffAttr))})
	}
	if _abbge.PhldrTAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0068\u006c\u0064\u0072\u0054"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.PhldrTAttr)})
	}
	if _abbge.PhldrAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0068\u006cd\u0072"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_abbge.PhldrAttr))})
	}
	if _abbge.CustAngAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0041\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustAngAttr)})
	}
	if _abbge.CustFlipVertAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_abbge.CustFlipVertAttr))})
	}
	if _abbge.CustFlipHorAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_abbge.CustFlipHorAttr))})
	}
	if _abbge.CustSzXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0058"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustSzXAttr)})
	}
	if _abbge.CustSzYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0059"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustSzYAttr)})
	}
	if _abbge.CustScaleXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustScaleXAttr)})
	}
	if _abbge.CustScaleYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustScaleYAttr)})
	}
	if _abbge.CustTAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u0054"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_abbge.CustTAttr))})
	}
	if _abbge.CustLinFactXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustLinFactXAttr)})
	}
	if _abbge.CustLinFactYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustLinFactYAttr)})
	}
	if _abbge.CustLinFactNeighborXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustLinFactNeighborXAttr)})
	}
	if _abbge.CustLinFactNeighborYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustLinFactNeighborYAttr)})
	}
	if _abbge.CustRadScaleRadAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustRadScaleRadAttr)})
	}
	if _abbge.CustRadScaleIncAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063"}, Value: _bg.Sprintf("\u0025\u0076", *_abbge.CustRadScaleIncAttr)})
	}
	e.EncodeToken(start)
	if _abbge.PresLayoutVars != nil {
		_fabf := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}}
		e.EncodeElement(_abbge.PresLayoutVars, _fabf)
	}
	if _abbge.Style != nil {
		_cfe := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_abbge.Style, _cfe)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_TextDirection byte

// ValidateWithPath validates the ColorsDefHdr and its children, prefixing error messages with path
func (_dffd *ColorsDefHdr) ValidateWithPath(path string) error {
	if _eeafd := _dffd.CT_ColorTransformHeader.ValidateWithPath(path); _eeafd != nil {
		return _eeafd
	}
	return nil
}
func (_ecagb *CT_StyleDefinitionHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ecagb.StyleDefHdr != nil {
		_gbde := _a.StartElement{Name: _a.Name{Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _bcee := range _ecagb.StyleDefHdr {
			e.EncodeElement(_bcee, _gbde)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DiagramDefinition and its children, prefixing error messages with path
func (_gdbf *CT_DiagramDefinition) ValidateWithPath(path string) error {
	for _gefg, _fbffg := range _gdbf.Title {
		if _babcd := _fbffg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _gefg)); _babcd != nil {
			return _babcd
		}
	}
	for _dbag, _dgea := range _gdbf.Desc {
		if _egbc := _dgea.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _dbag)); _egbc != nil {
			return _egbc
		}
	}
	if _gdbf.CatLst != nil {
		if _agbd := _gdbf.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _agbd != nil {
			return _agbd
		}
	}
	if _gdbf.SampData != nil {
		if _agd := _gdbf.SampData.ValidateWithPath(path + "\u002fS\u0061\u006d\u0070\u0044\u0061\u0074a"); _agd != nil {
			return _agd
		}
	}
	if _gdbf.StyleData != nil {
		if _aaed := _gdbf.StyleData.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065\u0044\u0061\u0074\u0061"); _aaed != nil {
			return _aaed
		}
	}
	if _gdbf.ClrData != nil {
		if _cceb := _gdbf.ClrData.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u0044\u0061\u0074\u0061"); _cceb != nil {
			return _cceb
		}
	}
	if _dbbae := _gdbf.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _dbbae != nil {
		return _dbbae
	}
	if _gdbf.ExtLst != nil {
		if _dgfb := _gdbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgfb != nil {
			return _dgfb
		}
	}
	return nil
}

const (
	ST_ArrowheadStyleUnset ST_ArrowheadStyle = 0
	ST_ArrowheadStyleAuto  ST_ArrowheadStyle = 1
	ST_ArrowheadStyleArr   ST_ArrowheadStyle = 2
	ST_ArrowheadStyleNoArr ST_ArrowheadStyle = 3
)

func (_adbc ST_AxisType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dbegc := _a.Attr{}
	_dbegc.Name = name
	switch _adbc {
	case ST_AxisTypeUnset:
		_dbegc.Value = ""
	case ST_AxisTypeSelf:
		_dbegc.Value = "\u0073\u0065\u006c\u0066"
	case ST_AxisTypeCh:
		_dbegc.Value = "\u0063\u0068"
	case ST_AxisTypeDes:
		_dbegc.Value = "\u0064\u0065\u0073"
	case ST_AxisTypeDesOrSelf:
		_dbegc.Value = "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case ST_AxisTypePar:
		_dbegc.Value = "\u0070\u0061\u0072"
	case ST_AxisTypeAncst:
		_dbegc.Value = "\u0061\u006e\u0063s\u0074"
	case ST_AxisTypeAncstOrSelf:
		_dbegc.Value = "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case ST_AxisTypeFollowSib:
		_dbegc.Value = "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case ST_AxisTypePrecedSib:
		_dbegc.Value = "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case ST_AxisTypeFollow:
		_dbegc.Value = "\u0066\u006f\u006c\u006c\u006f\u0077"
	case ST_AxisTypePreced:
		_dbegc.Value = "\u0070\u0072\u0065\u0063\u0065\u0064"
	case ST_AxisTypeRoot:
		_dbegc.Value = "\u0072\u006f\u006f\u0074"
	case ST_AxisTypeNone:
		_dbegc.Value = "\u006e\u006f\u006e\u0065"
	}
	return _dbegc, nil
}
func (_agdf *CT_LayoutVariablePropertySet) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ebce:
	for {
		_cbac, _dbda := d.Token()
		if _dbda != nil {
			return _dbda
		}
		switch _gceg := _cbac.(type) {
		case _a.StartElement:
			switch _gceg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}:
				_agdf.OrgChart = NewCT_OrgChart()
				if _acea := d.DecodeElement(_agdf.OrgChart, &_gceg); _acea != nil {
					return _acea
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u004da\u0078"}:
				_agdf.ChMax = NewCT_ChildMax()
				if _bede := d.DecodeElement(_agdf.ChMax, &_gceg); _bede != nil {
					return _bede
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}:
				_agdf.ChPref = NewCT_ChildPref()
				if _acde := d.DecodeElement(_agdf.ChPref, &_gceg); _acde != nil {
					return _acde
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}:
				_agdf.BulletEnabled = NewCT_BulletEnabled()
				if _bffa := d.DecodeElement(_agdf.BulletEnabled, &_gceg); _bffa != nil {
					return _bffa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0069\u0072"}:
				_agdf.Dir = NewCT_Direction()
				if _bgfbg := d.DecodeElement(_agdf.Dir, &_gceg); _bgfbg != nil {
					return _bgfbg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}:
				_agdf.HierBranch = NewCT_HierBranchStyle()
				if _gdad := d.DecodeElement(_agdf.HierBranch, &_gceg); _gdad != nil {
					return _gdad
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}:
				_agdf.AnimOne = NewCT_AnimOne()
				if _dcfda := d.DecodeElement(_agdf.AnimOne, &_gceg); _dcfda != nil {
					return _dcfda
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}:
				_agdf.AnimLvl = NewCT_AnimLvl()
				if _gbae := d.DecodeElement(_agdf.AnimLvl, &_gceg); _gbae != nil {
					return _gbae
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}:
				_agdf.ResizeHandles = NewCT_ResizeHandles()
				if _bcd := d.DecodeElement(_agdf.ResizeHandles, &_gceg); _bcd != nil {
					return _bcd
				}
			default:
				_fb.Log("\u0073k\u0069\u0070\u0070\u0069\u006e\u0067\u0020un\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074 \u006f\u006e\u0020C\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062\u006c\u0065P\u0072\u006fpe\u0072\u0074\u0079S\u0065\u0074\u0020\u0025\u0076", _gceg.Name)
				if _fgde := d.Skip(); _fgde != nil {
					return _fgde
				}
			}
		case _a.EndElement:
			break _ebce
		case _a.CharData:
		}
	}
	return nil
}
func NewColorsDefHdr() *ColorsDefHdr {
	_gaeae := &ColorsDefHdr{}
	_gaeae.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	return _gaeae
}
func (_d *AG_ConstraintAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _d.TypeAttr != ST_ConstraintTypeUnset {
		_bbb, _de := _d.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _de != nil {
			return _de
		}
		start.Attr = append(start.Attr, _bbb)
	}
	if _d.ForAttr != ST_ConstraintRelationshipUnset {
		_af, _c := _d.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _c != nil {
			return _c
		}
		start.Attr = append(start.Attr, _af)
	}
	if _d.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_d.ForNameAttr)})
	}
	if _d.PtTypeAttr != ST_ElementTypeUnset {
		_bbf, _cc := _d.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _cc != nil {
			return _cc
		}
		start.Attr = append(start.Attr, _bbf)
	}
	return nil
}
func (_acffb ST_ResizeHandlesStr) ValidateWithPath(path string) error {
	switch _acffb {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acffb))
	}
	return nil
}

// Validate validates the CT_SDName and its children
func (_bfage *CT_SDName) Validate() error {
	return _bfage.ValidateWithPath("\u0043T\u005f\u0053\u0044\u004e\u0061\u006de")
}
func (_cabede ST_HierarchyAlignment) String() string {
	switch _cabede {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0074\u0043\u0074\u0072\u0043\u0068"
	case 4:
		return "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case 5:
		return "\u0062\u004c"
	case 6:
		return "\u0062\u0052"
	case 7:
		return "\u0062\u0043\u0074\u0072\u0043\u0068"
	case 8:
		return "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case 9:
		return "\u006c\u0054"
	case 10:
		return "\u006c\u0042"
	case 11:
		return "\u006c\u0043\u0074\u0072\u0043\u0068"
	case 12:
		return "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case 13:
		return "\u0072\u0054"
	case 14:
		return "\u0072\u0042"
	case 15:
		return "\u0072\u0043\u0074\u0072\u0043\u0068"
	case 16:
		return "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return ""
}

// ValidateWithPath validates the CT_StyleLabel and its children, prefixing error messages with path
func (_acfgc *CT_StyleLabel) ValidateWithPath(path string) error {
	if _acfgc.Scene3d != nil {
		if _bbab := _acfgc.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _bbab != nil {
			return _bbab
		}
	}
	if _acfgc.Sp3d != nil {
		if _adbfc := _acfgc.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _adbfc != nil {
			return _adbfc
		}
	}
	if _acfgc.TxPr != nil {
		if _bbfg := _acfgc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bbfg != nil {
			return _bbfg
		}
	}
	if _acfgc.Style != nil {
		if _fafg := _acfgc.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _fafg != nil {
			return _fafg
		}
	}
	if _acfgc.ExtLst != nil {
		if _cfcc := _acfgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfcc != nil {
			return _cfcc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinitionHeader and its children, prefixing error messages with path
func (_eddeb *CT_StyleDefinitionHeader) ValidateWithPath(path string) error {
	for _gbffa, _gdfad := range _eddeb.Title {
		if _cgcc := _gdfad.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _gbffa)); _cgcc != nil {
			return _cgcc
		}
	}
	for _gbgf, _gcec := range _eddeb.Desc {
		if _fcaaf := _gcec.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _gbgf)); _fcaaf != nil {
			return _fcaaf
		}
	}
	if _eddeb.CatLst != nil {
		if _fbdcf := _eddeb.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _fbdcf != nil {
			return _fbdcf
		}
	}
	if _eddeb.ExtLst != nil {
		if _cedc := _eddeb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cedc != nil {
			return _cedc
		}
	}
	return nil
}
func (_daaa *CT_AnimLvl) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _daaa.ValAttr != ST_AnimLvlStrUnset {
		_bea, _beaa := _daaa.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _beaa != nil {
			return _beaa
		}
		start.Attr = append(start.Attr, _bea)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_afggf ST_BoolOperator) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ffgc := _a.Attr{}
	_ffgc.Name = name
	switch _afggf {
	case ST_BoolOperatorUnset:
		_ffgc.Value = ""
	case ST_BoolOperatorNone:
		_ffgc.Value = "\u006e\u006f\u006e\u0065"
	case ST_BoolOperatorEqu:
		_ffgc.Value = "\u0065\u0071\u0075"
	case ST_BoolOperatorGte:
		_ffgc.Value = "\u0067\u0074\u0065"
	case ST_BoolOperatorLte:
		_ffgc.Value = "\u006c\u0074\u0065"
	}
	return _ffgc, nil
}
func (_aagf *LayoutDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aagf.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	for _, _acdec := range start.Attr {
		if _acdec.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_dceg, _bfee := _acdec.Value, error(nil)
			if _bfee != nil {
				return _bfee
			}
			_aagf.UniqueIdAttr = &_dceg
			continue
		}
		if _acdec.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_fgag, _efag := _acdec.Value, error(nil)
			if _efag != nil {
				return _efag
			}
			_aagf.MinVerAttr = &_fgag
			continue
		}
		if _acdec.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_ddee, _fcfb := _acdec.Value, error(nil)
			if _fcfb != nil {
				return _fcfb
			}
			_aagf.DefStyleAttr = &_ddee
			continue
		}
	}
_gdbec:
	for {
		_dbgf, _dbbaeb := d.Token()
		if _dbbaeb != nil {
			return _dbbaeb
		}
		switch _gafb := _dbgf.(type) {
		case _a.StartElement:
			switch _gafb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_bbaba := NewCT_Name()
				if _beaad := d.DecodeElement(_bbaba, &_gafb); _beaad != nil {
					return _beaad
				}
				_aagf.Title = append(_aagf.Title, _bbaba)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gagd := NewCT_Description()
				if _becc := d.DecodeElement(_gagd, &_gafb); _becc != nil {
					return _becc
				}
				_aagf.Desc = append(_aagf.Desc, _gagd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_aagf.CatLst = NewCT_Categories()
				if _eeec := d.DecodeElement(_aagf.CatLst, &_gafb); _eeec != nil {
					return _eeec
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_aagf.SampData = NewCT_SampleData()
				if _abea := d.DecodeElement(_aagf.SampData, &_gafb); _abea != nil {
					return _abea
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_aagf.StyleData = NewCT_SampleData()
				if _gccbg := d.DecodeElement(_aagf.StyleData, &_gafb); _gccbg != nil {
					return _gccbg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_aagf.ClrData = NewCT_SampleData()
				if _bbebb := d.DecodeElement(_aagf.ClrData, &_gafb); _bbebb != nil {
					return _bbebb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _decc := d.DecodeElement(_aagf.LayoutNode, &_gafb); _decc != nil {
					return _decc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aagf.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _adcggf := d.DecodeElement(_aagf.ExtLst, &_gafb); _adcggf != nil {
					return _adcggf
				}
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066 \u0025\u0076", _gafb.Name)
				if _bgaeb := d.Skip(); _bgaeb != nil {
					return _bgaeb
				}
			}
		case _a.EndElement:
			break _gdbec
		case _a.CharData:
		}
	}
	return nil
}
func (_gcd *CT_AnimOne) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gcd.ValAttr != ST_AnimOneStrUnset {
		_cce, _acc := _gcd.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _acc != nil {
			return _acc
		}
		start.Attr = append(start.Attr, _cce)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_ChildPref struct{ ValAttr *int32 }

const (
	ST_BendPointUnset ST_BendPoint = 0
	ST_BendPointBeg   ST_BendPoint = 1
	ST_BendPointDef   ST_BendPoint = 2
	ST_BendPointEnd   ST_BendPoint = 3
)

// Validate validates the CT_Name and its children
func (_eaca *CT_Name) Validate() error {
	return _eaca.ValidateWithPath("\u0043T\u005f\u004e\u0061\u006d\u0065")
}
func NewCT_Constraint() *CT_Constraint                 { _bege := &CT_Constraint{}; return _bege }
func (_befgf ST_TextAnchorHorizontal) Validate() error { return _befgf.ValidateWithPath("") }
func (_daea *CT_When) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _daea.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.NameAttr)})
	}
	_beec, _bccad := _daea.FuncAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u0075\u006e\u0063"})
	if _bccad != nil {
		return _bccad
	}
	start.Attr = append(start.Attr, _beec)
	if _daea.ArgAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0072\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.ArgAttr)})
	}
	_beec, _bccad = _daea.OpAttr.MarshalXMLAttr(_a.Name{Local: "\u006f\u0070"})
	if _bccad != nil {
		return _bccad
	}
	start.Attr = append(start.Attr, _beec)
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _daea.ValAttr)})
	if _daea.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.AxisAttr)})
	}
	if _daea.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.PtTypeAttr)})
	}
	if _daea.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.HideLastTransAttr)})
	}
	if _daea.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.StAttr)})
	}
	if _daea.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.CntAttr)})
	}
	if _daea.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _bg.Sprintf("\u0025\u0076", *_daea.StepAttr)})
	}
	e.EncodeToken(start)
	if _daea.Alg != nil {
		_cefc := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _becg := range _daea.Alg {
			e.EncodeElement(_becg, _cefc)
		}
	}
	if _daea.Shape != nil {
		_cbgd := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _bgfcc := range _daea.Shape {
			e.EncodeElement(_bgfcc, _cbgd)
		}
	}
	if _daea.PresOf != nil {
		_dcgge := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _gdcga := range _daea.PresOf {
			e.EncodeElement(_gdcga, _dcgge)
		}
	}
	if _daea.ConstrLst != nil {
		_dceaa := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _dcddf := range _daea.ConstrLst {
			e.EncodeElement(_dcddf, _dceaa)
		}
	}
	if _daea.RuleLst != nil {
		_aegf := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _abce := range _daea.RuleLst {
			e.EncodeElement(_abce, _aegf)
		}
	}
	if _daea.ForEach != nil {
		_efdde := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _ecbgf := range _daea.ForEach {
			e.EncodeElement(_ecbgf, _efdde)
		}
	}
	if _daea.LayoutNode != nil {
		_eeac := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _dgaf := range _daea.LayoutNode {
			e.EncodeElement(_dgaf, _eeac)
		}
	}
	if _daea.Choose != nil {
		_bggd := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _babbc := range _daea.Choose {
			e.EncodeElement(_babbc, _bggd)
		}
	}
	if _daea.ExtLst != nil {
		_bbbd := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _cdcgd := range _daea.ExtLst {
			e.EncodeElement(_cdcgd, _bbbd)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_egga ST_ChildOrderType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_egga.String(), start)
}
func NewCT_Otherwise() *CT_Otherwise { _gcedg := &CT_Otherwise{}; return _gcedg }
func (_bfag *CT_ColorTransformHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _bfag.UniqueIdAttr)})
	if _bfag.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _bg.Sprintf("\u0025\u0076", *_bfag.MinVerAttr)})
	}
	if _bfag.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_bfag.ResIdAttr)})
	}
	e.EncodeToken(start)
	_dfda := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _fcb := range _bfag.Title {
		e.EncodeElement(_fcb, _dfda)
	}
	_ggga := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _adfa := range _bfag.Desc {
		e.EncodeElement(_adfa, _ggga)
	}
	if _bfag.CatLst != nil {
		_gfcf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfag.CatLst, _gfcf)
	}
	if _bfag.ExtLst != nil {
		_gec := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfag.ExtLst, _gec)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ecaeg ST_BendPoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bedb := _a.Attr{}
	_bedb.Name = name
	switch _ecaeg {
	case ST_BendPointUnset:
		_bedb.Value = ""
	case ST_BendPointBeg:
		_bedb.Value = "\u0062\u0065\u0067"
	case ST_BendPointDef:
		_bedb.Value = "\u0064\u0065\u0066"
	case ST_BendPointEnd:
		_bedb.Value = "\u0065\u006e\u0064"
	}
	return _bedb, nil
}
func (_gfgd ST_AnimLvlStr) ValidateWithPath(path string) error {
	switch _gfgd {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfgd))
	}
	return nil
}

type CT_Adj struct {
	IdxAttr uint32
	ValAttr float64
}

func (_cbbb *ST_ConnectorPoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_agbc, _gdba := d.Token()
	if _gdba != nil {
		return _gdba
	}
	if _ggfe, _ecfb := _agbc.(_a.EndElement); _ecfb && _ggfe.Name == start.Name {
		*_cbbb = 1
		return nil
	}
	if _bfbe, _gbebg := _agbc.(_a.CharData); !_gbebg {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agbc)
	} else {
		switch string(_bfbe) {
		case "":
			*_cbbb = 0
		case "\u0061\u0075\u0074\u006f":
			*_cbbb = 1
		case "\u0062\u0043\u0074\u0072":
			*_cbbb = 2
		case "\u0063\u0074\u0072":
			*_cbbb = 3
		case "\u006d\u0069\u0064\u004c":
			*_cbbb = 4
		case "\u006d\u0069\u0064\u0052":
			*_cbbb = 5
		case "\u0074\u0043\u0074\u0072":
			*_cbbb = 6
		case "\u0062\u004c":
			*_cbbb = 7
		case "\u0062\u0052":
			*_cbbb = 8
		case "\u0074\u004c":
			*_cbbb = 9
		case "\u0074\u0052":
			*_cbbb = 10
		case "\u0072\u0061\u0064\u0069\u0061\u006c":
			*_cbbb = 11
		}
	}
	_agbc, _gdba = d.Token()
	if _gdba != nil {
		return _gdba
	}
	if _acfd, _acfga := _agbc.(_a.EndElement); _acfga && _acfd.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agbc)
}
func (_caffe *ST_ChildOrderType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cacc, _gffc := d.Token()
	if _gffc != nil {
		return _gffc
	}
	if _gcbdg, _caabe := _cacc.(_a.EndElement); _caabe && _gcbdg.Name == start.Name {
		*_caffe = 1
		return nil
	}
	if _aadaf, _bcbbbc := _cacc.(_a.CharData); !_bcbbbc {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cacc)
	} else {
		switch string(_aadaf) {
		case "":
			*_caffe = 0
		case "\u0062":
			*_caffe = 1
		case "\u0074":
			*_caffe = 2
		}
	}
	_cacc, _gffc = d.Token()
	if _gffc != nil {
		return _gffc
	}
	if _aafdab, _deeeb := _cacc.(_a.EndElement); _deeeb && _aafdab.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cacc)
}

// Validate validates the CT_PresentationOf and its children
func (_gfcea *CT_PresentationOf) Validate() error {
	return _gfcea.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066")
}
func (_beee *CT_Cxn) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _beee.ModelIdAttr)})
	if _beee.TypeAttr != ST_CxnTypeUnset {
		_gfdg, _bdf := _beee.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _bdf != nil {
			return _bdf
		}
		start.Attr = append(start.Attr, _gfdg)
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0072\u0063I\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _beee.SrcIdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0073\u0074\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _beee.DestIdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0072\u0063\u004f\u0072\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _beee.SrcOrdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064e\u0073\u0074\u004f\u0072\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _beee.DestOrdAttr)})
	if _beee.ParTransIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_beee.ParTransIdAttr)})
	}
	if _beee.SibTransIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_beee.SibTransIdAttr)})
	}
	if _beee.PresIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_beee.PresIdAttr)})
	}
	e.EncodeToken(start)
	if _beee.ExtLst != nil {
		_egea := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beee.ExtLst, _egea)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bdfc ST_CxnType) String() string {
	switch _bdfc {
	case 0:
		return ""
	case 1:
		return "\u0070\u0061\u0072O\u0066"
	case 2:
		return "\u0070\u0072\u0065\u0073\u004f\u0066"
	case 3:
		return "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case 4:
		return "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return ""
}
func (_dcbbb ST_AnimOneStr) Validate() error { return _dcbbb.ValidateWithPath("") }
func (_fcbcf *ST_StartingElement) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fcbcf = 0
	case "\u006e\u006f\u0064\u0065":
		*_fcbcf = 1
	case "\u0074\u0072\u0061n\u0073":
		*_fcbcf = 2
	}
	return nil
}

type ST_FunctionType byte

// Validate validates the CT_PtList and its children
func (_abgd *CT_PtList) Validate() error {
	return _abgd.ValidateWithPath("\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t")
}
func (_adcgdd *ST_LayoutShapeType) Validate() error { return _adcgdd.ValidateWithPath("") }

// ValidateWithPath validates the StyleDefHdr and its children, prefixing error messages with path
func (_fcbc *StyleDefHdr) ValidateWithPath(path string) error {
	if _fbfgg := _fcbc.CT_StyleDefinitionHeader.ValidateWithPath(path); _fbfgg != nil {
		return _fbfgg
	}
	return nil
}
func (_eggd *ST_HierBranchStyle) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eggd = 0
	case "\u006c":
		*_eggd = 1
	case "\u0072":
		*_eggd = 2
	case "\u0068\u0061\u006e\u0067":
		*_eggd = 3
	case "\u0073\u0074\u0064":
		*_eggd = 4
	case "\u0069\u006e\u0069\u0074":
		*_eggd = 5
	}
	return nil
}

type CT_CTStyleLabel struct {
	NameAttr       string
	FillClrLst     *CT_Colors
	LinClrLst      *CT_Colors
	EffectClrLst   *CT_Colors
	TxLinClrLst    *CT_Colors
	TxFillClrLst   *CT_Colors
	TxEffectClrLst *CT_Colors
	ExtLst         *_bb.CT_OfficeArtExtensionList
}

const (
	ST_StartingElementUnset ST_StartingElement = 0
	ST_StartingElementNode  ST_StartingElement = 1
	ST_StartingElementTrans ST_StartingElement = 2
)

func (_eega *CT_SDName) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ecgbb := range start.Attr {
		if _ecgbb.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gbga, _fddg := _ecgbb.Value, error(nil)
			if _fddg != nil {
				return _fddg
			}
			_eega.LangAttr = &_gbga
			continue
		}
		if _ecgbb.Name.Local == "\u0076\u0061\u006c" {
			_ddbca, _adad := _ecgbb.Value, error(nil)
			if _adad != nil {
				return _adad
			}
			_eega.ValAttr = _ddbca
			continue
		}
	}
	for {
		_fdded, _dcdg := d.Token()
		if _dcdg != nil {
			return _bg.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0044\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _dcdg)
		}
		if _edfc, _fccg := _fdded.(_a.EndElement); _fccg && _edfc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_StyleDefinitionHeaderLst struct{ StyleDefHdr []*CT_StyleDefinitionHeader }

func NewCT_ChildMax() *CT_ChildMax { _gffg := &CT_ChildMax{}; return _gffg }

type CT_LayoutVariablePropertySet struct {
	OrgChart      *CT_OrgChart
	ChMax         *CT_ChildMax
	ChPref        *CT_ChildPref
	BulletEnabled *CT_BulletEnabled
	Dir           *CT_Direction
	HierBranch    *CT_HierBranchStyle
	AnimOne       *CT_AnimOne
	AnimLvl       *CT_AnimLvl
	ResizeHandles *CT_ResizeHandles
}

// Validate validates the CT_AdjLst and its children
func (_cdc *CT_AdjLst) Validate() error {
	return _cdc.ValidateWithPath("\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t")
}
func (_eggcb *ST_BendPoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcgf, _cgbf := d.Token()
	if _cgbf != nil {
		return _cgbf
	}
	if _dcdc, _eddgg := _dcgf.(_a.EndElement); _eddgg && _dcdc.Name == start.Name {
		*_eggcb = 1
		return nil
	}
	if _cfgbf, _ebae := _dcgf.(_a.CharData); !_ebae {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcgf)
	} else {
		switch string(_cfgbf) {
		case "":
			*_eggcb = 0
		case "\u0062\u0065\u0067":
			*_eggcb = 1
		case "\u0064\u0065\u0066":
			*_eggcb = 2
		case "\u0065\u006e\u0064":
			*_eggcb = 3
		}
	}
	_dcgf, _cgbf = d.Token()
	if _cgbf != nil {
		return _cgbf
	}
	if _gdab, _efdag := _dcgf.(_a.EndElement); _efdag && _gdab.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcgf)
}
func (_baff *ST_AxisType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcacf, _ffeb := d.Token()
	if _ffeb != nil {
		return _ffeb
	}
	if _aecag, _eeada := _dcacf.(_a.EndElement); _eeada && _aecag.Name == start.Name {
		*_baff = 1
		return nil
	}
	if _ecgf, _bedce := _dcacf.(_a.CharData); !_bedce {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcacf)
	} else {
		switch string(_ecgf) {
		case "":
			*_baff = 0
		case "\u0073\u0065\u006c\u0066":
			*_baff = 1
		case "\u0063\u0068":
			*_baff = 2
		case "\u0064\u0065\u0073":
			*_baff = 3
		case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
			*_baff = 4
		case "\u0070\u0061\u0072":
			*_baff = 5
		case "\u0061\u006e\u0063s\u0074":
			*_baff = 6
		case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
			*_baff = 7
		case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
			*_baff = 8
		case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
			*_baff = 9
		case "\u0066\u006f\u006c\u006c\u006f\u0077":
			*_baff = 10
		case "\u0070\u0072\u0065\u0063\u0065\u0064":
			*_baff = 11
		case "\u0072\u006f\u006f\u0074":
			*_baff = 12
		case "\u006e\u006f\u006e\u0065":
			*_baff = 13
		}
	}
	_dcacf, _ffeb = d.Token()
	if _ffeb != nil {
		return _ffeb
	}
	if _dfee, _edgg := _dcacf.(_a.EndElement); _edgg && _dfee.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcacf)
}

const (
	ST_ConstraintRelationshipUnset ST_ConstraintRelationship = 0
	ST_ConstraintRelationshipSelf  ST_ConstraintRelationship = 1
	ST_ConstraintRelationshipCh    ST_ConstraintRelationship = 2
	ST_ConstraintRelationshipDes   ST_ConstraintRelationship = 3
)

// ValidateWithPath validates the CT_Direction and its children, prefixing error messages with path
func (_bbfd *CT_Direction) ValidateWithPath(path string) error {
	if _cbc := _bbfd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbc != nil {
		return _cbc
	}
	return nil
}
func (_gcge ST_FunctionArgument) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _gcge.ST_VariableType != ST_VariableTypeUnset {
		e.EncodeToken(_a.CharData(_gcge.ST_VariableType.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

type ST_AutoTextRotation byte

// ValidateWithPath validates the CT_AnimLvl and its children, prefixing error messages with path
func (_cb *CT_AnimLvl) ValidateWithPath(path string) error {
	if _dage := _cb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dage != nil {
		return _dage
	}
	return nil
}
func (_aebf ST_CenterShapeMapping) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ebaf := _a.Attr{}
	_ebaf.Name = name
	switch _aebf {
	case ST_CenterShapeMappingUnset:
		_ebaf.Value = ""
	case ST_CenterShapeMappingNone:
		_ebaf.Value = "\u006e\u006f\u006e\u0065"
	case ST_CenterShapeMappingFNode:
		_ebaf.Value = "\u0066\u004e\u006fd\u0065"
	}
	return _ebaf, nil
}
func (_eggg *CT_DiagramDefinitionHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ccf:
	for {
		_eegc, _bbae := d.Token()
		if _bbae != nil {
			return _bbae
		}
		switch _addg := _eegc.(type) {
		case _a.StartElement:
			switch _addg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_afdc := NewCT_DiagramDefinitionHeader()
				if _bcfba := d.DecodeElement(_afdc, &_addg); _bcfba != nil {
					return _bcfba
				}
				_eggg.LayoutDefHdr = append(_eggg.LayoutDefHdr, _afdc)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074 \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065r\u004c\u0073t\u0020%\u0076", _addg.Name)
				if _eddd := d.Skip(); _eddd != nil {
					return _eddd
				}
			}
		case _a.EndElement:
			break _ccf
		case _a.CharData:
		}
	}
	return nil
}
func (_feda ST_NodeVerticalAlignment) String() string {
	switch _feda {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}
func (_gceac ST_TextBlockDirection) String() string {
	switch _gceac {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}
func (_acebfb ST_FunctionType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cfffa := _a.Attr{}
	_cfffa.Name = name
	switch _acebfb {
	case ST_FunctionTypeUnset:
		_cfffa.Value = ""
	case ST_FunctionTypeCnt:
		_cfffa.Value = "\u0063\u006e\u0074"
	case ST_FunctionTypePos:
		_cfffa.Value = "\u0070\u006f\u0073"
	case ST_FunctionTypeRevPos:
		_cfffa.Value = "\u0072\u0065\u0076\u0050\u006f\u0073"
	case ST_FunctionTypePosEven:
		_cfffa.Value = "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case ST_FunctionTypePosOdd:
		_cfffa.Value = "\u0070\u006f\u0073\u004f\u0064\u0064"
	case ST_FunctionTypeVar:
		_cfffa.Value = "\u0076\u0061\u0072"
	case ST_FunctionTypeDepth:
		_cfffa.Value = "\u0064\u0065\u0070t\u0068"
	case ST_FunctionTypeMaxDepth:
		_cfffa.Value = "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return _cfffa, nil
}
func (_cfgg ST_ChildOrderType) String() string {
	switch _cfgg {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074"
	}
	return ""
}

// Validate validates the ColorsDefHdr and its children
func (_cagbf *ColorsDefHdr) Validate() error {
	return _cagbf.ValidateWithPath("\u0043\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072")
}

// Validate validates the CT_SampleData and its children
func (_dgdd *CT_SampleData) Validate() error {
	return _dgdd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061")
}
func (_fbfd ST_Direction) String() string {
	switch _fbfd {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0072\u006d"
	case 2:
		return "\u0072\u0065\u0076"
	}
	return ""
}

const (
	ST_PtTypeUnset    ST_PtType = 0
	ST_PtTypeNode     ST_PtType = 1
	ST_PtTypeAsst     ST_PtType = 2
	ST_PtTypeDoc      ST_PtType = 3
	ST_PtTypePres     ST_PtType = 4
	ST_PtTypeParTrans ST_PtType = 5
	ST_PtTypeSibTrans ST_PtType = 6
)

func (_cdbd *CT_Direction) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cdbd.ValAttr != ST_DirectionUnset {
		_baead, _agbe := _cdbd.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _agbe != nil {
			return _agbe
		}
		start.Attr = append(start.Attr, _baead)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fbegbg *ST_DiagramHorizontalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fbegbg = 0
	case "\u006c":
		*_fbegbg = 1
	case "\u0063\u0074\u0072":
		*_fbegbg = 2
	case "\u0072":
		*_fbegbg = 3
	case "\u006e\u006f\u006e\u0065":
		*_fbegbg = 4
	}
	return nil
}

type CT_BulletEnabled struct{ ValAttr *bool }

func (_egced ST_HierarchyAlignment) Validate() error { return _egced.ValidateWithPath("") }
func (_dcfag ST_BendPoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dcfag.String(), start)
}
func (_dabe *ST_ContinueDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffaec, _ffacf := d.Token()
	if _ffacf != nil {
		return _ffacf
	}
	if _agaad, _gadg := _ffaec.(_a.EndElement); _gadg && _agaad.Name == start.Name {
		*_dabe = 1
		return nil
	}
	if _fcacag, _ffbe := _ffaec.(_a.CharData); !_ffbe {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffaec)
	} else {
		switch string(_fcacag) {
		case "":
			*_dabe = 0
		case "\u0072\u0065\u0076\u0044\u0069\u0072":
			*_dabe = 1
		case "\u0073a\u006d\u0065\u0044\u0069\u0072":
			*_dabe = 2
		}
	}
	_ffaec, _ffacf = d.Token()
	if _ffacf != nil {
		return _ffacf
	}
	if _acfdb, _cdcgf := _ffaec.(_a.EndElement); _cdcgf && _acfdb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffaec)
}
func (_eedge ST_ChildAlignment) String() string {
	switch _eedge {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_SampleData and its children, prefixing error messages with path
func (_bdcb *CT_SampleData) ValidateWithPath(path string) error {
	if _bdcb.DataModel != nil {
		if _ddgcd := _bdcb.DataModel.ValidateWithPath(path + "\u002f\u0044\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c"); _ddgcd != nil {
			return _ddgcd
		}
	}
	return nil
}
func (_fgbfb ST_ContinueDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_degde := _a.Attr{}
	_degde.Name = name
	switch _fgbfb {
	case ST_ContinueDirectionUnset:
		_degde.Value = ""
	case ST_ContinueDirectionRevDir:
		_degde.Value = "\u0072\u0065\u0076\u0044\u0069\u0072"
	case ST_ContinueDirectionSameDir:
		_degde.Value = "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return _degde, nil
}
func NewCT_AdjLst() *CT_AdjLst { _gbc := &CT_AdjLst{}; return _gbc }
func (_gcfc ST_PyramidAccentTextMargin) String() string {
	switch _gcfc {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0065\u0070"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	}
	return ""
}
func NewDataModel() *DataModel {
	_feadb := &DataModel{}
	_feadb.CT_DataModel = *NewCT_DataModel()
	return _feadb
}

type CT_SampleData struct {
	UseDefAttr *bool
	DataModel  *CT_DataModel
}

// Validate validates the ColorsDef and its children
func (_ccgdb *ColorsDef) Validate() error {
	return _ccgdb.ValidateWithPath("\u0043o\u006c\u006f\u0072\u0073\u0044\u0065f")
}

type CT_Pt struct {
	ModelIdAttr ST_ModelId
	TypeAttr    ST_PtType
	CxnIdAttr   *ST_ModelId
	PrSet       *CT_ElemPropSet
	SpPr        *_bb.CT_ShapeProperties
	T           *_bb.CT_TextBody
	ExtLst      *_bb.CT_OfficeArtExtensionList
}

func (_dggff ST_NodeVerticalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dggff.String(), start)
}
func (_bdag *ColorsDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bdag.CT_ColorTransform = *NewCT_ColorTransform()
	for _, _gfaa := range start.Attr {
		if _gfaa.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fedg, _ffdbb := _gfaa.Value, error(nil)
			if _ffdbb != nil {
				return _ffdbb
			}
			_bdag.UniqueIdAttr = &_fedg
			continue
		}
		if _gfaa.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_ddbbg, _efdded := _gfaa.Value, error(nil)
			if _efdded != nil {
				return _efdded
			}
			_bdag.MinVerAttr = &_ddbbg
			continue
		}
	}
_gecc:
	for {
		_ffdd, _ecadc := d.Token()
		if _ecadc != nil {
			return _ecadc
		}
		switch _gacdf := _ffdd.(type) {
		case _a.StartElement:
			switch _gacdf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dbfc := NewCT_CTName()
				if _eaceb := d.DecodeElement(_dbfc, &_gacdf); _eaceb != nil {
					return _eaceb
				}
				_bdag.Title = append(_bdag.Title, _dbfc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_eecg := NewCT_CTDescription()
				if _fdfb := d.DecodeElement(_eecg, &_gacdf); _fdfb != nil {
					return _fdfb
				}
				_bdag.Desc = append(_bdag.Desc, _eecg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_bdag.CatLst = NewCT_CTCategories()
				if _dfed := d.DecodeElement(_bdag.CatLst, &_gacdf); _dfed != nil {
					return _dfed
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_cabbg := NewCT_CTStyleLabel()
				if _dcfe := d.DecodeElement(_cabbg, &_gacdf); _dcfe != nil {
					return _dcfe
				}
				_bdag.StyleLbl = append(_bdag.StyleLbl, _cabbg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdag.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _becd := d.DecodeElement(_bdag.ExtLst, &_gacdf); _becd != nil {
					return _becd
				}
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066 \u0025\u0076", _gacdf.Name)
				if _ggfd := d.Skip(); _ggfd != nil {
					return _ggfd
				}
			}
		case _a.EndElement:
			break _gecc
		case _a.CharData:
		}
	}
	return nil
}
func (_gddd *CT_SDDescription) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gddd.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_gddd.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _gddd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_aafb *ST_AnimOneStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_aafb = 0
	case "\u006e\u006f\u006e\u0065":
		*_aafb = 1
	case "\u006f\u006e\u0065":
		*_aafb = 2
	case "\u0062\u0072\u0061\u006e\u0063\u0068":
		*_aafb = 3
	}
	return nil
}
func (_ebca ST_ConnectorPoint) String() string {
	switch _ebca {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0062\u0043\u0074\u0072"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u006d\u0069\u0064\u004c"
	case 5:
		return "\u006d\u0069\u0064\u0052"
	case 6:
		return "\u0074\u0043\u0074\u0072"
	case 7:
		return "\u0062\u004c"
	case 8:
		return "\u0062\u0052"
	case 9:
		return "\u0074\u004c"
	case 10:
		return "\u0074\u0052"
	case 11:
		return "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return ""
}
func (_adbb *LayoutDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _adbb.CT_DiagramDefinitionHeaderLst.MarshalXML(e, start)
}

// Validate validates the CT_Description and its children
func (_bfadf *CT_Description) Validate() error {
	return _bfadf.ValidateWithPath("\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e")
}
func (_ffeec ST_VariableType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ffeec.String(), start)
}
func (_ebdce *CT_RelIds) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0064\u006d"}, Value: _bg.Sprintf("\u0025\u0076", _ebdce.DmAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u006c\u006f"}, Value: _bg.Sprintf("\u0025\u0076", _ebdce.LoAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0071\u0073"}, Value: _bg.Sprintf("\u0025\u0076", _ebdce.QsAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0063\u0073"}, Value: _bg.Sprintf("\u0025\u0076", _ebdce.CsAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bfff *RelIds) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bfff.CT_RelIds = *NewCT_RelIds()
	for _, _ccgdba := range start.Attr {
		if _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u0064\u006d" || _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u0064\u006d" {
			_aeeb, _gbeg := _ccgdba.Value, error(nil)
			if _gbeg != nil {
				return _gbeg
			}
			_bfff.DmAttr = _aeeb
			continue
		}
		if _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u006c\u006f" || _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u006c\u006f" {
			_fbbc, _dfca := _ccgdba.Value, error(nil)
			if _dfca != nil {
				return _dfca
			}
			_bfff.LoAttr = _fbbc
			continue
		}
		if _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u0071\u0073" || _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u0071\u0073" {
			_abdd, _aaac := _ccgdba.Value, error(nil)
			if _aaac != nil {
				return _aaac
			}
			_bfff.QsAttr = _abdd
			continue
		}
		if _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u0063\u0073" || _ccgdba.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ccgdba.Name.Local == "\u0063\u0073" {
			_cgde, _ceba := _ccgdba.Value, error(nil)
			if _ceba != nil {
				return _ceba
			}
			_bfff.CsAttr = _cgde
			continue
		}
	}
	for {
		_fbef, _dgae := d.Token()
		if _dgae != nil {
			return _bg.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0052e\u006c\u0049d\u0073\u003a\u0020\u0025\u0073", _dgae)
		}
		if _dcac, _dacad := _fbef.(_a.EndElement); _dacad && _dcac.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ResizeHandles and its children, prefixing error messages with path
func (_dbcbb *CT_ResizeHandles) ValidateWithPath(path string) error {
	if _cfdgb := _dbcbb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfdgb != nil {
		return _cfdgb
	}
	return nil
}
func (_gdebe ST_NodeHorizontalAlignment) String() string {
	switch _gdebe {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}
func (_fbe *CT_CTStyleLabel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", _fbe.NameAttr)})
	e.EncodeToken(start)
	if _fbe.FillClrLst != nil {
		_ddeg := _a.StartElement{Name: _a.Name{Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_fbe.FillClrLst, _ddeg)
	}
	if _fbe.LinClrLst != nil {
		_cdfb := _a.StartElement{Name: _a.Name{Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}}
		e.EncodeElement(_fbe.LinClrLst, _cdfb)
	}
	if _fbe.EffectClrLst != nil {
		_fff := _a.StartElement{Name: _a.Name{Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_fbe.EffectClrLst, _fff)
	}
	if _fbe.TxLinClrLst != nil {
		_geg := _a.StartElement{Name: _a.Name{Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_fbe.TxLinClrLst, _geg)
	}
	if _fbe.TxFillClrLst != nil {
		_acf := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_fbe.TxFillClrLst, _acf)
	}
	if _fbe.TxEffectClrLst != nil {
		_fcg := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_fbe.TxEffectClrLst, _fcg)
	}
	if _fbe.ExtLst != nil {
		_bgeb := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbe.ExtLst, _bgeb)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_baacc *ST_ChildDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_geaba, _efee := d.Token()
	if _efee != nil {
		return _efee
	}
	if _eegd, _abeff := _geaba.(_a.EndElement); _abeff && _eegd.Name == start.Name {
		*_baacc = 1
		return nil
	}
	if _ddcb, _debag := _geaba.(_a.CharData); !_debag {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _geaba)
	} else {
		switch string(_ddcb) {
		case "":
			*_baacc = 0
		case "\u0068\u006f\u0072\u007a":
			*_baacc = 1
		case "\u0076\u0065\u0072\u0074":
			*_baacc = 2
		}
	}
	_geaba, _efee = d.Token()
	if _efee != nil {
		return _efee
	}
	if _daadd, _bccd := _geaba.(_a.EndElement); _bccd && _daadd.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _geaba)
}
func (_fbbg *CT_Pt) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _beca := range start.Attr {
		if _beca.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_bbeb, _fcda := ParseUnionST_ModelId(_beca.Value)
			if _fcda != nil {
				return _fcda
			}
			_fbbg.ModelIdAttr = _bbeb
			continue
		}
		if _beca.Name.Local == "\u0074\u0079\u0070\u0065" {
			_fbbg.TypeAttr.UnmarshalXMLAttr(_beca)
			continue
		}
		if _beca.Name.Local == "\u0063\u0078\u006eI\u0064" {
			_afdcd, _ggdc := ParseUnionST_ModelId(_beca.Value)
			if _ggdc != nil {
				return _ggdc
			}
			_fbbg.CxnIdAttr = &_afdcd
			continue
		}
	}
_eccb:
	for {
		_gfbd, _caaac := d.Token()
		if _caaac != nil {
			return _caaac
		}
		switch _cgfd := _gfbd.(type) {
		case _a.StartElement:
			switch _cgfd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0053e\u0074"}:
				_fbbg.PrSet = NewCT_ElemPropSet()
				if _cbge := d.DecodeElement(_fbbg.PrSet, &_cgfd); _cbge != nil {
					return _cbge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0050\u0072"}:
				_fbbg.SpPr = _bb.NewCT_ShapeProperties()
				if _fdeb := d.DecodeElement(_fbbg.SpPr, &_cgfd); _fdeb != nil {
					return _fdeb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074"}:
				_fbbg.T = _bb.NewCT_TextBody()
				if _ebaa := d.DecodeElement(_fbbg.T, &_cgfd); _ebaa != nil {
					return _ebaa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbbg.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _cddge := d.DecodeElement(_fbbg.ExtLst, &_cgfd); _cddge != nil {
					return _cddge
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fP\u0074 \u0025\u0076", _cgfd.Name)
				if _dgde := d.Skip(); _dgde != nil {
					return _dgde
				}
			}
		case _a.EndElement:
			break _eccb
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the AG_ConstraintAttributes and its children
func (_bc *AG_ConstraintAttributes) Validate() error {
	return _bc.ValidateWithPath("\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073")
}
func (_cfbd *ST_AlgorithmType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cfbd = 0
	case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
		*_cfbd = 1
	case "\u0063\u006f\u006e\u006e":
		*_cfbd = 2
	case "\u0063\u0079\u0063l\u0065":
		*_cfbd = 3
	case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
		*_cfbd = 4
	case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
		*_cfbd = 5
	case "\u0070\u0079\u0072\u0061":
		*_cfbd = 6
	case "\u006c\u0069\u006e":
		*_cfbd = 7
	case "\u0073\u0070":
		*_cfbd = 8
	case "\u0074\u0078":
		*_cfbd = 9
	case "\u0073\u006e\u0061k\u0065":
		*_cfbd = 10
	}
	return nil
}

// Validate validates the CT_ChildPref and its children
func (_cgee *CT_ChildPref) Validate() error {
	return _cgee.ValidateWithPath("\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066")
}
func (_bgbgc ST_LayoutShapeType) String() string {
	if _bgbgc.ST_ShapeType != _bb.ST_ShapeTypeUnset {
		return _bgbgc.ST_ShapeType.String()
	}
	if _bgbgc.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		return _bgbgc.ST_OutputShapeType.String()
	}
	return ""
}

type StyleDefHdr struct{ CT_StyleDefinitionHeader }
type CT_StyleLabel struct {
	NameAttr string
	Scene3d  *_bb.CT_Scene3D
	Sp3d     *_bb.CT_Shape3D
	TxPr     *CT_TextProps
	Style    *_bb.CT_ShapeStyle
	ExtLst   *_bb.CT_OfficeArtExtensionList
}

func (_eeedc *ST_CxnType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eeedc = 0
	case "\u0070\u0061\u0072O\u0066":
		*_eeedc = 1
	case "\u0070\u0072\u0065\u0073\u004f\u0066":
		*_eeedc = 2
	case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
		*_eeedc = 3
	case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
		*_eeedc = 4
	}
	return nil
}

// ValidateWithPath validates the CT_ColorTransformHeader and its children, prefixing error messages with path
func (_agg *CT_ColorTransformHeader) ValidateWithPath(path string) error {
	for _eff, _cabe := range _agg.Title {
		if _dgbb := _cabe.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _eff)); _dgbb != nil {
			return _dgbb
		}
	}
	for _feba, _ddgg := range _agg.Desc {
		if _eede := _ddgg.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _feba)); _eede != nil {
			return _eede
		}
	}
	if _agg.CatLst != nil {
		if _efd := _agg.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _efd != nil {
			return _efd
		}
	}
	if _agg.ExtLst != nil {
		if _dfff := _agg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfff != nil {
			return _dfff
		}
	}
	return nil
}
func (_gcede *ST_TextAnchorVertical) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gcede = 0
	case "\u0074":
		*_gcede = 1
	case "\u006d\u0069\u0064":
		*_gcede = 2
	case "\u0062":
		*_gcede = 3
	}
	return nil
}
func (_fcdg *ST_FunctionArgument) ValidateWithPath(path string) error {
	_cdcdc := []string{}
	if _fcdg.ST_VariableType != ST_VariableTypeUnset {
		_cdcdc = append(_cdcdc, "\u0053T\u005fV\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_cdcdc) > 1 {
		return _bg.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cdcdc)
	}
	return nil
}
func (_afdff ST_VerticalAlignment) Validate() error { return _afdff.ValidateWithPath("") }

type CT_Shape struct {
	RotAttr       *float64
	TypeAttr      *ST_LayoutShapeType
	BlipAttr      *string
	ZOrderOffAttr *int32
	HideGeomAttr  *bool
	LkTxEntryAttr *bool
	BlipPhldrAttr *bool
	AdjLst        *CT_AdjLst
	ExtLst        *_bb.CT_OfficeArtExtensionList
}

func (_dda *CT_CTName) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ege := range start.Attr {
		if _ege.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gba, _aaa := _ege.Value, error(nil)
			if _aaa != nil {
				return _aaa
			}
			_dda.LangAttr = &_gba
			continue
		}
		if _ege.Name.Local == "\u0076\u0061\u006c" {
			_adc, _ddca := _ege.Value, error(nil)
			if _ddca != nil {
				return _ddca
			}
			_dda.ValAttr = _adc
			continue
		}
	}
	for {
		_cdfd, _deg := d.Token()
		if _deg != nil {
			return _bg.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0043\u0054\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _deg)
		}
		if _gcc, _dgd := _cdfd.(_a.EndElement); _dgd && _gcc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aefe *StyleDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074"
	return _aefe.CT_StyleDefinitionHeaderLst.MarshalXML(e, start)
}

type ST_PyramidAccentPosition byte

// Validate validates the CT_ColorTransformHeaderLst and its children
func (_gecb *CT_ColorTransformHeaderLst) Validate() error {
	return _gecb.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074")
}

type CT_HierBranchStyle struct{ ValAttr ST_HierBranchStyle }

func (_afdb ST_TextAnchorVertical) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_afdb.String(), start)
}
func NewCT_ForEach() *CT_ForEach { _ffccg := &CT_ForEach{}; return _ffccg }
func (_gfeac *ST_PrSetCustVal) ValidateWithPath(path string) error {
	_fabg := []string{}
	if _gfeac.ST_Percentage != nil {
		_fabg = append(_fabg, "\u0053\u0054\u005f\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065")
	}
	if _gfeac.Int32 != nil {
		_fabg = append(_fabg, "\u0049\u006e\u00743\u0032")
	}
	if len(_fabg) > 1 {
		return _bg.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fabg)
	}
	return nil
}

// ValidateWithPath validates the CT_Rules and its children, prefixing error messages with path
func (_bedc *CT_Rules) ValidateWithPath(path string) error {
	for _dfab, _effef := range _bedc.Rule {
		if _fdde := _effef.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0052\u0075\u006c\u0065\u005b\u0025\u0064\u005d", path, _dfab)); _fdde != nil {
			return _fdde
		}
	}
	return nil
}
func (_efgf *CT_Constraint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _efgf.OpAttr != ST_BoolOperatorUnset {
		_egb, _ggde := _efgf.OpAttr.MarshalXMLAttr(_a.Name{Local: "\u006f\u0070"})
		if _ggde != nil {
			return _ggde
		}
		start.Attr = append(start.Attr, _egb)
	}
	if _efgf.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", *_efgf.ValAttr)})
	}
	if _efgf.FactAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_efgf.FactAttr)})
	}
	if _efgf.TypeAttr != ST_ConstraintTypeUnset {
		_aggc, _dac := _efgf.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _dac != nil {
			return _dac
		}
		start.Attr = append(start.Attr, _aggc)
	}
	if _efgf.ForAttr != ST_ConstraintRelationshipUnset {
		_gfdb, _bff := _efgf.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _bff != nil {
			return _bff
		}
		start.Attr = append(start.Attr, _gfdb)
	}
	if _efgf.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_efgf.ForNameAttr)})
	}
	if _efgf.PtTypeAttr != ST_ElementTypeUnset {
		_bfd, _fgdfa := _efgf.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _fgdfa != nil {
			return _fgdfa
		}
		start.Attr = append(start.Attr, _bfd)
	}
	if _efgf.RefTypeAttr != ST_ConstraintTypeUnset {
		_feeb, _ebad := _efgf.RefTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _ebad != nil {
			return _ebad
		}
		start.Attr = append(start.Attr, _feeb)
	}
	if _efgf.RefForAttr != ST_ConstraintRelationshipUnset {
		_gbed, _aacc := _efgf.RefForAttr.MarshalXMLAttr(_a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _aacc != nil {
			return _aacc
		}
		start.Attr = append(start.Attr, _gbed)
	}
	if _efgf.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_efgf.RefForNameAttr)})
	}
	if _efgf.RefPtTypeAttr != ST_ElementTypeUnset {
		_bfbc, _fgcg := _efgf.RefPtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _fgcg != nil {
			return _fgcg
		}
		start.Attr = append(start.Attr, _bfbc)
	}
	e.EncodeToken(start)
	if _efgf.ExtLst != nil {
		_befc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efgf.ExtLst, _befc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_HierarchyAlignment byte
type ST_CenterShapeMapping byte

func (_efaa ST_AlgorithmType) ValidateWithPath(path string) error {
	switch _efaa {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efaa))
	}
	return nil
}

// Validate validates the CT_Rules and its children
func (_cdcf *CT_Rules) Validate() error {
	return _cdcf.ValidateWithPath("\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073")
}
func (_edaa ST_AutoTextRotation) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbddf := _a.Attr{}
	_fbddf.Name = name
	switch _edaa {
	case ST_AutoTextRotationUnset:
		_fbddf.Value = ""
	case ST_AutoTextRotationNone:
		_fbddf.Value = "\u006e\u006f\u006e\u0065"
	case ST_AutoTextRotationUpr:
		_fbddf.Value = "\u0075\u0070\u0072"
	case ST_AutoTextRotationGrav:
		_fbddf.Value = "\u0067\u0072\u0061\u0076"
	}
	return _fbddf, nil
}
func (_gfceg *ST_AutoTextRotation) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efced, _bgdef := d.Token()
	if _bgdef != nil {
		return _bgdef
	}
	if _adgfa, _fccc := _efced.(_a.EndElement); _fccc && _adgfa.Name == start.Name {
		*_gfceg = 1
		return nil
	}
	if _babggd, _fbaaca := _efced.(_a.CharData); !_fbaaca {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _efced)
	} else {
		switch string(_babggd) {
		case "":
			*_gfceg = 0
		case "\u006e\u006f\u006e\u0065":
			*_gfceg = 1
		case "\u0075\u0070\u0072":
			*_gfceg = 2
		case "\u0067\u0072\u0061\u0076":
			*_gfceg = 3
		}
	}
	_efced, _bgdef = d.Token()
	if _bgdef != nil {
		return _bgdef
	}
	if _cfgbe, _bdec := _efced.(_a.EndElement); _bdec && _cfgbe.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _efced)
}
func (_gbef *CT_SDCategory) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", _gbef.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _bg.Sprintf("\u0025\u0076", _gbef.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_CxnList and its children, prefixing error messages with path
func (_gadc *CT_CxnList) ValidateWithPath(path string) error {
	for _dga, _dbeg := range _gadc.Cxn {
		if _efdg := _dbeg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0078\u006e\u005b\u0025\u0064\u005d", path, _dga)); _efdg != nil {
			return _efdg
		}
	}
	return nil
}
func (_fgeae ST_ConstraintType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgeae.String(), start)
}
func (_fggf ST_ConnectorDimension) String() string {
	switch _fggf {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	case 3:
		return "\u0063\u0075\u0073\u0074"
	}
	return ""
}

// ValidateWithPath validates the ColorsDefHdrLst and its children, prefixing error messages with path
func (_eaff *ColorsDefHdrLst) ValidateWithPath(path string) error {
	if _fefe := _eaff.CT_ColorTransformHeaderLst.ValidateWithPath(path); _fefe != nil {
		return _fefe
	}
	return nil
}

// Validate validates the CT_Cxn and its children
func (_bdfa *CT_Cxn) Validate() error {
	return _bdfa.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e")
}

// Validate validates the CT_ColorTransformHeader and its children
func (_ffc *CT_ColorTransformHeader) Validate() error {
	return _ffc.ValidateWithPath("\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072")
}
func (_acebc *ST_ChildOrderType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_acebc = 0
	case "\u0062":
		*_acebc = 1
	case "\u0074":
		*_acebc = 2
	}
	return nil
}
func (_begd *CT_Name) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _begd.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_begd.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _begd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type AG_ConstraintAttributes struct {
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

func (_gcba ST_SecondaryLinearDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gcba.String(), start)
}
func (_eggda ST_AlgorithmType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eggda.String(), start)
}
func (_agdca ST_PyramidAccentPosition) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fcge := _a.Attr{}
	_fcge.Name = name
	switch _agdca {
	case ST_PyramidAccentPositionUnset:
		_fcge.Value = ""
	case ST_PyramidAccentPositionBef:
		_fcge.Value = "\u0062\u0065\u0066"
	case ST_PyramidAccentPositionAft:
		_fcge.Value = "\u0061\u0066\u0074"
	}
	return _fcge, nil
}

// ValidateWithPath validates the ColorsDef and its children, prefixing error messages with path
func (_ggad *ColorsDef) ValidateWithPath(path string) error {
	if _fffg := _ggad.CT_ColorTransform.ValidateWithPath(path); _fffg != nil {
		return _fffg
	}
	return nil
}

const (
	ST_CenterShapeMappingUnset ST_CenterShapeMapping = 0
	ST_CenterShapeMappingNone  ST_CenterShapeMapping = 1
	ST_CenterShapeMappingFNode ST_CenterShapeMapping = 2
)

type ST_RotationPath byte

func ParseSliceST_Ints(s string) (ST_Ints, error) { return ST_Ints{}, nil }
func (_dcgb ST_DiagramHorizontalAlignment) String() string {
	switch _dcgb {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

type ST_AnimLvlStr byte

// ST_FunctionArgument is a union type
type ST_FunctionArgument struct{ ST_VariableType ST_VariableType }

func NewCT_Name() *CT_Name { _cbgc := &CT_Name{}; return _cbgc }
func (_agfe ST_LinearDirection) ValidateWithPath(path string) error {
	switch _agfe {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agfe))
	}
	return nil
}
func (_dfbg *ST_Breakpoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfag, _acabc := d.Token()
	if _acabc != nil {
		return _acabc
	}
	if _fbge, _ggcb := _cfag.(_a.EndElement); _ggcb && _fbge.Name == start.Name {
		*_dfbg = 1
		return nil
	}
	if _ddbadd, _cefa := _cfag.(_a.CharData); !_cefa {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfag)
	} else {
		switch string(_ddbadd) {
		case "":
			*_dfbg = 0
		case "\u0065\u006e\u0064\u0043\u006e\u0076":
			*_dfbg = 1
		case "\u0062\u0061\u006c":
			*_dfbg = 2
		case "\u0066\u0069\u0078e\u0064":
			*_dfbg = 3
		}
	}
	_cfag, _acabc = d.Token()
	if _acabc != nil {
		return _acabc
	}
	if _dcdgd, _cbadb := _cfag.(_a.EndElement); _cbadb && _dcdgd.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfag)
}
func (_dfaef ST_Offset) String() string {
	switch _dfaef {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006f\u0066\u0066"
	}
	return ""
}
func (_gfgc *CT_NumericRule) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ceab := range start.Attr {
		if _ceab.Name.Local == "\u0076\u0061\u006c" {
			_cfdg, _dbbaa := _b.ParseFloat(_ceab.Value, 64)
			if _dbbaa != nil {
				return _dbbaa
			}
			_gfgc.ValAttr = &_cfdg
			continue
		}
		if _ceab.Name.Local == "\u0066\u0061\u0063\u0074" {
			_bbaab, _eab := _b.ParseFloat(_ceab.Value, 64)
			if _eab != nil {
				return _eab
			}
			_gfgc.FactAttr = &_bbaab
			continue
		}
		if _ceab.Name.Local == "\u006d\u0061\u0078" {
			_fgff, _agfaa := _b.ParseFloat(_ceab.Value, 64)
			if _agfaa != nil {
				return _agfaa
			}
			_gfgc.MaxAttr = &_fgff
			continue
		}
		if _ceab.Name.Local == "\u0074\u0079\u0070\u0065" {
			_gfgc.TypeAttr.UnmarshalXMLAttr(_ceab)
			continue
		}
		if _ceab.Name.Local == "\u0066\u006f\u0072" {
			_gfgc.ForAttr.UnmarshalXMLAttr(_ceab)
			continue
		}
		if _ceab.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_edfe, _agae := _ceab.Value, error(nil)
			if _agae != nil {
				return _agae
			}
			_gfgc.ForNameAttr = &_edfe
			continue
		}
		if _ceab.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_gfgc.PtTypeAttr.UnmarshalXMLAttr(_ceab)
			continue
		}
	}
_ggbeb:
	for {
		_ddbac, _eafef := d.Token()
		if _eafef != nil {
			return _eafef
		}
		switch _dfc := _ddbac.(type) {
		case _a.StartElement:
			switch _dfc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfgc.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _affddd := d.DecodeElement(_gfgc.ExtLst, &_dfc); _affddd != nil {
					return _affddd
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069\u0063R\u0075l\u0065\u0020\u0025\u0076", _dfc.Name)
				if _gaff := d.Skip(); _gaff != nil {
					return _gaff
				}
			}
		case _a.EndElement:
			break _ggbeb
		case _a.CharData:
		}
	}
	return nil
}

type LayoutDefHdrLst struct{ CT_DiagramDefinitionHeaderLst }

// ValidateWithPath validates the CT_LayoutVariablePropertySet and its children, prefixing error messages with path
func (_bddg *CT_LayoutVariablePropertySet) ValidateWithPath(path string) error {
	if _bddg.OrgChart != nil {
		if _dccdf := _bddg.OrgChart.ValidateWithPath(path + "\u002fO\u0072\u0067\u0043\u0068\u0061\u0072t"); _dccdf != nil {
			return _dccdf
		}
	}
	if _bddg.ChMax != nil {
		if _eacb := _bddg.ChMax.ValidateWithPath(path + "\u002f\u0043\u0068\u004d\u0061\u0078"); _eacb != nil {
			return _eacb
		}
	}
	if _bddg.ChPref != nil {
		if _bffe := _bddg.ChPref.ValidateWithPath(path + "\u002fC\u0068\u0050\u0072\u0065\u0066"); _bffe != nil {
			return _bffe
		}
	}
	if _bddg.BulletEnabled != nil {
		if _fbcc := _bddg.BulletEnabled.ValidateWithPath(path + "\u002f\u0042\u0075\u006c\u006c\u0065\u0074\u0045\u006ea\u0062\u006c\u0065\u0064"); _fbcc != nil {
			return _fbcc
		}
	}
	if _bddg.Dir != nil {
		if _fdg := _bddg.Dir.ValidateWithPath(path + "\u002f\u0044\u0069\u0072"); _fdg != nil {
			return _fdg
		}
	}
	if _bddg.HierBranch != nil {
		if _acb := _bddg.HierBranch.ValidateWithPath(path + "/\u0048\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"); _acb != nil {
			return _acb
		}
	}
	if _bddg.AnimOne != nil {
		if _agcd := _bddg.AnimOne.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004f\u006e\u0065"); _agcd != nil {
			return _agcd
		}
	}
	if _bddg.AnimLvl != nil {
		if _cfce := _bddg.AnimLvl.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004c\u0076\u006c"); _cfce != nil {
			return _cfce
		}
	}
	if _bddg.ResizeHandles != nil {
		if _acga := _bddg.ResizeHandles.ValidateWithPath(path + "\u002f\u0052\u0065\u0073\u0069\u007a\u0065\u0048\u0061n\u0064\u006c\u0065\u0073"); _acga != nil {
			return _acga
		}
	}
	return nil
}

// Validate validates the CT_NumericRule and its children
func (_dbdd *CT_NumericRule) Validate() error {
	return _dbdd.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065")
}
func NewCT_Colors() *CT_Colors { _cgbc := &CT_Colors{}; return _cgbc }
func (_bbcdf *ST_TextBlockDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fgef, _cdegb := d.Token()
	if _cdegb != nil {
		return _cdegb
	}
	if _fecd, _geedg := _fgef.(_a.EndElement); _geedg && _fecd.Name == start.Name {
		*_bbcdf = 1
		return nil
	}
	if _dbed, _beeg := _fgef.(_a.CharData); !_beeg {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgef)
	} else {
		switch string(_dbed) {
		case "":
			*_bbcdf = 0
		case "\u0068\u006f\u0072\u007a":
			*_bbcdf = 1
		case "\u0076\u0065\u0072\u0074":
			*_bbcdf = 2
		}
	}
	_fgef, _cdegb = d.Token()
	if _cdegb != nil {
		return _cdegb
	}
	if _ffgff, _afgeg := _fgef.(_a.EndElement); _afgeg && _ffgff.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgef)
}
func (_dbdac *LayoutDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dbdac.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
_gdfbf:
	for {
		_edab, _bdeg := d.Token()
		if _bdeg != nil {
			return _bdeg
		}
		switch _eabae := _edab.(type) {
		case _a.StartElement:
			switch _eabae.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_bded := NewCT_DiagramDefinitionHeader()
				if _bfead := d.DecodeElement(_bded, &_eabae); _bfead != nil {
					return _bfead
				}
				_dbdac.LayoutDefHdr = append(_dbdac.LayoutDefHdr, _bded)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _eabae.Name)
				if _fbag := d.Skip(); _fbag != nil {
					return _fbag
				}
			}
		case _a.EndElement:
			break _gdfbf
		case _a.CharData:
		}
	}
	return nil
}

type ST_AxisType byte

func (_ffaa ST_VerticalAlignment) String() string {
	switch _ffaa {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

type ST_UnsignedInts []uint32

// ValidateWithPath validates the CT_AnimOne and its children, prefixing error messages with path
func (_bcc *CT_AnimOne) ValidateWithPath(path string) error {
	if _fgd := _bcc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgd != nil {
		return _fgd
	}
	return nil
}
func (_fbecc ST_ConnectorRouting) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fbecc.String(), start)
}
func (_acgca *CT_StyleDefinitionHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ccff:
	for {
		_fbbbc, _acaee := d.Token()
		if _acaee != nil {
			return _acaee
		}
		switch _ebfd := _fbbbc.(type) {
		case _a.StartElement:
			switch _ebfd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_fcce := NewCT_StyleDefinitionHeader()
				if _fdec := d.DecodeElement(_fcce, &_ebfd); _fdec != nil {
					return _fdec
				}
				_acgca.StyleDefHdr = append(_acgca.StyleDefHdr, _fcce)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _ebfd.Name)
				if _fcbad := d.Skip(); _fcbad != nil {
					return _fcbad
				}
			}
		case _a.EndElement:
			break _ccff
		case _a.CharData:
		}
	}
	return nil
}

type ST_ResizeHandlesStr byte

func (_adg *AG_ConstraintAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fc := range start.Attr {
		if _fc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_adg.TypeAttr.UnmarshalXMLAttr(_fc)
			continue
		}
		if _fc.Name.Local == "\u0066\u006f\u0072" {
			_adg.ForAttr.UnmarshalXMLAttr(_fc)
			continue
		}
		if _fc.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_cf, _e := _fc.Value, error(nil)
			if _e != nil {
				return _e
			}
			_adg.ForNameAttr = &_cf
			continue
		}
		if _fc.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_adg.PtTypeAttr.UnmarshalXMLAttr(_fc)
			continue
		}
	}
	for {
		_cg, _ba := d.Token()
		if _ba != nil {
			return _bg.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0041\u0047\u005f\u0043\u006f\u006es\u0074\u0072\u0061\u0069\u006e\u0074\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073\u003a\u0020%\u0073", _ba)
		}
		if _bad, _eb := _cg.(_a.EndElement); _eb && _bad.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cabgf *StyleDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cabgf.CT_StyleDefinition = *NewCT_StyleDefinition()
	for _, _feag := range start.Attr {
		if _feag.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fdag, _gfcbe := _feag.Value, error(nil)
			if _gfcbe != nil {
				return _gfcbe
			}
			_cabgf.UniqueIdAttr = &_fdag
			continue
		}
		if _feag.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_geecc, _ddbf := _feag.Value, error(nil)
			if _ddbf != nil {
				return _ddbf
			}
			_cabgf.MinVerAttr = &_geecc
			continue
		}
	}
_ebcd:
	for {
		_beef, _gdgea := d.Token()
		if _gdgea != nil {
			return _gdgea
		}
		switch _ebffe := _beef.(type) {
		case _a.StartElement:
			switch _ebffe.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_bdee := NewCT_SDName()
				if _bdcc := d.DecodeElement(_bdee, &_ebffe); _bdcc != nil {
					return _bdcc
				}
				_cabgf.Title = append(_cabgf.Title, _bdee)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_ggegb := NewCT_SDDescription()
				if _badgb := d.DecodeElement(_ggegb, &_ebffe); _badgb != nil {
					return _badgb
				}
				_cabgf.Desc = append(_cabgf.Desc, _ggegb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_cabgf.CatLst = NewCT_SDCategories()
				if _beebe := d.DecodeElement(_cabgf.CatLst, &_ebffe); _beebe != nil {
					return _beebe
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_cabgf.Scene3d = _bb.NewCT_Scene3D()
				if _adcde := d.DecodeElement(_cabgf.Scene3d, &_ebffe); _adcde != nil {
					return _adcde
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_eaga := NewCT_StyleLabel()
				if _gfad := d.DecodeElement(_eaga, &_ebffe); _gfad != nil {
					return _gfad
				}
				_cabgf.StyleLbl = append(_cabgf.StyleLbl, _eaga)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cabgf.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _fegad := d.DecodeElement(_cabgf.ExtLst, &_ebffe); _fegad != nil {
					return _fegad
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0020\u0025\u0076", _ebffe.Name)
				if _bdgg := d.Skip(); _bdgg != nil {
					return _bdgg
				}
			}
		case _a.EndElement:
			break _ebcd
		case _a.CharData:
		}
	}
	return nil
}
func (_dadf *CT_StyleDefinition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dadf.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_dadf.UniqueIdAttr)})
	}
	if _dadf.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _bg.Sprintf("\u0025\u0076", *_dadf.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _dadf.Title != nil {
		_eccc := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _bcad := range _dadf.Title {
			e.EncodeElement(_bcad, _eccc)
		}
	}
	if _dadf.Desc != nil {
		_fgbf := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _acbb := range _dadf.Desc {
			e.EncodeElement(_acbb, _fgbf)
		}
	}
	if _dadf.CatLst != nil {
		_ceef := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dadf.CatLst, _ceef)
	}
	if _dadf.Scene3d != nil {
		_dbcbba := _a.StartElement{Name: _a.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_dadf.Scene3d, _dbcbba)
	}
	_gbda := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
	for _, _geca := range _dadf.StyleLbl {
		e.EncodeElement(_geca, _gbda)
	}
	if _dadf.ExtLst != nil {
		_gcgg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dadf.ExtLst, _gcgg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cbad ST_FunctionType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cbad.String(), start)
}
func (_fgaeb ST_Breakpoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgaeb.String(), start)
}
func (_cbagb ST_AnimLvlStr) Validate() error { return _cbagb.ValidateWithPath("") }
func (_ebdb ST_ElementType) String() string {
	switch _ebdb {
	case 0:
		return ""
	case 1:
		return "\u0061\u006c\u006c"
	case 2:
		return "\u0064\u006f\u0063"
	case 3:
		return "\u006e\u006f\u0064\u0065"
	case 4:
		return "\u006e\u006f\u0072\u006d"
	case 5:
		return "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case 6:
		return "\u0061\u0073\u0073\u0074"
	case 7:
		return "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case 8:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 9:
		return "\u0070\u0072\u0065\u0073"
	case 10:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}

// Validate validates the AG_ConstraintRefAttributes and its children
func (_ed *AG_ConstraintRefAttributes) Validate() error {
	return _ed.ValidateWithPath("\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073")
}
func NewCT_LayoutVariablePropertySet() *CT_LayoutVariablePropertySet {
	_fbcb := &CT_LayoutVariablePropertySet{}
	return _fbcb
}
func ParseUnionST_ParameterVal(s string) (ST_ParameterVal, error) { return ST_ParameterVal{}, nil }
func (_ffdg *ST_GrowDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ddge, _aagb := d.Token()
	if _aagb != nil {
		return _aagb
	}
	if _cefcf, _affg := _ddge.(_a.EndElement); _affg && _cefcf.Name == start.Name {
		*_ffdg = 1
		return nil
	}
	if _cbeed, _dbge := _ddge.(_a.CharData); !_dbge {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddge)
	} else {
		switch string(_cbeed) {
		case "":
			*_ffdg = 0
		case "\u0074\u004c":
			*_ffdg = 1
		case "\u0074\u0052":
			*_ffdg = 2
		case "\u0062\u004c":
			*_ffdg = 3
		case "\u0062\u0052":
			*_ffdg = 4
		}
	}
	_ddge, _aagb = d.Token()
	if _aagb != nil {
		return _aagb
	}
	if _egbg, _accag := _ddge.(_a.EndElement); _accag && _egbg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddge)
}
func (_dece ST_FallbackDimension) ValidateWithPath(path string) error {
	switch _dece {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dece))
	}
	return nil
}
func (_adbd ST_BendPoint) Validate() error { return _adbd.ValidateWithPath("") }

const (
	ST_ElementTypeUnset    ST_ElementType = 0
	ST_ElementTypeAll      ST_ElementType = 1
	ST_ElementTypeDoc      ST_ElementType = 2
	ST_ElementTypeNode     ST_ElementType = 3
	ST_ElementTypeNorm     ST_ElementType = 4
	ST_ElementTypeNonNorm  ST_ElementType = 5
	ST_ElementTypeAsst     ST_ElementType = 6
	ST_ElementTypeNonAsst  ST_ElementType = 7
	ST_ElementTypeParTrans ST_ElementType = 8
	ST_ElementTypePres     ST_ElementType = 9
	ST_ElementTypeSibTrans ST_ElementType = 10
)
const (
	ST_HierarchyAlignmentUnset   ST_HierarchyAlignment = 0
	ST_HierarchyAlignmentTL      ST_HierarchyAlignment = 1
	ST_HierarchyAlignmentTR      ST_HierarchyAlignment = 2
	ST_HierarchyAlignmentTCtrCh  ST_HierarchyAlignment = 3
	ST_HierarchyAlignmentTCtrDes ST_HierarchyAlignment = 4
	ST_HierarchyAlignmentBL      ST_HierarchyAlignment = 5
	ST_HierarchyAlignmentBR      ST_HierarchyAlignment = 6
	ST_HierarchyAlignmentBCtrCh  ST_HierarchyAlignment = 7
	ST_HierarchyAlignmentBCtrDes ST_HierarchyAlignment = 8
	ST_HierarchyAlignmentLT      ST_HierarchyAlignment = 9
	ST_HierarchyAlignmentLB      ST_HierarchyAlignment = 10
	ST_HierarchyAlignmentLCtrCh  ST_HierarchyAlignment = 11
	ST_HierarchyAlignmentLCtrDes ST_HierarchyAlignment = 12
	ST_HierarchyAlignmentRT      ST_HierarchyAlignment = 13
	ST_HierarchyAlignmentRB      ST_HierarchyAlignment = 14
	ST_HierarchyAlignmentRCtrCh  ST_HierarchyAlignment = 15
	ST_HierarchyAlignmentRCtrDes ST_HierarchyAlignment = 16
)

type CT_RelIds struct {
	DmAttr string
	LoAttr string
	QsAttr string
	CsAttr string
}

func (_bbee ST_ResizeHandlesStr) String() string {
	switch _bbee {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0061c\u0074"
	case 2:
		return "\u0072\u0065\u006c"
	}
	return ""
}
func (_fbed *ST_ConstraintType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fbed = 0
	case "\u006e\u006f\u006e\u0065":
		*_fbed = 1
	case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
		*_fbed = 2
	case "\u0062e\u0067\u004d\u0061\u0072\u0067":
		*_fbed = 3
	case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
		*_fbed = 4
	case "\u0062\u0065\u0067\u0050\u0061\u0064":
		*_fbed = 5
	case "\u0062":
		*_fbed = 6
	case "\u0062\u004d\u0061r\u0067":
		*_fbed = 7
	case "\u0062\u004f\u0066\u0066":
		*_fbed = 8
	case "\u0063\u0074\u0072\u0058":
		*_fbed = 9
	case "\u0063t\u0072\u0058\u004f\u0066\u0066":
		*_fbed = 10
	case "\u0063\u0074\u0072\u0059":
		*_fbed = 11
	case "\u0063t\u0072\u0059\u004f\u0066\u0066":
		*_fbed = 12
	case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
		*_fbed = 13
	case "\u0064\u0069\u0061\u006d":
		*_fbed = 14
	case "\u0065n\u0064\u004d\u0061\u0072\u0067":
		*_fbed = 15
	case "\u0065\u006e\u0064\u0050\u0061\u0064":
		*_fbed = 16
	case "\u0068":
		*_fbed = 17
	case "\u0068\u0041\u0072\u0048":
		*_fbed = 18
	case "\u0068\u004f\u0066\u0066":
		*_fbed = 19
	case "\u006c":
		*_fbed = 20
	case "\u006c\u004d\u0061r\u0067":
		*_fbed = 21
	case "\u006c\u004f\u0066\u0066":
		*_fbed = 22
	case "\u0072":
		*_fbed = 23
	case "\u0072\u004d\u0061r\u0067":
		*_fbed = 24
	case "\u0072\u004f\u0066\u0066":
		*_fbed = 25
	case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
		*_fbed = 26
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
		*_fbed = 27
	case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
		*_fbed = 28
	case "\u0073\u0069\u0062S\u0070":
		*_fbed = 29
	case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
		*_fbed = 30
	case "\u0073\u0070":
		*_fbed = 31
	case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
		*_fbed = 32
	case "\u0074":
		*_fbed = 33
	case "\u0074\u004d\u0061r\u0067":
		*_fbed = 34
	case "\u0074\u004f\u0066\u0066":
		*_fbed = 35
	case "\u0075\u0073\u0065r\u0041":
		*_fbed = 36
	case "\u0075\u0073\u0065r\u0042":
		*_fbed = 37
	case "\u0075\u0073\u0065r\u0043":
		*_fbed = 38
	case "\u0075\u0073\u0065r\u0044":
		*_fbed = 39
	case "\u0075\u0073\u0065r\u0045":
		*_fbed = 40
	case "\u0075\u0073\u0065r\u0046":
		*_fbed = 41
	case "\u0075\u0073\u0065r\u0047":
		*_fbed = 42
	case "\u0075\u0073\u0065r\u0048":
		*_fbed = 43
	case "\u0075\u0073\u0065r\u0049":
		*_fbed = 44
	case "\u0075\u0073\u0065r\u004a":
		*_fbed = 45
	case "\u0075\u0073\u0065r\u004b":
		*_fbed = 46
	case "\u0075\u0073\u0065r\u004c":
		*_fbed = 47
	case "\u0075\u0073\u0065r\u004d":
		*_fbed = 48
	case "\u0075\u0073\u0065r\u004e":
		*_fbed = 49
	case "\u0075\u0073\u0065r\u004f":
		*_fbed = 50
	case "\u0075\u0073\u0065r\u0050":
		*_fbed = 51
	case "\u0075\u0073\u0065r\u0051":
		*_fbed = 52
	case "\u0075\u0073\u0065r\u0052":
		*_fbed = 53
	case "\u0075\u0073\u0065r\u0053":
		*_fbed = 54
	case "\u0075\u0073\u0065r\u0054":
		*_fbed = 55
	case "\u0075\u0073\u0065r\u0055":
		*_fbed = 56
	case "\u0075\u0073\u0065r\u0056":
		*_fbed = 57
	case "\u0075\u0073\u0065r\u0057":
		*_fbed = 58
	case "\u0075\u0073\u0065r\u0058":
		*_fbed = 59
	case "\u0075\u0073\u0065r\u0059":
		*_fbed = 60
	case "\u0075\u0073\u0065r\u005a":
		*_fbed = 61
	case "\u0077":
		*_fbed = 62
	case "\u0077\u0041\u0072\u0048":
		*_fbed = 63
	case "\u0077\u004f\u0066\u0066":
		*_fbed = 64
	}
	return nil
}
func (_eagd *DataModel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_eagd.CT_DataModel = *NewCT_DataModel()
_cedcg:
	for {
		_bfaf, _ceafc := d.Token()
		if _ceafc != nil {
			return _ceafc
		}
		switch _eagb := _bfaf.(type) {
		case _a.StartElement:
			switch _eagb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _gadbb := d.DecodeElement(_eagd.PtLst, &_eagb); _gadbb != nil {
					return _gadbb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_eagd.CxnLst = NewCT_CxnList()
				if _fgeed := d.DecodeElement(_eagd.CxnLst, &_eagb); _fgeed != nil {
					return _fgeed
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_eagd.Bg = _bb.NewCT_BackgroundFormatting()
				if _gbafc := d.DecodeElement(_eagd.Bg, &_eagb); _gbafc != nil {
					return _gbafc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_eagd.Whole = _bb.NewCT_WholeE2oFormatting()
				if _fefg := d.DecodeElement(_eagd.Whole, &_eagb); _fefg != nil {
					return _fefg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eagd.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _egcg := d.DecodeElement(_eagd.ExtLst, &_eagb); _egcg != nil {
					return _egcg
				}
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0044\u0061\u0074\u0061\u004d\u006fd\u0065\u006c \u0025\u0076", _eagb.Name)
				if _fcdf := d.Skip(); _fcdf != nil {
					return _fcdf
				}
			}
		case _a.EndElement:
			break _cedcg
		case _a.CharData:
		}
	}
	return nil
}
func (_acbc ST_ClrAppMethod) Validate() error { return _acbc.ValidateWithPath("") }

type ST_HueDir byte

// ST_FunctionValue is a union type
type ST_FunctionValue struct {
	Int32               *int32
	Bool                *bool
	ST_Direction        ST_Direction
	ST_HierBranchStyle  ST_HierBranchStyle
	ST_AnimOneStr       ST_AnimOneStr
	ST_AnimLvlStr       ST_AnimLvlStr
	ST_ResizeHandlesStr ST_ResizeHandlesStr
}

func (_ebfc ST_TextAnchorVertical) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fabbd := _a.Attr{}
	_fabbd.Name = name
	switch _ebfc {
	case ST_TextAnchorVerticalUnset:
		_fabbd.Value = ""
	case ST_TextAnchorVerticalT:
		_fabbd.Value = "\u0074"
	case ST_TextAnchorVerticalMid:
		_fabbd.Value = "\u006d\u0069\u0064"
	case ST_TextAnchorVerticalB:
		_fabbd.Value = "\u0062"
	}
	return _fabbd, nil
}
func (_ddgb ST_ConnectorRouting) ValidateWithPath(path string) error {
	switch _ddgb {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ddgb))
	}
	return nil
}

// Validate validates the CT_Algorithm and its children
func (_abbb *CT_Algorithm) Validate() error {
	return _abbb.ValidateWithPath("\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d")
}
func NewCT_SDCategories() *CT_SDCategories { _fbafb := &CT_SDCategories{}; return _fbafb }

type ST_VerticalAlignment byte

func (_bbbeb *StyleDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bbbeb.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
_efacc:
	for {
		_dbgd, _eabe := d.Token()
		if _eabe != nil {
			return _eabe
		}
		switch _gdfd := _dbgd.(type) {
		case _a.StartElement:
			switch _gdfd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_eae := NewCT_StyleDefinitionHeader()
				if _adcb := d.DecodeElement(_eae, &_gdfd); _adcb != nil {
					return _adcb
				}
				_bbbeb.StyleDefHdr = append(_bbbeb.StyleDefHdr, _eae)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064r\u004cs\u0074\u0020\u0025\u0076", _gdfd.Name)
				if _ecebe := d.Skip(); _ecebe != nil {
					return _ecebe
				}
			}
		case _a.EndElement:
			break _efacc
		case _a.CharData:
		}
	}
	return nil
}
func (_fegac *ST_ArrowheadStyle) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fegac = 0
	case "\u0061\u0075\u0074\u006f":
		*_fegac = 1
	case "\u0061\u0072\u0072":
		*_fegac = 2
	case "\u006e\u006f\u0041r\u0072":
		*_fegac = 3
	}
	return nil
}

// ValidateWithPath validates the DataModel and its children, prefixing error messages with path
func (_baec *DataModel) ValidateWithPath(path string) error {
	if _egda := _baec.CT_DataModel.ValidateWithPath(path); _egda != nil {
		return _egda
	}
	return nil
}
func NewCT_RelIds() *CT_RelIds                           { _bfgab := &CT_RelIds{}; return _bfgab }
func NewCT_PresentationOf() *CT_PresentationOf           { _bfgg := &CT_PresentationOf{}; return _bfgg }
func (_faacb ST_RotationPath) Validate() error           { return _faacb.ValidateWithPath("") }
func (_fcec ST_SecondaryChildAlignment) Validate() error { return _fcec.ValidateWithPath("") }
func (_gc *AG_ConstraintRefAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dc := range start.Attr {
		if _dc.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_gc.RefTypeAttr.UnmarshalXMLAttr(_dc)
			continue
		}
		if _dc.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_gc.RefForAttr.UnmarshalXMLAttr(_dc)
			continue
		}
		if _dc.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_db, _gf := _dc.Value, error(nil)
			if _gf != nil {
				return _gf
			}
			_gc.RefForNameAttr = &_db
			continue
		}
		if _dc.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_gc.RefPtTypeAttr.UnmarshalXMLAttr(_dc)
			continue
		}
	}
	for {
		_ef, _dd := d.Token()
		if _dd != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0052\u0065\u0066A\u0074\u0074\u0072\u0069\u0062u\u0074\u0065s\u003a\u0020\u0025\u0073", _dd)
		}
		if _ae, _fd := _ef.(_a.EndElement); _fd && _ae.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CTName and its children, prefixing error messages with path
func (_ggg *CT_CTName) ValidateWithPath(path string) error { return nil }
func (_badb ST_ContinueDirection) ValidateWithPath(path string) error {
	switch _badb {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_badb))
	}
	return nil
}
func (_dbae ST_NodeVerticalAlignment) ValidateWithPath(path string) error {
	switch _dbae {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbae))
	}
	return nil
}

type CT_ColorTransformHeaderLst struct{ ColorsDefHdr []*CT_ColorTransformHeader }

func (_gdbea *CT_SampleData) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gdbea.UseDefAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u0073\u0065\u0044\u0065\u0066"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_gdbea.UseDefAttr))})
	}
	e.EncodeToken(start)
	if _gdbea.DataModel != nil {
		_dfgfda := _a.StartElement{Name: _a.Name{Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}}
		e.EncodeElement(_gdbea.DataModel, _dfgfda)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TextBlockDirectionUnset ST_TextBlockDirection = 0
	ST_TextBlockDirectionHorz  ST_TextBlockDirection = 1
	ST_TextBlockDirectionVert  ST_TextBlockDirection = 2
)

type CT_PresentationOf struct {
	ExtLst            *_bb.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_edgd ST_TextDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_edgd.String(), start)
}
func (_geecd ST_ContinueDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_geecd.String(), start)
}

// Validate validates the CT_RelIds and its children
func (_dbadb *CT_RelIds) Validate() error {
	return _dbadb.ValidateWithPath("\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s")
}

type CT_Rules struct{ Rule []*CT_NumericRule }

// Validate validates the CT_Choose and its children
func (_fcaa *CT_Choose) Validate() error {
	return _fcaa.ValidateWithPath("\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e")
}
func (_dgbea *ColorsDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dgbea.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	for _, _bbgeb := range start.Attr {
		if _bbgeb.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fcff, _abcce := _bbgeb.Value, error(nil)
			if _abcce != nil {
				return _abcce
			}
			_dgbea.UniqueIdAttr = _fcff
			continue
		}
		if _bbgeb.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cdfea, _aceg := _bbgeb.Value, error(nil)
			if _aceg != nil {
				return _aceg
			}
			_dgbea.MinVerAttr = &_cdfea
			continue
		}
		if _bbgeb.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_cfdbd, _aabbg := _b.ParseInt(_bbgeb.Value, 10, 32)
			if _aabbg != nil {
				return _aabbg
			}
			_ebed := int32(_cfdbd)
			_dgbea.ResIdAttr = &_ebed
			continue
		}
	}
_ffcg:
	for {
		_dgefd, _ccfda := d.Token()
		if _ccfda != nil {
			return _ccfda
		}
		switch _gbec := _dgefd.(type) {
		case _a.StartElement:
			switch _gbec.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cfbge := NewCT_CTName()
				if _eedd := d.DecodeElement(_cfbge, &_gbec); _eedd != nil {
					return _eedd
				}
				_dgbea.Title = append(_dgbea.Title, _cfbge)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_edeg := NewCT_CTDescription()
				if _bgbg := d.DecodeElement(_edeg, &_gbec); _bgbg != nil {
					return _bgbg
				}
				_dgbea.Desc = append(_dgbea.Desc, _edeg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dgbea.CatLst = NewCT_CTCategories()
				if _bcce := d.DecodeElement(_dgbea.CatLst, &_gbec); _bcce != nil {
					return _bcce
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dgbea.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _ebdcf := d.DecodeElement(_dgbea.ExtLst, &_gbec); _ebdcf != nil {
					return _ebdcf
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u006flo\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _gbec.Name)
				if _cbb := d.Skip(); _cbb != nil {
					return _cbb
				}
			}
		case _a.EndElement:
			break _ffcg
		case _a.CharData:
		}
	}
	return nil
}

type ST_ChildAlignment byte

// ValidateWithPath validates the CT_Categories and its children, prefixing error messages with path
func (_bgc *CT_Categories) ValidateWithPath(path string) error {
	for _cceeg, _babd := range _bgc.Cat {
		if _dagd := _babd.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _cceeg)); _dagd != nil {
			return _dagd
		}
	}
	return nil
}
func (_bceed ST_ElementType) ValidateWithPath(path string) error {
	switch _bceed {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bceed))
	}
	return nil
}

const (
	ST_HueDirUnset ST_HueDir = 0
	ST_HueDirCw    ST_HueDir = 1
	ST_HueDirCcw   ST_HueDir = 2
)

type CT_ChildMax struct{ ValAttr *int32 }

func (_aefbe *ST_LayoutShapeType) ValidateWithPath(path string) error {
	_cadgf := []string{}
	if _aefbe.ST_ShapeType != _bb.ST_ShapeTypeUnset {
		_cadgf = append(_cadgf, "\u0053\u0054\u005fS\u0068\u0061\u0070\u0065\u0054\u0079\u0070\u0065")
	}
	if _aefbe.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		_cadgf = append(_cadgf, "\u0053T\u005fO\u0075\u0074\u0070\u0075\u0074S\u0068\u0061p\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_cadgf) > 1 {
		return _bg.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cadgf)
	}
	return nil
}
func (_dcfdf *ST_ConnectorRouting) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bdfb, _agbec := d.Token()
	if _agbec != nil {
		return _agbec
	}
	if _dfcca, _ebdbd := _bdfb.(_a.EndElement); _ebdbd && _dfcca.Name == start.Name {
		*_dcfdf = 1
		return nil
	}
	if _gbdff, _efcb := _bdfb.(_a.CharData); !_efcb {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdfb)
	} else {
		switch string(_gbdff) {
		case "":
			*_dcfdf = 0
		case "\u0073\u0074\u0072\u0061":
			*_dcfdf = 1
		case "\u0062\u0065\u006e\u0064":
			*_dcfdf = 2
		case "\u0063\u0075\u0072v\u0065":
			*_dcfdf = 3
		case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
			*_dcfdf = 4
		}
	}
	_bdfb, _agbec = d.Token()
	if _agbec != nil {
		return _agbec
	}
	if _cfegf, _gdbef := _bdfb.(_a.EndElement); _gdbef && _cfegf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdfb)
}
func (_daade *CT_ColorTransformHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _daade.ColorsDefHdr != nil {
		_gcb := _a.StartElement{Name: _a.Name{Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _edc := range _daade.ColorsDefHdr {
			e.EncodeElement(_edc, _gcb)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gddag *ST_VariableType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gddag = 0
	case "\u006e\u006f\u006e\u0065":
		*_gddag = 1
	case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
		*_gddag = 2
	case "\u0063\u0068\u004da\u0078":
		*_gddag = 3
	case "\u0063\u0068\u0050\u0072\u0065\u0066":
		*_gddag = 4
	case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
		*_gddag = 5
	case "\u0064\u0069\u0072":
		*_gddag = 6
	case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
		*_gddag = 7
	case "\u0061n\u0069\u006d\u004f\u006e\u0065":
		*_gddag = 8
	case "\u0061n\u0069\u006d\u004c\u0076\u006c":
		*_gddag = 9
	case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
		*_gddag = 10
	}
	return nil
}

// Validate validates the CT_CTStyleLabel and its children
func (_gbd *CT_CTStyleLabel) Validate() error {
	return _gbd.ValidateWithPath("\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}
func (_dab *CT_ColorTransform) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dab.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_dab.UniqueIdAttr)})
	}
	if _dab.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _bg.Sprintf("\u0025\u0076", *_dab.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _dab.Title != nil {
		_gdbe := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _bcea := range _dab.Title {
			e.EncodeElement(_bcea, _gdbe)
		}
	}
	if _dab.Desc != nil {
		_bbdc := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _fdd := range _dab.Desc {
			e.EncodeElement(_fdd, _bbdc)
		}
	}
	if _dab.CatLst != nil {
		_bbag := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dab.CatLst, _bbag)
	}
	if _dab.StyleLbl != nil {
		_gcaf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
		for _, _gdbc := range _dab.StyleLbl {
			e.EncodeElement(_gdbc, _gcaf)
		}
	}
	if _dab.ExtLst != nil {
		_dada := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dab.ExtLst, _dada)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_eefb *CT_ColorTransformHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_fbfg:
	for {
		_dfea, _gcag := d.Token()
		if _gcag != nil {
			return _gcag
		}
		switch _deff := _dfea.(type) {
		case _a.StartElement:
			switch _deff.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_bgcgc := NewCT_ColorTransformHeader()
				if _ddga := d.DecodeElement(_bgcgc, &_deff); _ddga != nil {
					return _ddga
				}
				_eefb.ColorsDefHdr = append(_eefb.ColorsDefHdr, _bgcgc)
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0043\u006fl\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _deff.Name)
				if _fffd := d.Skip(); _fffd != nil {
					return _fffd
				}
			}
		case _a.EndElement:
			break _fbfg
		case _a.CharData:
		}
	}
	return nil
}
func (_dba *CT_CTStyleLabel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gef := range start.Attr {
		if _gef.Name.Local == "\u006e\u0061\u006d\u0065" {
			_cgd, _dfe := _gef.Value, error(nil)
			if _dfe != nil {
				return _dfe
			}
			_dba.NameAttr = _cgd
			continue
		}
	}
_afe:
	for {
		_aaad, _eca := d.Token()
		if _eca != nil {
			return _eca
		}
		switch _bgb := _aaad.(type) {
		case _a.StartElement:
			switch _bgb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_dba.FillClrLst = NewCT_Colors()
				if _ecbe := d.DecodeElement(_dba.FillClrLst, &_bgb); _ecbe != nil {
					return _ecbe
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}:
				_dba.LinClrLst = NewCT_Colors()
				if _efgd := d.DecodeElement(_dba.LinClrLst, &_bgb); _efgd != nil {
					return _efgd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_dba.EffectClrLst = NewCT_Colors()
				if _bbgd := d.DecodeElement(_dba.EffectClrLst, &_bgb); _bbgd != nil {
					return _bbgd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_dba.TxLinClrLst = NewCT_Colors()
				if _fgae := d.DecodeElement(_dba.TxLinClrLst, &_bgb); _fgae != nil {
					return _fgae
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_dba.TxFillClrLst = NewCT_Colors()
				if _fea := d.DecodeElement(_dba.TxFillClrLst, &_bgb); _fea != nil {
					return _fea
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}:
				_dba.TxEffectClrLst = NewCT_Colors()
				if _ddbcg := d.DecodeElement(_dba.TxEffectClrLst, &_bgb); _ddbcg != nil {
					return _ddbcg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dba.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _gdf := d.DecodeElement(_dba.ExtLst, &_bgb); _gdf != nil {
					return _gdf
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c\u0020\u0025\u0076", _bgb.Name)
				if _ccee := d.Skip(); _ccee != nil {
					return _ccee
				}
			}
		case _a.EndElement:
			break _afe
		case _a.CharData:
		}
	}
	return nil
}

type ST_ContinueDirection byte

func (_gdce ST_DiagramHorizontalAlignment) ValidateWithPath(path string) error {
	switch _gdce {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdce))
	}
	return nil
}
func (_facaaa ST_HierBranchStyle) String() string {
	switch _facaaa {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0072"
	case 3:
		return "\u0068\u0061\u006e\u0067"
	case 4:
		return "\u0073\u0074\u0064"
	case 5:
		return "\u0069\u006e\u0069\u0074"
	}
	return ""
}

// Validate validates the CT_SDCategory and its children
func (_efb *CT_SDCategory) Validate() error {
	return _efb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}
func NewCT_OrgChart() *CT_OrgChart { _fgba := &CT_OrgChart{}; return _fgba }
func (_dcbc ST_HueDir) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fgfa := _a.Attr{}
	_fgfa.Name = name
	switch _dcbc {
	case ST_HueDirUnset:
		_fgfa.Value = ""
	case ST_HueDirCw:
		_fgfa.Value = "\u0063\u0077"
	case ST_HueDirCcw:
		_fgfa.Value = "\u0063\u0063\u0077"
	}
	return _fgfa, nil
}
func NewCT_DiagramDefinitionHeader() *CT_DiagramDefinitionHeader {
	_cdfe := &CT_DiagramDefinitionHeader{}
	return _cdfe
}

type ST_ConnectorDimension byte

func (_edabe *ST_FlowDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_edabe = 0
	case "\u0072\u006f\u0077":
		*_edabe = 1
	case "\u0063\u006f\u006c":
		*_edabe = 2
	}
	return nil
}
func (_edae *ST_FunctionValue) ValidateWithPath(path string) error {
	_cfae := []string{}
	if _edae.Int32 != nil {
		_cfae = append(_cfae, "\u0049\u006e\u00743\u0032")
	}
	if _edae.Bool != nil {
		_cfae = append(_cfae, "\u0042\u006f\u006f\u006c")
	}
	if _edae.ST_Direction != ST_DirectionUnset {
		_cfae = append(_cfae, "\u0053\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _edae.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		_cfae = append(_cfae, "\u0053T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
	}
	if _edae.ST_AnimOneStr != ST_AnimOneStrUnset {
		_cfae = append(_cfae, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u0053\u0074\u0072")
	}
	if _edae.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		_cfae = append(_cfae, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u0053\u0074\u0072")
	}
	if _edae.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		_cfae = append(_cfae, "\u0053\u0054\u005f\u0052es\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073\u0053\u0074\u0072")
	}
	if len(_cfae) > 1 {
		return _bg.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cfae)
	}
	return nil
}
func (_fcdcb ST_TextDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_baef := _a.Attr{}
	_baef.Name = name
	switch _fcdcb {
	case ST_TextDirectionUnset:
		_baef.Value = ""
	case ST_TextDirectionFromT:
		_baef.Value = "\u0066\u0072\u006fm\u0054"
	case ST_TextDirectionFromB:
		_baef.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _baef, nil
}
func (_gegb *CT_LayoutNode) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gegb.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_gegb.NameAttr)})
	}
	if _gegb.StyleLblAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _bg.Sprintf("\u0025\u0076", *_gegb.StyleLblAttr)})
	}
	if _gegb.ChOrderAttr != ST_ChildOrderTypeUnset {
		_dgc, _cdeg := _gegb.ChOrderAttr.MarshalXMLAttr(_a.Name{Local: "\u0063h\u004f\u0072\u0064\u0065\u0072"})
		if _cdeg != nil {
			return _cdeg
		}
		start.Attr = append(start.Attr, _dgc)
	}
	if _gegb.MoveWithAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068"}, Value: _bg.Sprintf("\u0025\u0076", *_gegb.MoveWithAttr)})
	}
	e.EncodeToken(start)
	if _gegb.Alg != nil {
		_cdbdf := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _abefa := range _gegb.Alg {
			e.EncodeElement(_abefa, _cdbdf)
		}
	}
	if _gegb.Shape != nil {
		_aaadg := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _dafgf := range _gegb.Shape {
			e.EncodeElement(_dafgf, _aaadg)
		}
	}
	if _gegb.PresOf != nil {
		_afgfa := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _dbcf := range _gegb.PresOf {
			e.EncodeElement(_dbcf, _afgfa)
		}
	}
	if _gegb.ConstrLst != nil {
		_cdda := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _adgdg := range _gegb.ConstrLst {
			e.EncodeElement(_adgdg, _cdda)
		}
	}
	if _gegb.RuleLst != nil {
		_ddcg := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _eda := range _gegb.RuleLst {
			e.EncodeElement(_eda, _ddcg)
		}
	}
	if _gegb.VarLst != nil {
		_gcbb := _a.StartElement{Name: _a.Name{Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}}
		for _, _ebfa := range _gegb.VarLst {
			e.EncodeElement(_ebfa, _gcbb)
		}
	}
	if _gegb.ForEach != nil {
		_bdd := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _gaab := range _gegb.ForEach {
			e.EncodeElement(_gaab, _bdd)
		}
	}
	if _gegb.LayoutNode != nil {
		_ecggf := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _bdbg := range _gegb.LayoutNode {
			e.EncodeElement(_bdbg, _ecggf)
		}
	}
	if _gegb.Choose != nil {
		_abega := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _bacac := range _gegb.Choose {
			e.EncodeElement(_bacac, _abega)
		}
	}
	if _gegb.ExtLst != nil {
		_bfdc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _dgada := range _gegb.ExtLst {
			e.EncodeElement(_dgada, _bfdc)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_SDCategory struct {
	TypeAttr string
	PriAttr  uint32
}

func NewRelIds() *RelIds { _bdgc := &RelIds{}; _bdgc.CT_RelIds = *NewCT_RelIds(); return _bdgc }
func (_gaggb *ST_ArrowheadStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcge, _cdcaf := d.Token()
	if _cdcaf != nil {
		return _cdcaf
	}
	if _gfbc, _ffddb := _dcge.(_a.EndElement); _ffddb && _gfbc.Name == start.Name {
		*_gaggb = 1
		return nil
	}
	if _fccgd, _daee := _dcge.(_a.CharData); !_daee {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcge)
	} else {
		switch string(_fccgd) {
		case "":
			*_gaggb = 0
		case "\u0061\u0075\u0074\u006f":
			*_gaggb = 1
		case "\u0061\u0072\u0072":
			*_gaggb = 2
		case "\u006e\u006f\u0041r\u0072":
			*_gaggb = 3
		}
	}
	_dcge, _cdcaf = d.Token()
	if _cdcaf != nil {
		return _cdcaf
	}
	if _dgbgaa, _agabg := _dcge.(_a.EndElement); _agabg && _dgbgaa.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcge)
}
func (_befg ST_FunctionType) ValidateWithPath(path string) error {
	switch _befg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_befg))
	}
	return nil
}
func (_daabg *StyleDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_daabg.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	for _, _ecbbd := range start.Attr {
		if _ecbbd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_dcdfg, _facfb := _ecbbd.Value, error(nil)
			if _facfb != nil {
				return _facfb
			}
			_daabg.UniqueIdAttr = _dcdfg
			continue
		}
		if _ecbbd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cefd, _cfceb := _ecbbd.Value, error(nil)
			if _cfceb != nil {
				return _cfceb
			}
			_daabg.MinVerAttr = &_cefd
			continue
		}
		if _ecbbd.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_fedc, _dacae := _b.ParseInt(_ecbbd.Value, 10, 32)
			if _dacae != nil {
				return _dacae
			}
			_edbg := int32(_fedc)
			_daabg.ResIdAttr = &_edbg
			continue
		}
	}
_gcdfc:
	for {
		_cgdbf, _gbdf := d.Token()
		if _gbdf != nil {
			return _gbdf
		}
		switch _beaag := _cgdbf.(type) {
		case _a.StartElement:
			switch _beaag.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_bdge := NewCT_SDName()
				if _fafe := d.DecodeElement(_bdge, &_beaag); _fafe != nil {
					return _fafe
				}
				_daabg.Title = append(_daabg.Title, _bdge)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_dfbf := NewCT_SDDescription()
				if _egbdb := d.DecodeElement(_dfbf, &_beaag); _egbdb != nil {
					return _egbdb
				}
				_daabg.Desc = append(_daabg.Desc, _dfbf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_daabg.CatLst = NewCT_SDCategories()
				if _deaed := d.DecodeElement(_daabg.CatLst, &_beaag); _deaed != nil {
					return _deaed
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_daabg.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _acbbd := d.DecodeElement(_daabg.ExtLst, &_beaag); _acbbd != nil {
					return _acbbd
				}
			default:
				_fb.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _beaag.Name)
				if _geaf := d.Skip(); _geaf != nil {
					return _geaf
				}
			}
		case _a.EndElement:
			break _gcdfc
		case _a.CharData:
		}
	}
	return nil
}

type LayoutDefHdr struct{ CT_DiagramDefinitionHeader }

func (_begb *ST_PtType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fdfd, _feeaf := d.Token()
	if _feeaf != nil {
		return _feeaf
	}
	if _cgfa, _bdfad := _fdfd.(_a.EndElement); _bdfad && _cgfa.Name == start.Name {
		*_begb = 1
		return nil
	}
	if _fcaca, _dccfe := _fdfd.(_a.CharData); !_dccfe {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdfd)
	} else {
		switch string(_fcaca) {
		case "":
			*_begb = 0
		case "\u006e\u006f\u0064\u0065":
			*_begb = 1
		case "\u0061\u0073\u0073\u0074":
			*_begb = 2
		case "\u0064\u006f\u0063":
			*_begb = 3
		case "\u0070\u0072\u0065\u0073":
			*_begb = 4
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_begb = 5
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_begb = 6
		}
	}
	_fdfd, _feeaf = d.Token()
	if _feeaf != nil {
		return _feeaf
	}
	if _ceeb, _cbef := _fdfd.(_a.EndElement); _cbef && _ceeb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdfd)
}
func NewCT_CTCategories() *CT_CTCategories { _ddbad := &CT_CTCategories{}; return _ddbad }
func (_agec ST_RotationPath) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_agec.String(), start)
}
func (_fdee ST_ChildAlignment) Validate() error { return _fdee.ValidateWithPath("") }
func (_ageae *ST_ResizeHandlesStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bcbaf, _fecb := d.Token()
	if _fecb != nil {
		return _fecb
	}
	if _dddfd, _afgcgg := _bcbaf.(_a.EndElement); _afgcgg && _dddfd.Name == start.Name {
		*_ageae = 1
		return nil
	}
	if _ccgce, _eabc := _bcbaf.(_a.CharData); !_eabc {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcbaf)
	} else {
		switch string(_ccgce) {
		case "":
			*_ageae = 0
		case "\u0065\u0078\u0061c\u0074":
			*_ageae = 1
		case "\u0072\u0065\u006c":
			*_ageae = 2
		}
	}
	_bcbaf, _fecb = d.Token()
	if _fecb != nil {
		return _fecb
	}
	if _bccfd, _dbege := _bcbaf.(_a.EndElement); _dbege && _bccfd.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcbaf)
}
func (_gbdg ST_ConnectorPoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ccedbg := _a.Attr{}
	_ccedbg.Name = name
	switch _gbdg {
	case ST_ConnectorPointUnset:
		_ccedbg.Value = ""
	case ST_ConnectorPointAuto:
		_ccedbg.Value = "\u0061\u0075\u0074\u006f"
	case ST_ConnectorPointBCtr:
		_ccedbg.Value = "\u0062\u0043\u0074\u0072"
	case ST_ConnectorPointCtr:
		_ccedbg.Value = "\u0063\u0074\u0072"
	case ST_ConnectorPointMidL:
		_ccedbg.Value = "\u006d\u0069\u0064\u004c"
	case ST_ConnectorPointMidR:
		_ccedbg.Value = "\u006d\u0069\u0064\u0052"
	case ST_ConnectorPointTCtr:
		_ccedbg.Value = "\u0074\u0043\u0074\u0072"
	case ST_ConnectorPointBL:
		_ccedbg.Value = "\u0062\u004c"
	case ST_ConnectorPointBR:
		_ccedbg.Value = "\u0062\u0052"
	case ST_ConnectorPointTL:
		_ccedbg.Value = "\u0074\u004c"
	case ST_ConnectorPointTR:
		_ccedbg.Value = "\u0074\u0052"
	case ST_ConnectorPointRadial:
		_ccedbg.Value = "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return _ccedbg, nil
}
func (_adda *CT_CxnList) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_eegg:
	for {
		_eadb, _fcc := d.Token()
		if _fcc != nil {
			return _fcc
		}
		switch _cbf := _eadb.(type) {
		case _a.StartElement:
			switch _cbf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e"}:
				_fbeb := NewCT_Cxn()
				if _cdgg := d.DecodeElement(_fbeb, &_cbf); _cdgg != nil {
					return _cdgg
				}
				_adda.Cxn = append(_adda.Cxn, _fbeb)
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fC\u0078\u006e\u004c\u0069\u0073\u0074\u0020\u0025\u0076", _cbf.Name)
				if _efe := d.Skip(); _efe != nil {
					return _efe
				}
			}
		case _a.EndElement:
			break _eegg
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_VariableTypeUnset         ST_VariableType = 0
	ST_VariableTypeNone          ST_VariableType = 1
	ST_VariableTypeOrgChart      ST_VariableType = 2
	ST_VariableTypeChMax         ST_VariableType = 3
	ST_VariableTypeChPref        ST_VariableType = 4
	ST_VariableTypeBulEnabled    ST_VariableType = 5
	ST_VariableTypeDir           ST_VariableType = 6
	ST_VariableTypeHierBranch    ST_VariableType = 7
	ST_VariableTypeAnimOne       ST_VariableType = 8
	ST_VariableTypeAnimLvl       ST_VariableType = 9
	ST_VariableTypeResizeHandles ST_VariableType = 10
)

func _gggf(_feac bool) uint8 {
	if _feac {
		return 1
	}
	return 0
}
func (_eeba ST_PtType) String() string {
	switch _eeba {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0061\u0073\u0073\u0074"
	case 3:
		return "\u0064\u006f\u0063"
	case 4:
		return "\u0070\u0072\u0065\u0073"
	case 5:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 6:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}
func (_aeff ST_GrowDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aeff.String(), start)
}

// Validate validates the CT_ForEach and its children
func (_dfae *CT_ForEach) Validate() error {
	return _dfae.ValidateWithPath("\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068")
}

const (
	ST_PyramidAccentPositionUnset ST_PyramidAccentPosition = 0
	ST_PyramidAccentPositionBef   ST_PyramidAccentPosition = 1
	ST_PyramidAccentPositionAft   ST_PyramidAccentPosition = 2
)

func NewStyleDefHdr() *StyleDefHdr {
	_eaaa := &StyleDefHdr{}
	_eaaa.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	return _eaaa
}
func (_cddag ST_TextBlockDirection) Validate() error { return _cddag.ValidateWithPath("") }
func (_bgbc ST_Offset) ValidateWithPath(path string) error {
	switch _bgbc {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgbc))
	}
	return nil
}
func NewCT_CTName() *CT_CTName { _abe := &CT_CTName{}; return _abe }
func (_bgad ST_FlowDirection) String() string {
	switch _bgad {
	case 0:
		return ""
	case 1:
		return "\u0072\u006f\u0077"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}
func ParseUnionST_PrSetCustVal(s string) (ST_PrSetCustVal, error) { return ST_PrSetCustVal{}, nil }

const (
	ST_PyramidAccentTextMarginUnset ST_PyramidAccentTextMargin = 0
	ST_PyramidAccentTextMarginStep  ST_PyramidAccentTextMargin = 1
	ST_PyramidAccentTextMarginStack ST_PyramidAccentTextMargin = 2
)

type CT_SDName struct {
	LangAttr *string
	ValAttr  string
}

func (_ebda *ST_SecondaryLinearDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffac, _acda := d.Token()
	if _acda != nil {
		return _acda
	}
	if _afaca, _gbcea := _ffac.(_a.EndElement); _gbcea && _afaca.Name == start.Name {
		*_ebda = 1
		return nil
	}
	if _bedg, _gbac := _ffac.(_a.CharData); !_gbac {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffac)
	} else {
		switch string(_bedg) {
		case "":
			*_ebda = 0
		case "\u006e\u006f\u006e\u0065":
			*_ebda = 1
		case "\u0066\u0072\u006fm\u004c":
			*_ebda = 2
		case "\u0066\u0072\u006fm\u0052":
			*_ebda = 3
		case "\u0066\u0072\u006fm\u0054":
			*_ebda = 4
		case "\u0066\u0072\u006fm\u0042":
			*_ebda = 5
		}
	}
	_ffac, _acda = d.Token()
	if _acda != nil {
		return _acda
	}
	if _fdbg, _gdbb := _ffac.(_a.EndElement); _gdbb && _fdbg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffac)
}
func (_bbdb ST_ConstraintRelationship) String() string {
	switch _bbdb {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	}
	return ""
}
func (_efgb ST_ConnectorRouting) String() string {
	switch _efgb {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0072\u0061"
	case 2:
		return "\u0062\u0065\u006e\u0064"
	case 3:
		return "\u0063\u0075\u0072v\u0065"
	case 4:
		return "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return ""
}

const (
	ST_CxnTypeUnset               ST_CxnType = 0
	ST_CxnTypeParOf               ST_CxnType = 1
	ST_CxnTypePresOf              ST_CxnType = 2
	ST_CxnTypePresParOf           ST_CxnType = 3
	ST_CxnTypeUnknownRelationship ST_CxnType = 4
)

type CT_CTCategories struct{ Cat []*CT_CTCategory }

func (_ddgafe *ST_Breakpoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ddgafe = 0
	case "\u0065\u006e\u0064\u0043\u006e\u0076":
		*_ddgafe = 1
	case "\u0062\u0061\u006c":
		*_ddgafe = 2
	case "\u0066\u0069\u0078e\u0064":
		*_ddgafe = 3
	}
	return nil
}

type ST_Booleans []bool

// ValidateWithPath validates the CT_ChildMax and its children, prefixing error messages with path
func (_bac *CT_ChildMax) ValidateWithPath(path string) error {
	if _bac.ValAttr != nil {
		if *_bac.ValAttr < -1 {
			return _bg.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bac.ValAttr)
		}
	}
	return nil
}

// Validate validates the StyleDef and its children
func (_abga *StyleDef) Validate() error {
	return _abga.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066")
}

// Validate validates the CT_DiagramDefinitionHeader and its children
func (_bdff *CT_DiagramDefinitionHeader) Validate() error {
	return _bdff.ValidateWithPath("\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072")
}

// Validate validates the CT_CTDescription and its children
func (_ddbcb *CT_CTDescription) Validate() error {
	return _ddbcb.ValidateWithPath("\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}
func (_ggdf ST_FunctionValue) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ggdf.Int32 != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0064", *_ggdf.Int32)))
	}
	if _ggdf.Bool != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0064", _gggf(*_ggdf.Bool))))
	}
	if _ggdf.ST_Direction != ST_DirectionUnset {
		e.EncodeToken(_a.CharData(_ggdf.ST_Direction.String()))
	}
	if _ggdf.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		e.EncodeToken(_a.CharData(_ggdf.ST_HierBranchStyle.String()))
	}
	if _ggdf.ST_AnimOneStr != ST_AnimOneStrUnset {
		e.EncodeToken(_a.CharData(_ggdf.ST_AnimOneStr.String()))
	}
	if _ggdf.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		e.EncodeToken(_a.CharData(_ggdf.ST_AnimLvlStr.String()))
	}
	if _ggdf.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		e.EncodeToken(_a.CharData(_ggdf.ST_ResizeHandlesStr.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

type CT_AnimLvl struct{ ValAttr ST_AnimLvlStr }

func (_egaea ST_PyramidAccentTextMargin) ValidateWithPath(path string) error {
	switch _egaea {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egaea))
	}
	return nil
}
func NewCT_Categories() *CT_Categories { _dbb := &CT_Categories{}; return _dbb }
func NewCT_Choose() *CT_Choose         { _gdec := &CT_Choose{}; return _gdec }
func (_fdc *CT_AdjLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_edd:
	for {
		_bgf, _ggc := d.Token()
		if _ggc != nil {
			return _ggc
		}
		switch _gcf := _bgf.(type) {
		case _a.StartElement:
			switch _gcf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a"}:
				_cee := NewCT_Adj()
				if _dce := d.DecodeElement(_cee, &_gcf); _dce != nil {
					return _dce
				}
				_fdc.Adj = append(_fdc.Adj, _cee)
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0041\u0064\u006aL\u0073\u0074 \u0025\u0076", _gcf.Name)
				if _bge := d.Skip(); _bge != nil {
					return _bge
				}
			}
		case _a.EndElement:
			break _edd
		case _a.CharData:
		}
	}
	return nil
}
func (_gaca *ST_ClrAppMethod) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gfgbf, _ccedb := d.Token()
	if _ccedb != nil {
		return _ccedb
	}
	if _egbbc, _fced := _gfgbf.(_a.EndElement); _fced && _egbbc.Name == start.Name {
		*_gaca = 1
		return nil
	}
	if _adca, _adff := _gfgbf.(_a.CharData); !_adff {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfgbf)
	} else {
		switch string(_adca) {
		case "":
			*_gaca = 0
		case "\u0073\u0070\u0061\u006e":
			*_gaca = 1
		case "\u0063\u0079\u0063l\u0065":
			*_gaca = 2
		case "\u0072\u0065\u0070\u0065\u0061\u0074":
			*_gaca = 3
		}
	}
	_gfgbf, _ccedb = d.Token()
	if _ccedb != nil {
		return _ccedb
	}
	if _dgedf, _baebe := _gfgbf.(_a.EndElement); _baebe && _dgedf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfgbf)
}
func (_adeb ST_ConnectorDimension) ValidateWithPath(path string) error {
	switch _adeb {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adeb))
	}
	return nil
}

type ST_AnimOneStr byte

func (_bcg *CT_Constraints) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bcg.Constr != nil {
		_ggcfe := _a.StartElement{Name: _a.Name{Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}}
		for _, _bfbg := range _bcg.Constr {
			e.EncodeElement(_bfbg, _ggcfe)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ffce *ST_ConstraintRelationship) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fgeec, _eagad := d.Token()
	if _eagad != nil {
		return _eagad
	}
	if _agff, _aegaa := _fgeec.(_a.EndElement); _aegaa && _agff.Name == start.Name {
		*_ffce = 1
		return nil
	}
	if _ccbf, _gbaaf := _fgeec.(_a.CharData); !_gbaaf {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgeec)
	} else {
		switch string(_ccbf) {
		case "":
			*_ffce = 0
		case "\u0073\u0065\u006c\u0066":
			*_ffce = 1
		case "\u0063\u0068":
			*_ffce = 2
		case "\u0064\u0065\u0073":
			*_ffce = 3
		}
	}
	_fgeec, _eagad = d.Token()
	if _eagad != nil {
		return _eagad
	}
	if _cfdba, _edggg := _fgeec.(_a.EndElement); _edggg && _cfdba.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgeec)
}

// Validate validates the CT_HierBranchStyle and its children
func (_gdbdc *CT_HierBranchStyle) Validate() error {
	return _gdbdc.ValidateWithPath("\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
}
func (_ceea ST_ArrowheadStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ceea.String(), start)
}

const (
	ST_NodeVerticalAlignmentUnset ST_NodeVerticalAlignment = 0
	ST_NodeVerticalAlignmentT     ST_NodeVerticalAlignment = 1
	ST_NodeVerticalAlignmentMid   ST_NodeVerticalAlignment = 2
	ST_NodeVerticalAlignmentB     ST_NodeVerticalAlignment = 3
)
const (
	ST_AlgorithmTypeUnset     ST_AlgorithmType = 0
	ST_AlgorithmTypeComposite ST_AlgorithmType = 1
	ST_AlgorithmTypeConn      ST_AlgorithmType = 2
	ST_AlgorithmTypeCycle     ST_AlgorithmType = 3
	ST_AlgorithmTypeHierChild ST_AlgorithmType = 4
	ST_AlgorithmTypeHierRoot  ST_AlgorithmType = 5
	ST_AlgorithmTypePyra      ST_AlgorithmType = 6
	ST_AlgorithmTypeLin       ST_AlgorithmType = 7
	ST_AlgorithmTypeSp        ST_AlgorithmType = 8
	ST_AlgorithmTypeTx        ST_AlgorithmType = 9
	ST_AlgorithmTypeSnake     ST_AlgorithmType = 10
)

func (_cgagg *ST_AnimLvlStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cgagg = 0
	case "\u006e\u006f\u006e\u0065":
		*_cgagg = 1
	case "\u006c\u0076\u006c":
		*_cgagg = 2
	case "\u0063\u0074\u0072":
		*_cgagg = 3
	}
	return nil
}

type CT_Constraints struct{ Constr []*CT_Constraint }

func (_gbgbb ST_AutoTextRotation) Validate() error { return _gbgbb.ValidateWithPath("") }
func (_ebde *CT_ChildPref) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ebde.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", *_ebde.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cedeg *CT_SDCategories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_dagc:
	for {
		_febab, _gcg := d.Token()
		if _gcg != nil {
			return _gcg
		}
		switch _ccde := _febab.(type) {
		case _a.StartElement:
			switch _ccde.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_bacf := NewCT_SDCategory()
				if _dbbg := d.DecodeElement(_bacf, &_ccde); _dbbg != nil {
					return _dbbg
				}
				_cedeg.Cat = append(_cedeg.Cat, _bacf)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0044\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _ccde.Name)
				if _aefc := d.Skip(); _aefc != nil {
					return _aefc
				}
			}
		case _a.EndElement:
			break _dagc
		case _a.CharData:
		}
	}
	return nil
}
func (_cebga ST_BoolOperator) Validate() error { return _cebga.ValidateWithPath("") }
func (_dfggcf *ST_VerticalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dfggcf = 0
	case "\u0074":
		*_dfggcf = 1
	case "\u006d\u0069\u0064":
		*_dfggcf = 2
	case "\u0062":
		*_dfggcf = 3
	case "\u006e\u006f\u006e\u0065":
		*_dfggcf = 4
	}
	return nil
}
func (_fgec ST_ConstraintType) ValidateWithPath(path string) error {
	switch _fgec {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgec))
	}
	return nil
}
func (_adbe *CT_OrgChart) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _adbe.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_adbe.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ConnectorDimensionUnset ST_ConnectorDimension = 0
	ST_ConnectorDimension1D    ST_ConnectorDimension = 1
	ST_ConnectorDimension2D    ST_ConnectorDimension = 2
	ST_ConnectorDimensionCust  ST_ConnectorDimension = 3
)

func (_ceddf *CT_StyleDefinition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gfca := range start.Attr {
		if _gfca.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_caadg, _fgab := _gfca.Value, error(nil)
			if _fgab != nil {
				return _fgab
			}
			_ceddf.UniqueIdAttr = &_caadg
			continue
		}
		if _gfca.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_ecccc, _bebab := _gfca.Value, error(nil)
			if _bebab != nil {
				return _bebab
			}
			_ceddf.MinVerAttr = &_ecccc
			continue
		}
	}
_fbda:
	for {
		_gbaec, _afge := d.Token()
		if _afge != nil {
			return _afge
		}
		switch _bcbgb := _gbaec.(type) {
		case _a.StartElement:
			switch _bcbgb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dgggd := NewCT_SDName()
				if _gddf := d.DecodeElement(_dgggd, &_bcbgb); _gddf != nil {
					return _gddf
				}
				_ceddf.Title = append(_ceddf.Title, _dgggd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gecdgc := NewCT_SDDescription()
				if _gade := d.DecodeElement(_gecdgc, &_bcbgb); _gade != nil {
					return _gade
				}
				_ceddf.Desc = append(_ceddf.Desc, _gecdgc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_ceddf.CatLst = NewCT_SDCategories()
				if _egab := d.DecodeElement(_ceddf.CatLst, &_bcbgb); _egab != nil {
					return _egab
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_ceddf.Scene3d = _bb.NewCT_Scene3D()
				if _egbdg := d.DecodeElement(_ceddf.Scene3d, &_bcbgb); _egbdg != nil {
					return _egbdg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_ddefe := NewCT_StyleLabel()
				if _ebee := d.DecodeElement(_ddefe, &_bcbgb); _ebee != nil {
					return _ebee
				}
				_ceddf.StyleLbl = append(_ceddf.StyleLbl, _ddefe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ceddf.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _gccbd := d.DecodeElement(_ceddf.ExtLst, &_bcbgb); _gccbd != nil {
					return _gccbd
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _bcbgb.Name)
				if _eeeac := d.Skip(); _eeeac != nil {
					return _eeeac
				}
			}
		case _a.EndElement:
			break _fbda
		case _a.CharData:
		}
	}
	return nil
}
func (_gbcc *CT_Colors) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ebc := range start.Attr {
		if _ebc.Name.Local == "\u006d\u0065\u0074\u0068" {
			_gbcc.MethAttr.UnmarshalXMLAttr(_ebc)
			continue
		}
		if _ebc.Name.Local == "\u0068\u0075\u0065\u0044\u0069\u0072" {
			_gbcc.HueDirAttr.UnmarshalXMLAttr(_ebc)
			continue
		}
	}
_fbega:
	for {
		_ggfa, _dcdd := d.Token()
		if _dcdd != nil {
			return _dcdd
		}
		switch _efca := _ggfa.(type) {
		case _a.StartElement:
			switch _efca.Name {
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u006f\u006co\u0072\u0073 \u0025\u0076", _efca.Name)
				if _bgfg := d.Skip(); _bgfg != nil {
					return _bgfg
				}
			}
		case _a.EndElement:
			break _fbega
		case _a.CharData:
		}
	}
	return nil
}
func (_cbace *CT_PtList) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _cbace.Pt != nil {
		_dcb := _a.StartElement{Name: _a.Name{Local: "\u0070\u0074"}}
		for _, _dbcbf := range _cbace.Pt {
			e.EncodeElement(_dbcbf, _dcb)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewAG_ConstraintAttributes() *AG_ConstraintAttributes {
	_ad := &AG_ConstraintAttributes{}
	return _ad
}
func (_aeea ST_HierBranchStyle) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_geeg := _a.Attr{}
	_geeg.Name = name
	switch _aeea {
	case ST_HierBranchStyleUnset:
		_geeg.Value = ""
	case ST_HierBranchStyleL:
		_geeg.Value = "\u006c"
	case ST_HierBranchStyleR:
		_geeg.Value = "\u0072"
	case ST_HierBranchStyleHang:
		_geeg.Value = "\u0068\u0061\u006e\u0067"
	case ST_HierBranchStyleStd:
		_geeg.Value = "\u0073\u0074\u0064"
	case ST_HierBranchStyleInit:
		_geeg.Value = "\u0069\u006e\u0069\u0074"
	}
	return _geeg, nil
}

// Validate validates the CT_Colors and its children
func (_efdb *CT_Colors) Validate() error {
	return _efdb.ValidateWithPath("\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s")
}
func (_baga ST_NodeHorizontalAlignment) ValidateWithPath(path string) error {
	switch _baga {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baga))
	}
	return nil
}
func (_ecgff *ST_FallbackDimension) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ecgff = 0
	case "\u0031\u0044":
		*_ecgff = 1
	case "\u0032\u0044":
		*_ecgff = 2
	}
	return nil
}
func (_afccf ST_NodeHorizontalAlignment) Validate() error { return _afccf.ValidateWithPath("") }

// Validate validates the CT_StyleDefinition and its children
func (_eagfd *CT_StyleDefinition) Validate() error {
	return _eagfd.ValidateWithPath("\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e")
}
func (_feec *ST_PtType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_feec = 0
	case "\u006e\u006f\u0064\u0065":
		*_feec = 1
	case "\u0061\u0073\u0073\u0074":
		*_feec = 2
	case "\u0064\u006f\u0063":
		*_feec = 3
	case "\u0070\u0072\u0065\u0073":
		*_feec = 4
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_feec = 5
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_feec = 6
	}
	return nil
}
func (_cgef *CT_Rules) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_bbfb:
	for {
		_fafb, _eada := d.Token()
		if _eada != nil {
			return _eada
		}
		switch _gagg := _fafb.(type) {
		case _a.StartElement:
			switch _gagg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0075\u006c\u0065"}:
				_bcdf := NewCT_NumericRule()
				if _acge := d.DecodeElement(_bcdf, &_gagg); _acge != nil {
					return _acge
				}
				_cgef.Rule = append(_cgef.Rule, _bcdf)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073\u0020\u0025\u0076", _gagg.Name)
				if _fbac := d.Skip(); _fbac != nil {
					return _fbac
				}
			}
		case _a.EndElement:
			break _bbfb
		case _a.CharData:
		}
	}
	return nil
}
func (_dacd *CT_SDName) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dacd.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_dacd.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _dacd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_geab *LayoutDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"
	return _geab.CT_DiagramDefinitionHeader.MarshalXML(e, start)
}
func (_ffdf ST_FunctionValue) String() string {
	if _ffdf.Int32 != nil {
		return _bg.Sprintf("\u0025\u0076", *_ffdf.Int32)
	}
	if _ffdf.Bool != nil {
		return _bg.Sprintf("\u0025\u0076", *_ffdf.Bool)
	}
	if _ffdf.ST_Direction != ST_DirectionUnset {
		return _ffdf.ST_Direction.String()
	}
	if _ffdf.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		return _ffdf.ST_HierBranchStyle.String()
	}
	if _ffdf.ST_AnimOneStr != ST_AnimOneStrUnset {
		return _ffdf.ST_AnimOneStr.String()
	}
	if _ffdf.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		return _ffdf.ST_AnimLvlStr.String()
	}
	if _ffdf.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		return _ffdf.ST_ResizeHandlesStr.String()
	}
	return ""
}
func (_ebfaf ST_AnimLvlStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ebfaf.String(), start)
}
func (_cdaf ST_AxisType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cdaf.String(), start)
}

const (
	ST_TextAnchorHorizontalUnset ST_TextAnchorHorizontal = 0
	ST_TextAnchorHorizontalNone  ST_TextAnchorHorizontal = 1
	ST_TextAnchorHorizontalCtr   ST_TextAnchorHorizontal = 2
)

func (_cec *AG_IteratorAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cec.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_cec.AxisAttr)})
	}
	if _cec.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_cec.PtTypeAttr)})
	}
	if _cec.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_cec.HideLastTransAttr)})
	}
	if _cec.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_cec.StAttr)})
	}
	if _cec.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_cec.CntAttr)})
	}
	if _cec.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _bg.Sprintf("\u0025\u0076", *_cec.StepAttr)})
	}
	return nil
}
func (_dbada *CT_LayoutNode) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dcag := range start.Attr {
		if _dcag.Name.Local == "\u006e\u0061\u006d\u0065" {
			_efcda, _eefe := _dcag.Value, error(nil)
			if _eefe != nil {
				return _eefe
			}
			_dbada.NameAttr = &_efcda
			continue
		}
		if _dcag.Name.Local == "\u0063h\u004f\u0072\u0064\u0065\u0072" {
			_dbada.ChOrderAttr.UnmarshalXMLAttr(_dcag)
			continue
		}
		if _dcag.Name.Local == "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068" {
			_babce, _addgc := _dcag.Value, error(nil)
			if _addgc != nil {
				return _addgc
			}
			_dbada.MoveWithAttr = &_babce
			continue
		}
		if _dcag.Name.Local == "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_gfae, _cbagd := _dcag.Value, error(nil)
			if _cbagd != nil {
				return _cbagd
			}
			_dbada.StyleLblAttr = &_gfae
			continue
		}
	}
_cecac:
	for {
		_gdfb, _gabc := d.Token()
		if _gabc != nil {
			return _gabc
		}
		switch _aeeg := _gdfb.(type) {
		case _a.StartElement:
			switch _aeeg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_cef := NewCT_Algorithm()
				if _dcfd := d.DecodeElement(_cef, &_aeeg); _dcfd != nil {
					return _dcfd
				}
				_dbada.Alg = append(_dbada.Alg, _cef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ddgce := NewCT_Shape()
				if _egd := d.DecodeElement(_ddgce, &_aeeg); _egd != nil {
					return _egd
				}
				_dbada.Shape = append(_dbada.Shape, _ddgce)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_gbcga := NewCT_PresentationOf()
				if _dddag := d.DecodeElement(_gbcga, &_aeeg); _dddag != nil {
					return _dddag
				}
				_dbada.PresOf = append(_dbada.PresOf, _gbcga)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_bbc := NewCT_Constraints()
				if _abgbd := d.DecodeElement(_bbc, &_aeeg); _abgbd != nil {
					return _abgbd
				}
				_dbada.ConstrLst = append(_dbada.ConstrLst, _bbc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_addef := NewCT_Rules()
				if _gggab := d.DecodeElement(_addef, &_aeeg); _gggab != nil {
					return _gggab
				}
				_dbada.RuleLst = append(_dbada.RuleLst, _addef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}:
				_agbb := NewCT_LayoutVariablePropertySet()
				if _ebbgd := d.DecodeElement(_agbb, &_aeeg); _ebbgd != nil {
					return _ebbgd
				}
				_dbada.VarLst = append(_dbada.VarLst, _agbb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_eafc := NewCT_ForEach()
				if _cabed := d.DecodeElement(_eafc, &_aeeg); _cabed != nil {
					return _cabed
				}
				_dbada.ForEach = append(_dbada.ForEach, _eafc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_bfae := NewCT_LayoutNode()
				if _gccd := d.DecodeElement(_bfae, &_aeeg); _gccd != nil {
					return _gccd
				}
				_dbada.LayoutNode = append(_dbada.LayoutNode, _bfae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_fbbf := NewCT_Choose()
				if _fddd := d.DecodeElement(_fbbf, &_aeeg); _fddd != nil {
					return _fddd
				}
				_dbada.Choose = append(_dbada.Choose, _fbbf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cagc := _bb.NewCT_OfficeArtExtensionList()
				if _gabb := d.DecodeElement(_cagc, &_aeeg); _gabb != nil {
					return _gabb
				}
				_dbada.ExtLst = append(_dbada.ExtLst, _cagc)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065 \u0025\u0076", _aeeg.Name)
				if _dede := d.Skip(); _dede != nil {
					return _dede
				}
			}
		case _a.EndElement:
			break _cecac
		case _a.CharData:
		}
	}
	return nil
}
func ParseSliceST_AxisTypes(s string) (ST_AxisTypes, error) { return ST_AxisTypes{}, nil }
func (_eecga *ST_ContinueDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eecga = 0
	case "\u0072\u0065\u0076\u0044\u0069\u0072":
		*_eecga = 1
	case "\u0073a\u006d\u0065\u0044\u0069\u0072":
		*_eecga = 2
	}
	return nil
}
func (_dffac ST_DiagramHorizontalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dfgga := _a.Attr{}
	_dfgga.Name = name
	switch _dffac {
	case ST_DiagramHorizontalAlignmentUnset:
		_dfgga.Value = ""
	case ST_DiagramHorizontalAlignmentL:
		_dfgga.Value = "\u006c"
	case ST_DiagramHorizontalAlignmentCtr:
		_dfgga.Value = "\u0063\u0074\u0072"
	case ST_DiagramHorizontalAlignmentR:
		_dfgga.Value = "\u0072"
	case ST_DiagramHorizontalAlignmentNone:
		_dfgga.Value = "\u006e\u006f\u006e\u0065"
	}
	return _dfgga, nil
}
func ParseSliceST_ElementTypes(s string) (ST_ElementTypes, error) { return ST_ElementTypes{}, nil }
func NewCT_StyleDefinitionHeader() *CT_StyleDefinitionHeader {
	_gedc := &CT_StyleDefinitionHeader{}
	return _gedc
}

type ST_StartingElement byte

func (_aecg ST_ConnectorDimension) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aecg.String(), start)
}
func (_bgdb ST_PtType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bgdb.String(), start)
}
func (_faaa *ST_PrSetCustVal) Validate() error { return _faaa.ValidateWithPath("") }
func (_fbf *AG_IteratorAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ffd := range start.Attr {
		if _ffd.Name.Local == "\u0061\u0078\u0069\u0073" {
			_ggb, _fca := ParseSliceST_AxisTypes(_ffd.Value)
			if _fca != nil {
				return _fca
			}
			_fbf.AxisAttr = &_ggb
			continue
		}
		if _ffd.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_dde, _ac := ParseSliceST_ElementTypes(_ffd.Value)
			if _ac != nil {
				return _ac
			}
			_fbf.PtTypeAttr = &_dde
			continue
		}
		if _ffd.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_gb, _gfc := ParseSliceST_Booleans(_ffd.Value)
			if _gfc != nil {
				return _gfc
			}
			_fbf.HideLastTransAttr = &_gb
			continue
		}
		if _ffd.Name.Local == "\u0073\u0074" {
			_fa, _dcf := ParseSliceST_Ints(_ffd.Value)
			if _dcf != nil {
				return _dcf
			}
			_fbf.StAttr = &_fa
			continue
		}
		if _ffd.Name.Local == "\u0063\u006e\u0074" {
			_cgb, _bf := ParseSliceST_UnsignedInts(_ffd.Value)
			if _bf != nil {
				return _bf
			}
			_fbf.CntAttr = &_cgb
			continue
		}
		if _ffd.Name.Local == "\u0073\u0074\u0065\u0070" {
			_ddf, _fgfg := ParseSliceST_Ints(_ffd.Value)
			if _fgfg != nil {
				return _fgfg
			}
			_fbf.StepAttr = &_ddf
			continue
		}
	}
	for {
		_adf, _ddb := d.Token()
		if _ddb != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073\u0069\u006eg\u0020\u0041\u0047\u005f\u0049\u0074\u0065\u0072\u0061\u0074\u006f\u0072\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065s\u003a\u0020\u0025\u0073", _ddb)
		}
		if _aa, _adb := _adf.(_a.EndElement); _adb && _aa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_deac *CT_CTDescription) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ceb := range start.Attr {
		if _ceb.Name.Local == "\u006c\u0061\u006e\u0067" {
			_cgfc, _cfbg := _ceb.Value, error(nil)
			if _cfbg != nil {
				return _cfbg
			}
			_deac.LangAttr = &_cgfc
			continue
		}
		if _ceb.Name.Local == "\u0076\u0061\u006c" {
			_gfg, _cga := _ceb.Value, error(nil)
			if _cga != nil {
				return _cga
			}
			_deac.ValAttr = _gfg
			continue
		}
	}
	for {
		_gad, _eedg := d.Token()
		if _eedg != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0054\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _eedg)
		}
		if _ddd, _cdcg := _gad.(_a.EndElement); _cdcg && _ddd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gcfaa ST_AnimLvlStr) String() string {
	switch _gcfaa {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0076\u006c"
	case 3:
		return "\u0063\u0074\u0072"
	}
	return ""
}
func (_bbad ST_FallbackDimension) Validate() error { return _bbad.ValidateWithPath("") }

type CT_DiagramDefinition struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	DefStyleAttr *string
	Title        []*CT_Name
	Desc         []*CT_Description
	CatLst       *CT_Categories
	SampData     *CT_SampleData
	StyleData    *CT_SampleData
	ClrData      *CT_SampleData
	LayoutNode   *CT_LayoutNode
	ExtLst       *_bb.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_TextProps and its children, prefixing error messages with path
func (_fdaf *CT_TextProps) ValidateWithPath(path string) error {
	if _fdaf.Sp3d != nil {
		if _bfbdd := _fdaf.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _bfbdd != nil {
			return _bfbdd
		}
	}
	if _fdaf.FlatTx != nil {
		if _gfefa := _fdaf.FlatTx.ValidateWithPath(path + "\u002fF\u006c\u0061\u0074\u0054\u0078"); _gfefa != nil {
			return _gfefa
		}
	}
	return nil
}

type CT_Otherwise struct {
	NameAttr   *string
	Alg        []*CT_Algorithm
	Shape      []*CT_Shape
	PresOf     []*CT_PresentationOf
	ConstrLst  []*CT_Constraints
	RuleLst    []*CT_Rules
	ForEach    []*CT_ForEach
	LayoutNode []*CT_LayoutNode
	Choose     []*CT_Choose
	ExtLst     []*_bb.CT_OfficeArtExtensionList
}

// Validate validates the CT_BulletEnabled and its children
func (_eg *CT_BulletEnabled) Validate() error {
	return _eg.ValidateWithPath("\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064")
}
func (_eeeacg *ST_RotationPath) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gefba, _geafe := d.Token()
	if _geafe != nil {
		return _geafe
	}
	if _cbfb, _adfb := _gefba.(_a.EndElement); _adfb && _cbfb.Name == start.Name {
		*_eeeacg = 1
		return nil
	}
	if _cdcca, _dbbe := _gefba.(_a.CharData); !_dbbe {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gefba)
	} else {
		switch string(_cdcca) {
		case "":
			*_eeeacg = 0
		case "\u006e\u006f\u006e\u0065":
			*_eeeacg = 1
		case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
			*_eeeacg = 2
		}
	}
	_gefba, _geafe = d.Token()
	if _geafe != nil {
		return _geafe
	}
	if _ecfg, _cffbe := _gefba.(_a.EndElement); _cffbe && _ecfg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gefba)
}
func (_eed *CT_CTCategories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _eed.Cat != nil {
		_ddbc := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _fbd := range _eed.Cat {
			e.EncodeElement(_fbd, _ddbc)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_dffg *CT_Direction) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cddg := range start.Attr {
		if _cddg.Name.Local == "\u0076\u0061\u006c" {
			_dffg.ValAttr.UnmarshalXMLAttr(_cddg)
			continue
		}
	}
	for {
		_abgbc, _eagf := d.Token()
		if _eagf != nil {
			return _bg.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0073", _eagf)
		}
		if _caeg, _faba := _abgbc.(_a.EndElement); _faba && _caeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eagae ST_SecondaryLinearDirection) String() string {
	switch _eagae {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u0072\u006fm\u004c"
	case 3:
		return "\u0066\u0072\u006fm\u0052"
	case 4:
		return "\u0066\u0072\u006fm\u0054"
	case 5:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func (_bedea *ST_FunctionOperator) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bedea = 0
	case "\u0065\u0071\u0075":
		*_bedea = 1
	case "\u006e\u0065\u0071":
		*_bedea = 2
	case "\u0067\u0074":
		*_bedea = 3
	case "\u006c\u0074":
		*_bedea = 4
	case "\u0067\u0074\u0065":
		*_bedea = 5
	case "\u006c\u0074\u0065":
		*_bedea = 6
	}
	return nil
}
func NewCT_SDName() *CT_SDName { _ecaab := &CT_SDName{}; return _ecaab }
func (_becb ST_NodeVerticalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ebcae := _a.Attr{}
	_ebcae.Name = name
	switch _becb {
	case ST_NodeVerticalAlignmentUnset:
		_ebcae.Value = ""
	case ST_NodeVerticalAlignmentT:
		_ebcae.Value = "\u0074"
	case ST_NodeVerticalAlignmentMid:
		_ebcae.Value = "\u006d\u0069\u0064"
	case ST_NodeVerticalAlignmentB:
		_ebcae.Value = "\u0062"
	}
	return _ebcae, nil
}
func (_eafg *ST_PyramidAccentPosition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gacc, _eefbb := d.Token()
	if _eefbb != nil {
		return _eefbb
	}
	if _bafe, _bcab := _gacc.(_a.EndElement); _bcab && _bafe.Name == start.Name {
		*_eafg = 1
		return nil
	}
	if _gdbbc, _dagfe := _gacc.(_a.CharData); !_dagfe {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gacc)
	} else {
		switch string(_gdbbc) {
		case "":
			*_eafg = 0
		case "\u0062\u0065\u0066":
			*_eafg = 1
		case "\u0061\u0066\u0074":
			*_eafg = 2
		}
	}
	_gacc, _eefbb = d.Token()
	if _eefbb != nil {
		return _eefbb
	}
	if _fabe, _gbagc := _gacc.(_a.EndElement); _gbagc && _fabe.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gacc)
}

// ValidateWithPath validates the CT_ForEach and its children, prefixing error messages with path
func (_eafe *CT_ForEach) ValidateWithPath(path string) error {
	for _cfef, _dgeg := range _eafe.Alg {
		if _cgbd := _dgeg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _cfef)); _cgbd != nil {
			return _cgbd
		}
	}
	for _aaab, _cgeg := range _eafe.Shape {
		if _bged := _cgeg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _aaab)); _bged != nil {
			return _bged
		}
	}
	for _abegb, _bebb := range _eafe.PresOf {
		if _afbgb := _bebb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _abegb)); _afbgb != nil {
			return _afbgb
		}
	}
	for _adfd, _fcadb := range _eafe.ConstrLst {
		if _adgfe := _fcadb.ValidateWithPath(_bg.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _adfd)); _adgfe != nil {
			return _adgfe
		}
	}
	for _bgfc, _ggda := range _eafe.RuleLst {
		if _ecba := _ggda.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _bgfc)); _ecba != nil {
			return _ecba
		}
	}
	for _fbdca, _fegae := range _eafe.ForEach {
		if _cfff := _fegae.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _fbdca)); _cfff != nil {
			return _cfff
		}
	}
	for _ccfd, _babbg := range _eafe.LayoutNode {
		if _baad := _babbg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _ccfd)); _baad != nil {
			return _baad
		}
	}
	for _bgcd, _faeg := range _eafe.Choose {
		if _eecc := _faeg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _bgcd)); _eecc != nil {
			return _eecc
		}
	}
	for _cgegg, _ecc := range _eafe.ExtLst {
		if _aeefc := _ecc.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _cgegg)); _aeefc != nil {
			return _aeefc
		}
	}
	return nil
}
func (_ddab ST_SecondaryChildAlignment) String() string {
	switch _ddab {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0074"
	case 3:
		return "\u0062"
	case 4:
		return "\u006c"
	case 5:
		return "\u0072"
	}
	return ""
}
func (_gca *CT_AnimOne) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ddc := range start.Attr {
		if _ddc.Name.Local == "\u0076\u0061\u006c" {
			_gca.ValAttr.UnmarshalXMLAttr(_ddc)
			continue
		}
	}
	for {
		_feb, _fga := d.Token()
		if _fga != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u003a\u0020%\u0073", _fga)
		}
		if _cdcd, _dbf := _feb.(_a.EndElement); _dbf && _cdcd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eccbb *ST_TextAnchorHorizontal) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efed, _ddbaf := d.Token()
	if _ddbaf != nil {
		return _ddbaf
	}
	if _ccae, _fdda := _efed.(_a.EndElement); _fdda && _ccae.Name == start.Name {
		*_eccbb = 1
		return nil
	}
	if _ggbgg, _fcag := _efed.(_a.CharData); !_fcag {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _efed)
	} else {
		switch string(_ggbgg) {
		case "":
			*_eccbb = 0
		case "\u006e\u006f\u006e\u0065":
			*_eccbb = 1
		case "\u0063\u0074\u0072":
			*_eccbb = 2
		}
	}
	_efed, _ddbaf = d.Token()
	if _ddbaf != nil {
		return _ddbaf
	}
	if _bcdb, _fgbfc := _efed.(_a.EndElement); _fgbfc && _bcdb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _efed)
}
func (_ffbgf ST_ConstraintRelationship) Validate() error { return _ffbgf.ValidateWithPath("") }
func (_baafg ST_FunctionArgument) String() string {
	if _baafg.ST_VariableType != ST_VariableTypeUnset {
		return _baafg.ST_VariableType.String()
	}
	return ""
}
func (_bcgdd ST_FunctionType) String() string {
	switch _bcgdd {
	case 0:
		return ""
	case 1:
		return "\u0063\u006e\u0074"
	case 2:
		return "\u0070\u006f\u0073"
	case 3:
		return "\u0072\u0065\u0076\u0050\u006f\u0073"
	case 4:
		return "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case 5:
		return "\u0070\u006f\u0073\u004f\u0064\u0064"
	case 6:
		return "\u0076\u0061\u0072"
	case 7:
		return "\u0064\u0065\u0070t\u0068"
	case 8:
		return "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return ""
}
func (_dgcg ST_ArrowheadStyle) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_edcba := _a.Attr{}
	_edcba.Name = name
	switch _dgcg {
	case ST_ArrowheadStyleUnset:
		_edcba.Value = ""
	case ST_ArrowheadStyleAuto:
		_edcba.Value = "\u0061\u0075\u0074\u006f"
	case ST_ArrowheadStyleArr:
		_edcba.Value = "\u0061\u0072\u0072"
	case ST_ArrowheadStyleNoArr:
		_edcba.Value = "\u006e\u006f\u0041r\u0072"
	}
	return _edcba, nil
}
func (_fffb *ST_StartingElement) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfga, _bbcd := d.Token()
	if _bbcd != nil {
		return _bbcd
	}
	if _acgcab, _edgbg := _cfga.(_a.EndElement); _edgbg && _acgcab.Name == start.Name {
		*_fffb = 1
		return nil
	}
	if _ebfdg, _adgdd := _cfga.(_a.CharData); !_adgdd {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfga)
	} else {
		switch string(_ebfdg) {
		case "":
			*_fffb = 0
		case "\u006e\u006f\u0064\u0065":
			*_fffb = 1
		case "\u0074\u0072\u0061n\u0073":
			*_fffb = 2
		}
	}
	_cfga, _bbcd = d.Token()
	if _bbcd != nil {
		return _bbcd
	}
	if _fgeaee, _bedgd := _cfga.(_a.EndElement); _bedgd && _fgeaee.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfga)
}

const (
	ST_ConnectorPointUnset  ST_ConnectorPoint = 0
	ST_ConnectorPointAuto   ST_ConnectorPoint = 1
	ST_ConnectorPointBCtr   ST_ConnectorPoint = 2
	ST_ConnectorPointCtr    ST_ConnectorPoint = 3
	ST_ConnectorPointMidL   ST_ConnectorPoint = 4
	ST_ConnectorPointMidR   ST_ConnectorPoint = 5
	ST_ConnectorPointTCtr   ST_ConnectorPoint = 6
	ST_ConnectorPointBL     ST_ConnectorPoint = 7
	ST_ConnectorPointBR     ST_ConnectorPoint = 8
	ST_ConnectorPointTL     ST_ConnectorPoint = 9
	ST_ConnectorPointTR     ST_ConnectorPoint = 10
	ST_ConnectorPointRadial ST_ConnectorPoint = 11
)

func (_abcd ST_ClrAppMethod) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_abcd.String(), start)
}
func (_ecgbd ST_RotationPath) String() string {
	switch _ecgbd {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return ""
}

// Validate validates the CT_CTCategory and its children
func (_dge *CT_CTCategory) Validate() error {
	return _dge.ValidateWithPath("\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}
func (_bgbbf *ST_PyramidAccentPosition) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bgbbf = 0
	case "\u0062\u0065\u0066":
		*_bgbbf = 1
	case "\u0061\u0066\u0074":
		*_bgbbf = 2
	}
	return nil
}
func (_cbdf *ST_HierarchyAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dbee, _fgfgd := d.Token()
	if _fgfgd != nil {
		return _fgfgd
	}
	if _dgfd, _ccfeg := _dbee.(_a.EndElement); _ccfeg && _dgfd.Name == start.Name {
		*_cbdf = 1
		return nil
	}
	if _bdeeg, _ccef := _dbee.(_a.CharData); !_ccef {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dbee)
	} else {
		switch string(_bdeeg) {
		case "":
			*_cbdf = 0
		case "\u0074\u004c":
			*_cbdf = 1
		case "\u0074\u0052":
			*_cbdf = 2
		case "\u0074\u0043\u0074\u0072\u0043\u0068":
			*_cbdf = 3
		case "\u0074C\u0074\u0072\u0044\u0065\u0073":
			*_cbdf = 4
		case "\u0062\u004c":
			*_cbdf = 5
		case "\u0062\u0052":
			*_cbdf = 6
		case "\u0062\u0043\u0074\u0072\u0043\u0068":
			*_cbdf = 7
		case "\u0062C\u0074\u0072\u0044\u0065\u0073":
			*_cbdf = 8
		case "\u006c\u0054":
			*_cbdf = 9
		case "\u006c\u0042":
			*_cbdf = 10
		case "\u006c\u0043\u0074\u0072\u0043\u0068":
			*_cbdf = 11
		case "\u006cC\u0074\u0072\u0044\u0065\u0073":
			*_cbdf = 12
		case "\u0072\u0054":
			*_cbdf = 13
		case "\u0072\u0042":
			*_cbdf = 14
		case "\u0072\u0043\u0074\u0072\u0043\u0068":
			*_cbdf = 15
		case "\u0072C\u0074\u0072\u0044\u0065\u0073":
			*_cbdf = 16
		}
	}
	_dbee, _fgfgd = d.Token()
	if _fgfgd != nil {
		return _fgfgd
	}
	if _adcdc, _gagba := _dbee.(_a.EndElement); _gagba && _adcdc.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dbee)
}
func (_bcdc ST_HueDir) Validate() error { return _bcdc.ValidateWithPath("") }
func (_ebbe *CT_TextProps) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ebbe.Sp3d != nil {
		_dfdce := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_ebbe.Sp3d, _dfdce)
	}
	if _ebbe.FlatTx != nil {
		_dgefe := _a.StartElement{Name: _a.Name{Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}}
		e.EncodeElement(_ebbe.FlatTx, _dgefe)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gafa ST_HierBranchStyle) ValidateWithPath(path string) error {
	switch _gafa {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gafa))
	}
	return nil
}
func (_aba *CT_OrgChart) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bfgd := range start.Attr {
		if _bfgd.Name.Local == "\u0076\u0061\u006c" {
			_cbdb, _cgac := _b.ParseBool(_bfgd.Value)
			if _cgac != nil {
				return _cgac
			}
			_aba.ValAttr = &_cbdb
			continue
		}
	}
	for {
		_fac, _bgae := d.Token()
		if _bgae != nil {
			return _bg.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074\u003a\u0020\u0025\u0073", _bgae)
		}
		if _feaac, _fgbc := _fac.(_a.EndElement); _fgbc && _feaac.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bdde ST_TextAnchorHorizontal) ValidateWithPath(path string) error {
	switch _bdde {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdde))
	}
	return nil
}
func (_gbba *ST_NodeVerticalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gbba = 0
	case "\u0074":
		*_gbba = 1
	case "\u006d\u0069\u0064":
		*_gbba = 2
	case "\u0062":
		*_gbba = 3
	}
	return nil
}
func (_ebega *ST_DiagramTextAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dgeae, _fcgge := d.Token()
	if _fcgge != nil {
		return _fcgge
	}
	if _eedde, _fagff := _dgeae.(_a.EndElement); _fagff && _eedde.Name == start.Name {
		*_ebega = 1
		return nil
	}
	if _afee, _gdeca := _dgeae.(_a.CharData); !_gdeca {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgeae)
	} else {
		switch string(_afee) {
		case "":
			*_ebega = 0
		case "\u006c":
			*_ebega = 1
		case "\u0063\u0074\u0072":
			*_ebega = 2
		case "\u0072":
			*_ebega = 3
		}
	}
	_dgeae, _fcgge = d.Token()
	if _fcgge != nil {
		return _fcgge
	}
	if _geaea, _fbgf := _dgeae.(_a.EndElement); _fbgf && _geaea.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgeae)
}

// ValidateWithPath validates the AG_IteratorAttributes and its children, prefixing error messages with path
func (_ecb *AG_IteratorAttributes) ValidateWithPath(path string) error { return nil }
func (_afgfb *CT_DiagramDefinitionHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _afgfb.LayoutDefHdr != nil {
		_afeg := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _abde := range _afgfb.LayoutDefHdr {
			e.EncodeElement(_abde, _afeg)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewLayoutDefHdr() *LayoutDefHdr {
	_efac := &LayoutDefHdr{}
	_efac.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	return _efac
}
func (_ecaff ST_ParameterId) Validate() error { return _ecaff.ValidateWithPath("") }
func NewStyleDefHdrLst() *StyleDefHdrLst {
	_fgfge := &StyleDefHdrLst{}
	_fgfge.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
	return _fgfge
}
func (_bbgc ST_AutoTextRotation) ValidateWithPath(path string) error {
	switch _bbgc {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbgc))
	}
	return nil
}
func (_bfeg *StyleDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"
	return _bfeg.CT_StyleDefinitionHeader.MarshalXML(e, start)
}
func (_efcgg ST_SecondaryChildAlignment) ValidateWithPath(path string) error {
	switch _efcgg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efcgg))
	}
	return nil
}

// Validate validates the DataModel and its children
func (_cceeb *DataModel) Validate() error {
	return _cceeb.ValidateWithPath("\u0044a\u0074\u0061\u004d\u006f\u0064\u0065l")
}

// ValidateWithPath validates the CT_DataModel and its children, prefixing error messages with path
func (_aagg *CT_DataModel) ValidateWithPath(path string) error {
	if _gdac := _aagg.PtLst.ValidateWithPath(path + "\u002f\u0050\u0074\u004c\u0073\u0074"); _gdac != nil {
		return _gdac
	}
	if _aagg.CxnLst != nil {
		if _abbg := _aagg.CxnLst.ValidateWithPath(path + "\u002fC\u0078\u006e\u004c\u0073\u0074"); _abbg != nil {
			return _abbg
		}
	}
	if _aagg.Bg != nil {
		if _gegd := _aagg.Bg.ValidateWithPath(path + "\u002f\u0042\u0067"); _gegd != nil {
			return _gegd
		}
	}
	if _aagg.Whole != nil {
		if _fbb := _aagg.Whole.ValidateWithPath(path + "\u002f\u0057\u0068\u006f\u006c\u0065"); _fbb != nil {
			return _fbb
		}
	}
	if _aagg.ExtLst != nil {
		if _gfef := _aagg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfef != nil {
			return _gfef
		}
	}
	return nil
}
func (_egadf *ST_FunctionType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_egadf = 0
	case "\u0063\u006e\u0074":
		*_egadf = 1
	case "\u0070\u006f\u0073":
		*_egadf = 2
	case "\u0072\u0065\u0076\u0050\u006f\u0073":
		*_egadf = 3
	case "\u0070o\u0073\u0045\u0076\u0065\u006e":
		*_egadf = 4
	case "\u0070\u006f\u0073\u004f\u0064\u0064":
		*_egadf = 5
	case "\u0076\u0061\u0072":
		*_egadf = 6
	case "\u0064\u0065\u0070t\u0068":
		*_egadf = 7
	case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
		*_egadf = 8
	}
	return nil
}
func (_ffcbe ST_AutoTextRotation) String() string {
	switch _ffcbe {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0075\u0070\u0072"
	case 3:
		return "\u0067\u0072\u0061\u0076"
	}
	return ""
}

type ST_TextBlockDirection byte

// Validate validates the CT_TextProps and its children
func (_fdcb *CT_TextProps) Validate() error {
	return _fdcb.ValidateWithPath("\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073")
}
func (_agfab *ST_RotationPath) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_agfab = 0
	case "\u006e\u006f\u006e\u0065":
		*_agfab = 1
	case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
		*_agfab = 2
	}
	return nil
}
func (_fggc ST_ChildOrderType) ValidateWithPath(path string) error {
	switch _fggc {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fggc))
	}
	return nil
}
func (_ccddad ST_ParameterId) String() string {
	switch _ccddad {
	case 0:
		return ""
	case 1:
		return "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case 2:
		return "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case 3:
		return "\u0063\u0068\u0044i\u0072"
	case 4:
		return "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case 5:
		return "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case 6:
		return "\u006c\u0069\u006e\u0044\u0069\u0072"
	case 7:
		return "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case 8:
		return "\u0073\u0074\u0045\u006c\u0065\u006d"
	case 9:
		return "\u0062\u0065\u006e\u0064\u0050\u0074"
	case 10:
		return "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case 11:
		return "\u0062\u0065\u0067\u0053\u0074\u0079"
	case 12:
		return "\u0065\u006e\u0064\u0053\u0074\u0079"
	case 13:
		return "\u0064\u0069\u006d"
	case 14:
		return "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case 15:
		return "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case 16:
		return "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case 17:
		return "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case 18:
		return "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case 19:
		return "\u0074\u0078\u0044i\u0072"
	case 20:
		return "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case 21:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case 22:
		return "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case 23:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case 24:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case 25:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case 26:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case 27:
		return "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case 28:
		return "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case 29:
		return "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 30:
		return "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 31:
		return "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case 32:
		return "\u0067\u0072\u0044i\u0072"
	case 33:
		return "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case 34:
		return "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case 35:
		return "\u0062\u006b\u0070\u0074"
	case 36:
		return "\u006f\u0066\u0066"
	case 37:
		return "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case 38:
		return "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 39:
		return "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case 40:
		return "\u0073\u0074\u0041n\u0067"
	case 41:
		return "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case 42:
		return "\u0061\u0072"
	case 43:
		return "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case 44:
		return "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case 45:
		return "\u006c\u006e\u0053\u0070\u0043\u0068"
	case 46:
		return "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case 47:
		return "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case 48:
		return "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case 49:
		return "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case 50:
		return "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case 51:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case 52:
		return "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case 53:
		return "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case 54:
		return "\u0062\u0065\u0067\u0050\u0074\u0073"
	case 55:
		return "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return ""
}

// ValidateWithPath validates the CT_NumericRule and its children, prefixing error messages with path
func (_aaadgb *CT_NumericRule) ValidateWithPath(path string) error {
	if _aaadgb.ExtLst != nil {
		if _dfgfd := _aaadgb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfgfd != nil {
			return _dfgfd
		}
	}
	if _fgfbf := _aaadgb.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _fgfbf != nil {
		return _fgfbf
	}
	if _dgbe := _aaadgb.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _dgbe != nil {
		return _dgbe
	}
	if _gccg := _aaadgb.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _gccg != nil {
		return _gccg
	}
	return nil
}
func (_gcdac ST_VerticalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dggef := _a.Attr{}
	_dggef.Name = name
	switch _gcdac {
	case ST_VerticalAlignmentUnset:
		_dggef.Value = ""
	case ST_VerticalAlignmentT:
		_dggef.Value = "\u0074"
	case ST_VerticalAlignmentMid:
		_dggef.Value = "\u006d\u0069\u0064"
	case ST_VerticalAlignmentB:
		_dggef.Value = "\u0062"
	case ST_VerticalAlignmentNone:
		_dggef.Value = "\u006e\u006f\u006e\u0065"
	}
	return _dggef, nil
}
func (_eedcc *ST_ConnectorPoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eedcc = 0
	case "\u0061\u0075\u0074\u006f":
		*_eedcc = 1
	case "\u0062\u0043\u0074\u0072":
		*_eedcc = 2
	case "\u0063\u0074\u0072":
		*_eedcc = 3
	case "\u006d\u0069\u0064\u004c":
		*_eedcc = 4
	case "\u006d\u0069\u0064\u0052":
		*_eedcc = 5
	case "\u0074\u0043\u0074\u0072":
		*_eedcc = 6
	case "\u0062\u004c":
		*_eedcc = 7
	case "\u0062\u0052":
		*_eedcc = 8
	case "\u0074\u004c":
		*_eedcc = 9
	case "\u0074\u0052":
		*_eedcc = 10
	case "\u0072\u0061\u0064\u0069\u0061\u006c":
		*_eedcc = 11
	}
	return nil
}
func (_ebegb ST_ConnectorPoint) ValidateWithPath(path string) error {
	switch _ebegb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ebegb))
	}
	return nil
}
func (_bbabg ST_SecondaryLinearDirection) ValidateWithPath(path string) error {
	switch _bbabg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbabg))
	}
	return nil
}
func (_aggf *ST_PyramidAccentTextMargin) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_aggf = 0
	case "\u0073\u0074\u0065\u0070":
		*_aggf = 1
	case "\u0073\u0074\u0061c\u006b":
		*_aggf = 2
	}
	return nil
}

// ValidateWithPath validates the CT_Colors and its children, prefixing error messages with path
func (_egfd *CT_Colors) ValidateWithPath(path string) error {
	if _ecbc := _egfd.MethAttr.ValidateWithPath(path + "\u002fM\u0065\u0074\u0068\u0041\u0074\u0074r"); _ecbc != nil {
		return _ecbc
	}
	if _eddb := _egfd.HueDirAttr.ValidateWithPath(path + "/\u0048\u0075\u0065\u0044\u0069\u0072\u0041\u0074\u0074\u0072"); _eddb != nil {
		return _eddb
	}
	for _fgcc, _gacd := range _egfd.EG_ColorChoice {
		if _aeef := _gacd.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0045\u0047_C\u006fl\u006f\u0072\u0043\u0068\u006fi\u0063\u0065\u005b\u0025\u0064\u005d", path, _fgcc)); _aeef != nil {
			return _aeef
		}
	}
	return nil
}
func (_aaga ST_ConnectorDimension) Validate() error { return _aaga.ValidateWithPath("") }

type ST_NodeVerticalAlignment byte
type CT_AnimOne struct{ ValAttr ST_AnimOneStr }

// Validate validates the CT_Adj and its children
func (_efg *CT_Adj) Validate() error {
	return _efg.ValidateWithPath("\u0043\u0054\u005f\u0041\u0064\u006a")
}
func (_cgfgd *CT_Constraints) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ebbg:
	for {
		_ffdb, _ccbb := d.Token()
		if _ccbb != nil {
			return _ccbb
		}
		switch _fcfc := _ffdb.(type) {
		case _a.StartElement:
			switch _fcfc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}:
				_fdce := NewCT_Constraint()
				if _ffee := d.DecodeElement(_fdce, &_fcfc); _ffee != nil {
					return _ffee
				}
				_cgfgd.Constr = append(_cgfgd.Constr, _fdce)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061i\u006et\u0073\u0020\u0025\u0076", _fcfc.Name)
				if _faad := d.Skip(); _faad != nil {
					return _faad
				}
			}
		case _a.EndElement:
			break _ebbg
		case _a.CharData:
		}
	}
	return nil
}
func (_fgedd ST_AlgorithmType) String() string {
	switch _fgedd {
	case 0:
		return ""
	case 1:
		return "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	case 3:
		return "\u0063\u0079\u0063l\u0065"
	case 4:
		return "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case 5:
		return "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case 6:
		return "\u0070\u0079\u0072\u0061"
	case 7:
		return "\u006c\u0069\u006e"
	case 8:
		return "\u0073\u0070"
	case 9:
		return "\u0074\u0078"
	case 10:
		return "\u0073\u006e\u0061k\u0065"
	}
	return ""
}
func NewCT_ColorTransform() *CT_ColorTransform { _bbfc := &CT_ColorTransform{}; return _bbfc }

const (
	ST_VerticalAlignmentUnset ST_VerticalAlignment = 0
	ST_VerticalAlignmentT     ST_VerticalAlignment = 1
	ST_VerticalAlignmentMid   ST_VerticalAlignment = 2
	ST_VerticalAlignmentB     ST_VerticalAlignment = 3
	ST_VerticalAlignmentNone  ST_VerticalAlignment = 4
)

func NewCT_AnimOne() *CT_AnimOne { _ffg := &CT_AnimOne{}; return _ffg }
func (_bgcgd ST_StartingElement) String() string {
	switch _bgcgd {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0074\u0072\u0061n\u0073"
	}
	return ""
}

// Validate validates the CT_ChildMax and its children
func (_cgfg *CT_ChildMax) Validate() error {
	return _cgfg.ValidateWithPath("C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078")
}
func (_bdedd ST_ResizeHandlesStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_agbgc := _a.Attr{}
	_agbgc.Name = name
	switch _bdedd {
	case ST_ResizeHandlesStrUnset:
		_agbgc.Value = ""
	case ST_ResizeHandlesStrExact:
		_agbgc.Value = "\u0065\u0078\u0061c\u0074"
	case ST_ResizeHandlesStrRel:
		_agbgc.Value = "\u0072\u0065\u006c"
	}
	return _agbgc, nil
}
func (_dcee *ST_ConnectorDimension) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ddcec, _bgcfc := d.Token()
	if _bgcfc != nil {
		return _bgcfc
	}
	if _ffga, _abbf := _ddcec.(_a.EndElement); _abbf && _ffga.Name == start.Name {
		*_dcee = 1
		return nil
	}
	if _adfac, _beafg := _ddcec.(_a.CharData); !_beafg {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddcec)
	} else {
		switch string(_adfac) {
		case "":
			*_dcee = 0
		case "\u0031\u0044":
			*_dcee = 1
		case "\u0032\u0044":
			*_dcee = 2
		case "\u0063\u0075\u0073\u0074":
			*_dcee = 3
		}
	}
	_ddcec, _bgcfc = d.Token()
	if _bgcfc != nil {
		return _bgcfc
	}
	if _egba, _ccead := _ddcec.(_a.EndElement); _ccead && _egba.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddcec)
}
func (_bfbgg *ColorsDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _bfbgg.CT_ColorTransformHeaderLst.MarshalXML(e, start)
}
func (_ecbg *CT_CTName) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ecbg.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_ecbg.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _ecbg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_StyleDefinitionHeaderLst and its children
func (_acede *CT_StyleDefinitionHeaderLst) Validate() error {
	return _acede.ValidateWithPath("C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074")
}
func (_cdde ST_ArrowheadStyle) String() string {
	switch _cdde {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0061\u0072\u0072"
	case 3:
		return "\u006e\u006f\u0041r\u0072"
	}
	return ""
}
func (_afgfc *ST_ElementType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_afgfc = 0
	case "\u0061\u006c\u006c":
		*_afgfc = 1
	case "\u0064\u006f\u0063":
		*_afgfc = 2
	case "\u006e\u006f\u0064\u0065":
		*_afgfc = 3
	case "\u006e\u006f\u0072\u006d":
		*_afgfc = 4
	case "\u006eo\u006e\u004e\u006f\u0072\u006d":
		*_afgfc = 5
	case "\u0061\u0073\u0073\u0074":
		*_afgfc = 6
	case "\u006eo\u006e\u0041\u0073\u0073\u0074":
		*_afgfc = 7
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_afgfc = 8
	case "\u0070\u0072\u0065\u0073":
		*_afgfc = 9
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_afgfc = 10
	}
	return nil
}
func NewCT_DiagramDefinitionHeaderLst() *CT_DiagramDefinitionHeaderLst {
	_baeb := &CT_DiagramDefinitionHeaderLst{}
	return _baeb
}
func (_dddeb *ST_FallbackDimension) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ccbba, _dcbaf := d.Token()
	if _dcbaf != nil {
		return _dcbaf
	}
	if _eaec, _eadbf := _ccbba.(_a.EndElement); _eadbf && _eaec.Name == start.Name {
		*_dddeb = 1
		return nil
	}
	if _bcdaa, _debdc := _ccbba.(_a.CharData); !_debdc {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ccbba)
	} else {
		switch string(_bcdaa) {
		case "":
			*_dddeb = 0
		case "\u0031\u0044":
			*_dddeb = 1
		case "\u0032\u0044":
			*_dddeb = 2
		}
	}
	_ccbba, _dcbaf = d.Token()
	if _dcbaf != nil {
		return _dcbaf
	}
	if _ebdbf, _bbfcc := _ccbba.(_a.EndElement); _bbfcc && _ebdbf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ccbba)
}

// Validate validates the CT_Constraints and its children
func (_affdd *CT_Constraints) Validate() error {
	return _affdd.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073")
}

// ValidateWithPath validates the CT_LayoutNode and its children, prefixing error messages with path
func (_addgg *CT_LayoutNode) ValidateWithPath(path string) error {
	if _cdcab := _addgg.ChOrderAttr.ValidateWithPath(path + "\u002f\u0043\u0068O\u0072\u0064\u0065\u0072\u0041\u0074\u0074\u0072"); _cdcab != nil {
		return _cdcab
	}
	for _babgg, _eeade := range _addgg.Alg {
		if _acce := _eeade.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _babgg)); _acce != nil {
			return _acce
		}
	}
	for _affbe, _cgae := range _addgg.Shape {
		if _fbaf := _cgae.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _affbe)); _fbaf != nil {
			return _fbaf
		}
	}
	for _adcf, _gebd := range _addgg.PresOf {
		if _deag := _gebd.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _adcf)); _deag != nil {
			return _deag
		}
	}
	for _cgfbe, _fdbf := range _addgg.ConstrLst {
		if _gbfe := _fdbf.ValidateWithPath(_bg.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _cgfbe)); _gbfe != nil {
			return _gbfe
		}
	}
	for _ccadb, _dbea := range _addgg.RuleLst {
		if _fdbb := _dbea.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _ccadb)); _fdbb != nil {
			return _fdbb
		}
	}
	for _bfgf, _cgce := range _addgg.VarLst {
		if _gfgf := _cgce.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0056\u0061\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _bfgf)); _gfgf != nil {
			return _gfgf
		}
	}
	for _feff, _acfb := range _addgg.ForEach {
		if _caaa := _acfb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _feff)); _caaa != nil {
			return _caaa
		}
	}
	for _fbgb, _gcbf := range _addgg.LayoutNode {
		if _adag := _gcbf.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _fbgb)); _adag != nil {
			return _adag
		}
	}
	for _dcddb, _gecdg := range _addgg.Choose {
		if _dgef := _gecdg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _dcddb)); _dgef != nil {
			return _dgef
		}
	}
	for _ddfc, _caad := range _addgg.ExtLst {
		if _gced := _caad.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _ddfc)); _gced != nil {
			return _gced
		}
	}
	return nil
}

// ValidateWithPath validates the RelIds and its children, prefixing error messages with path
func (_gedcg *RelIds) ValidateWithPath(path string) error {
	if _dgbef := _gedcg.CT_RelIds.ValidateWithPath(path); _dgbef != nil {
		return _dgbef
	}
	return nil
}
func ParseUnionST_FunctionValue(s string) (ST_FunctionValue, error) { return ST_FunctionValue{}, nil }
func (_bfed *StyleDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066"
	return _bfed.CT_StyleDefinition.MarshalXML(e, start)
}
func NewColorsDefHdrLst() *ColorsDefHdrLst {
	_acffc := &ColorsDefHdrLst{}
	_acffc.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
	return _acffc
}
func (_aadc ST_DiagramTextAlignment) Validate() error { return _aadc.ValidateWithPath("") }
func (_befb *CT_LayoutVariablePropertySet) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _befb.OrgChart != nil {
		_gdc := _a.StartElement{Name: _a.Name{Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_befb.OrgChart, _gdc)
	}
	if _befb.ChMax != nil {
		_dacg := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u004da\u0078"}}
		e.EncodeElement(_befb.ChMax, _dacg)
	}
	if _befb.ChPref != nil {
		_effa := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}}
		e.EncodeElement(_befb.ChPref, _effa)
	}
	if _befb.BulletEnabled != nil {
		_fcea := _a.StartElement{Name: _a.Name{Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}}
		e.EncodeElement(_befb.BulletEnabled, _fcea)
	}
	if _befb.Dir != nil {
		_ccbe := _a.StartElement{Name: _a.Name{Local: "\u0064\u0069\u0072"}}
		e.EncodeElement(_befb.Dir, _ccbe)
	}
	if _befb.HierBranch != nil {
		_efgde := _a.StartElement{Name: _a.Name{Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}}
		e.EncodeElement(_befb.HierBranch, _efgde)
	}
	if _befb.AnimOne != nil {
		_bfabg := _a.StartElement{Name: _a.Name{Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}}
		e.EncodeElement(_befb.AnimOne, _bfabg)
	}
	if _befb.AnimLvl != nil {
		_fadb := _a.StartElement{Name: _a.Name{Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}}
		e.EncodeElement(_befb.AnimLvl, _fadb)
	}
	if _befb.ResizeHandles != nil {
		_afggg := _a.StartElement{Name: _a.Name{Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}}
		e.EncodeElement(_befb.ResizeHandles, _afggg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_afbbg ST_TextBlockDirection) ValidateWithPath(path string) error {
	switch _afbbg {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afbbg))
	}
	return nil
}

type ST_HierBranchStyle byte

func NewCT_DiagramDefinition() *CT_DiagramDefinition {
	_aed := &CT_DiagramDefinition{}
	_aed.LayoutNode = NewCT_LayoutNode()
	return _aed
}
func (_afcbe *ST_LinearDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_afcbe = 0
	case "\u0066\u0072\u006fm\u004c":
		*_afcbe = 1
	case "\u0066\u0072\u006fm\u0052":
		*_afcbe = 2
	case "\u0066\u0072\u006fm\u0054":
		*_afcbe = 3
	case "\u0066\u0072\u006fm\u0042":
		*_afcbe = 4
	}
	return nil
}
func (_fcgf *CT_PresentationOf) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bcgd := range start.Attr {
		if _bcgd.Name.Local == "\u0061\u0078\u0069\u0073" {
			_aebb, _ceaf := ParseSliceST_AxisTypes(_bcgd.Value)
			if _ceaf != nil {
				return _ceaf
			}
			_fcgf.AxisAttr = &_aebb
			continue
		}
		if _bcgd.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_eccd, _eafaf := ParseSliceST_ElementTypes(_bcgd.Value)
			if _eafaf != nil {
				return _eafaf
			}
			_fcgf.PtTypeAttr = &_eccd
			continue
		}
		if _bcgd.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_cceba, _aeag := ParseSliceST_Booleans(_bcgd.Value)
			if _aeag != nil {
				return _aeag
			}
			_fcgf.HideLastTransAttr = &_cceba
			continue
		}
		if _bcgd.Name.Local == "\u0073\u0074" {
			_bagg, _cdae := ParseSliceST_Ints(_bcgd.Value)
			if _cdae != nil {
				return _cdae
			}
			_fcgf.StAttr = &_bagg
			continue
		}
		if _bcgd.Name.Local == "\u0063\u006e\u0074" {
			_fbee, _bgda := ParseSliceST_UnsignedInts(_bcgd.Value)
			if _bgda != nil {
				return _bgda
			}
			_fcgf.CntAttr = &_fbee
			continue
		}
		if _bcgd.Name.Local == "\u0073\u0074\u0065\u0070" {
			_gafc, _aadac := ParseSliceST_Ints(_bcgd.Value)
			if _aadac != nil {
				return _aadac
			}
			_fcgf.StepAttr = &_gafc
			continue
		}
	}
_abcc:
	for {
		_dbde, _baag := d.Token()
		if _baag != nil {
			return _baag
		}
		switch _bcba := _dbde.(type) {
		case _a.StartElement:
			switch _bcba.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcgf.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _caec := d.DecodeElement(_fcgf.ExtLst, &_bcba); _caec != nil {
					return _caec
				}
			default:
				_fb.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u004f\u0066\u0020\u0025\u0076", _bcba.Name)
				if _fdca := d.Skip(); _fdca != nil {
					return _fdca
				}
			}
		case _a.EndElement:
			break _abcc
		case _a.CharData:
		}
	}
	return nil
}
func (_fgdd *ST_LinearDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffdde, _dbgb := d.Token()
	if _dbgb != nil {
		return _dbgb
	}
	if _acec, _dddcf := _ffdde.(_a.EndElement); _dddcf && _acec.Name == start.Name {
		*_fgdd = 1
		return nil
	}
	if _dabfb, _edfcc := _ffdde.(_a.CharData); !_edfcc {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffdde)
	} else {
		switch string(_dabfb) {
		case "":
			*_fgdd = 0
		case "\u0066\u0072\u006fm\u004c":
			*_fgdd = 1
		case "\u0066\u0072\u006fm\u0052":
			*_fgdd = 2
		case "\u0066\u0072\u006fm\u0054":
			*_fgdd = 3
		case "\u0066\u0072\u006fm\u0042":
			*_fgdd = 4
		}
	}
	_ffdde, _dbgb = d.Token()
	if _dbgb != nil {
		return _dbgb
	}
	if _fcdc, _becac := _ffdde.(_a.EndElement); _becac && _fcdc.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffdde)
}
func (_aabe *LayoutDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aabe.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	for _, _cbdaa := range start.Attr {
		if _cbdaa.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cgaec, _bfaad := _cbdaa.Value, error(nil)
			if _bfaad != nil {
				return _bfaad
			}
			_aabe.UniqueIdAttr = _cgaec
			continue
		}
		if _cbdaa.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_dgdbd, _aabea := _cbdaa.Value, error(nil)
			if _aabea != nil {
				return _aabea
			}
			_aabe.MinVerAttr = &_dgdbd
			continue
		}
		if _cbdaa.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_ggce, _ccce := _cbdaa.Value, error(nil)
			if _ccce != nil {
				return _ccce
			}
			_aabe.DefStyleAttr = &_ggce
			continue
		}
		if _cbdaa.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_gcbc, _abdc := _b.ParseInt(_cbdaa.Value, 10, 32)
			if _abdc != nil {
				return _abdc
			}
			_ggaf := int32(_gcbc)
			_aabe.ResIdAttr = &_ggaf
			continue
		}
	}
_bada:
	for {
		_egffg, _ddgaf := d.Token()
		if _ddgaf != nil {
			return _ddgaf
		}
		switch _bagd := _egffg.(type) {
		case _a.StartElement:
			switch _bagd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_edee := NewCT_Name()
				if _eaba := d.DecodeElement(_edee, &_bagd); _eaba != nil {
					return _eaba
				}
				_aabe.Title = append(_aabe.Title, _edee)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_fadc := NewCT_Description()
				if _dfcb := d.DecodeElement(_fadc, &_bagd); _dfcb != nil {
					return _dfcb
				}
				_aabe.Desc = append(_aabe.Desc, _fadc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_aabe.CatLst = NewCT_Categories()
				if _cfcg := d.DecodeElement(_aabe.CatLst, &_bagd); _cfcg != nil {
					return _cfcg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aabe.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _dadd := d.DecodeElement(_aabe.ExtLst, &_bagd); _dadd != nil {
					return _dadd
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u004c\u0061yo\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _bagd.Name)
				if _efcecb := d.Skip(); _efcecb != nil {
					return _efcecb
				}
			}
		case _a.EndElement:
			break _bada
		case _a.CharData:
		}
	}
	return nil
}
func (_afgf *CT_CTCategory) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", _afgf.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _bg.Sprintf("\u0025\u0076", _afgf.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_eegdg ST_TextDirection) Validate() error   { return _eegdg.ValidateWithPath("") }
func (_fdac ST_ConnectorRouting) Validate() error { return _fdac.ValidateWithPath("") }

// ValidateWithPath validates the CT_DiagramDefinitionHeader and its children, prefixing error messages with path
func (_aega *CT_DiagramDefinitionHeader) ValidateWithPath(path string) error {
	for _dacf, _edge := range _aega.Title {
		if _dae := _edge.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _dacf)); _dae != nil {
			return _dae
		}
	}
	for _bgea, _gbce := range _aega.Desc {
		if _aeb := _gbce.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _bgea)); _aeb != nil {
			return _aeb
		}
	}
	if _aega.CatLst != nil {
		if _cabc := _aega.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _cabc != nil {
			return _cabc
		}
	}
	if _aega.ExtLst != nil {
		if _fae := _aega.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fae != nil {
			return _fae
		}
	}
	return nil
}

type CT_Cxn struct {
	ModelIdAttr    ST_ModelId
	TypeAttr       ST_CxnType
	SrcIdAttr      ST_ModelId
	DestIdAttr     ST_ModelId
	SrcOrdAttr     uint32
	DestOrdAttr    uint32
	ParTransIdAttr *ST_ModelId
	SibTransIdAttr *ST_ModelId
	PresIdAttr     *string
	ExtLst         *_bb.CT_OfficeArtExtensionList
}

func (_bfgda *ST_TextDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_addb, _ffdcg := d.Token()
	if _ffdcg != nil {
		return _ffdcg
	}
	if _gdafd, _cafff := _addb.(_a.EndElement); _cafff && _gdafd.Name == start.Name {
		*_bfgda = 1
		return nil
	}
	if _eacd, _efddf := _addb.(_a.CharData); !_efddf {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _addb)
	} else {
		switch string(_eacd) {
		case "":
			*_bfgda = 0
		case "\u0066\u0072\u006fm\u0054":
			*_bfgda = 1
		case "\u0066\u0072\u006fm\u0042":
			*_bfgda = 2
		}
	}
	_addb, _ffdcg = d.Token()
	if _ffdcg != nil {
		return _ffdcg
	}
	if _ffaaf, _ebffb := _addb.(_a.EndElement); _ebffb && _ffaaf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _addb)
}
func (_bfb *CT_Adj) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bfb.IdxAttr = 1
	for _, _cff := range start.Attr {
		if _cff.Name.Local == "\u0069\u0064\u0078" {
			_gae, _ede := _b.ParseUint(_cff.Value, 10, 32)
			if _ede != nil {
				return _ede
			}
			_bfb.IdxAttr = uint32(_gae)
			continue
		}
		if _cff.Name.Local == "\u0076\u0061\u006c" {
			_ccd, _aff := _b.ParseFloat(_cff.Value, 64)
			if _aff != nil {
				return _aff
			}
			_bfb.ValAttr = _ccd
			continue
		}
	}
	for {
		_ag, _fgfb := d.Token()
		if _fgfb != nil {
			return _bg.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0041d\u006a\u003a\u0020\u0025\u0073", _fgfb)
		}
		if _bcf, _afg := _ag.(_a.EndElement); _afg && _bcf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bdce *CT_SampleData) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cbeb := range start.Attr {
		if _cbeb.Name.Local == "\u0075\u0073\u0065\u0044\u0065\u0066" {
			_aafdd, _gffa := _b.ParseBool(_cbeb.Value)
			if _gffa != nil {
				return _gffa
			}
			_bdce.UseDefAttr = &_aafdd
			continue
		}
	}
_bebae:
	for {
		_babcf, _gaed := d.Token()
		if _gaed != nil {
			return _gaed
		}
		switch _dbcg := _babcf.(type) {
		case _a.StartElement:
			switch _dbcg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}:
				_bdce.DataModel = NewCT_DataModel()
				if _ccfde := d.DecodeElement(_bdce.DataModel, &_dbcg); _ccfde != nil {
					return _ccfde
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053a\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061 \u0025\u0076", _dbcg.Name)
				if _dfgg := d.Skip(); _dfgg != nil {
					return _dfgg
				}
			}
		case _a.EndElement:
			break _bebae
		case _a.CharData:
		}
	}
	return nil
}
func (_bbcc ST_BoolOperator) String() string {
	switch _bbcc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0065\u0071\u0075"
	case 3:
		return "\u0067\u0074\u0065"
	case 4:
		return "\u006c\u0074\u0065"
	}
	return ""
}
func (_daec ST_FunctionOperator) String() string {
	switch _daec {
	case 0:
		return ""
	case 1:
		return "\u0065\u0071\u0075"
	case 2:
		return "\u006e\u0065\u0071"
	case 3:
		return "\u0067\u0074"
	case 4:
		return "\u006c\u0074"
	case 5:
		return "\u0067\u0074\u0065"
	case 6:
		return "\u006c\u0074\u0065"
	}
	return ""
}
func (_ccb *CT_ChildMax) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gaeb := range start.Attr {
		if _gaeb.Name.Local == "\u0076\u0061\u006c" {
			_afb, _ffbg := _b.ParseInt(_gaeb.Value, 10, 32)
			if _ffbg != nil {
				return _ffbg
			}
			_fee := int32(_afb)
			_ccb.ValAttr = &_fee
			continue
		}
	}
	for {
		_gbbe, _fcac := d.Token()
		if _fcac != nil {
			return _bg.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078\u003a\u0020\u0025\u0073", _fcac)
		}
		if _aad, _eef := _gbbe.(_a.EndElement); _eef && _aad.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Categories and its children
func (_fef *CT_Categories) Validate() error {
	return _fef.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}
func ParseSliceST_UnsignedInts(s string) (ST_UnsignedInts, error) { return ST_UnsignedInts{}, nil }
func (_ebede ST_StartingElement) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ebede.String(), start)
}

type StyleDefHdrLst struct{ CT_StyleDefinitionHeaderLst }

func (_edaga ST_Breakpoint) Validate() error { return _edaga.ValidateWithPath("") }
func (_ea *CT_Algorithm) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_gga, _eaf := _ea.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _eaf != nil {
		return _eaf
	}
	start.Attr = append(start.Attr, _gga)
	if _ea.RevAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0076"}, Value: _bg.Sprintf("\u0025\u0076", *_ea.RevAttr)})
	}
	e.EncodeToken(start)
	if _ea.Param != nil {
		_cab := _a.StartElement{Name: _a.Name{Local: "\u0070\u0061\u0072a\u006d"}}
		for _, _aee := range _ea.Param {
			e.EncodeElement(_aee, _cab)
		}
	}
	if _ea.ExtLst != nil {
		_cgf := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ea.ExtLst, _cgf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Pt and its children
func (_gcff *CT_Pt) Validate() error { return _gcff.ValidateWithPath("\u0043\u0054\u005fP\u0074") }

// Validate validates the CT_LayoutVariablePropertySet and its children
func (_gcdg *CT_LayoutVariablePropertySet) Validate() error {
	return _gcdg.ValidateWithPath("\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074")
}

// ValidateWithPath validates the CT_CTStyleLabel and its children, prefixing error messages with path
func (_cacgg *CT_CTStyleLabel) ValidateWithPath(path string) error {
	if _cacgg.FillClrLst != nil {
		if _beaf := _cacgg.FillClrLst.ValidateWithPath(path + "/\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _beaf != nil {
			return _beaf
		}
	}
	if _cacgg.LinClrLst != nil {
		if _bef := _cacgg.LinClrLst.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _bef != nil {
			return _bef
		}
	}
	if _cacgg.EffectClrLst != nil {
		if _daf := _cacgg.EffectClrLst.ValidateWithPath(path + "\u002f\u0045\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _daf != nil {
			return _daf
		}
	}
	if _cacgg.TxLinClrLst != nil {
		if _bbgb := _cacgg.TxLinClrLst.ValidateWithPath(path + "\u002f\u0054\u0078L\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _bbgb != nil {
			return _bbgb
		}
	}
	if _cacgg.TxFillClrLst != nil {
		if _gdb := _cacgg.TxFillClrLst.ValidateWithPath(path + "\u002f\u0054\u0078\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _gdb != nil {
			return _gdb
		}
	}
	if _cacgg.TxEffectClrLst != nil {
		if _egc := _cacgg.TxEffectClrLst.ValidateWithPath(path + "\u002fT\u0078E\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _egc != nil {
			return _egc
		}
	}
	if _cacgg.ExtLst != nil {
		if _efc := _cacgg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efc != nil {
			return _efc
		}
	}
	return nil
}
func (_fcgeb ST_PyramidAccentPosition) Validate() error { return _fcgeb.ValidateWithPath("") }

// ValidateWithPath validates the StyleDefHdrLst and its children, prefixing error messages with path
func (_gagga *StyleDefHdrLst) ValidateWithPath(path string) error {
	if _ggcg := _gagga.CT_StyleDefinitionHeaderLst.ValidateWithPath(path); _ggcg != nil {
		return _ggcg
	}
	return nil
}
func (_fbcg ST_ConstraintType) Validate() error { return _fbcg.ValidateWithPath("") }
func (_cffeg ST_OutputShapeType) ValidateWithPath(path string) error {
	switch _cffeg {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cffeg))
	}
	return nil
}

const (
	ST_OffsetUnset ST_Offset = 0
	ST_OffsetCtr   ST_Offset = 1
	ST_OffsetOff   ST_Offset = 2
)

func (_ccgb *RelIds) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0072\u0065\u006c\u0049\u0064\u0073"
	return _ccgb.CT_RelIds.MarshalXML(e, start)
}
func (_efcab ST_HierBranchStyle) Validate() error { return _efcab.ValidateWithPath("") }

type ST_ConnectorPoint byte

func NewCT_StyleLabel() *CT_StyleLabel { _agdg := &CT_StyleLabel{}; return _agdg }
func (_dbdg ST_StartingElement) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cgfcg := _a.Attr{}
	_cgfcg.Name = name
	switch _dbdg {
	case ST_StartingElementUnset:
		_cgfcg.Value = ""
	case ST_StartingElementNode:
		_cgfcg.Value = "\u006e\u006f\u0064\u0065"
	case ST_StartingElementTrans:
		_cgfcg.Value = "\u0074\u0072\u0061n\u0073"
	}
	return _cgfcg, nil
}

// ValidateWithPath validates the CT_Pt and its children, prefixing error messages with path
func (_bdbga *CT_Pt) ValidateWithPath(path string) error {
	if _ggbgd := _bdbga.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _ggbgd != nil {
		return _ggbgd
	}
	if _ebdc := _bdbga.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _ebdc != nil {
		return _ebdc
	}
	if _bdbga.CxnIdAttr != nil {
		if _cfbgc := _bdbga.CxnIdAttr.ValidateWithPath(path + "\u002f\u0043\u0078\u006e\u0049\u0064\u0041\u0074\u0074\u0072"); _cfbgc != nil {
			return _cfbgc
		}
	}
	if _bdbga.PrSet != nil {
		if _bbaeb := _bdbga.PrSet.ValidateWithPath(path + "\u002f\u0050\u0072\u0053\u0065\u0074"); _bbaeb != nil {
			return _bbaeb
		}
	}
	if _bdbga.SpPr != nil {
		if _gcbd := _bdbga.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gcbd != nil {
			return _gcbd
		}
	}
	if _bdbga.T != nil {
		if _bfda := _bdbga.T.ValidateWithPath(path + "\u002f\u0054"); _bfda != nil {
			return _bfda
		}
	}
	if _bdbga.ExtLst != nil {
		if _gbff := _bdbga.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbff != nil {
			return _gbff
		}
	}
	return nil
}

type CT_LayoutNode struct {
	NameAttr     *string
	StyleLblAttr *string
	ChOrderAttr  ST_ChildOrderType
	MoveWithAttr *string
	Alg          []*CT_Algorithm
	Shape        []*CT_Shape
	PresOf       []*CT_PresentationOf
	ConstrLst    []*CT_Constraints
	RuleLst      []*CT_Rules
	VarLst       []*CT_LayoutVariablePropertySet
	ForEach      []*CT_ForEach
	LayoutNode   []*CT_LayoutNode
	Choose       []*CT_Choose
	ExtLst       []*_bb.CT_OfficeArtExtensionList
}

func (_bfgbc *CT_DiagramDefinitionHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bfbd := range start.Attr {
		if _bfbd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_adcd, _aacf := _bfbd.Value, error(nil)
			if _aacf != nil {
				return _aacf
			}
			_bfgbc.UniqueIdAttr = _adcd
			continue
		}
		if _bfbd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_fgg, _bbde := _bfbd.Value, error(nil)
			if _bbde != nil {
				return _bbde
			}
			_bfgbc.MinVerAttr = &_fgg
			continue
		}
		if _bfbd.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_fde, _egec := _bfbd.Value, error(nil)
			if _egec != nil {
				return _egec
			}
			_bfgbc.DefStyleAttr = &_fde
			continue
		}
		if _bfbd.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_efdd, _eead := _b.ParseInt(_bfbd.Value, 10, 32)
			if _eead != nil {
				return _eead
			}
			_fcbaa := int32(_efdd)
			_bfgbc.ResIdAttr = &_fcbaa
			continue
		}
	}
_edcc:
	for {
		_bgdf, _agbg := d.Token()
		if _agbg != nil {
			return _agbg
		}
		switch _bfga := _bgdf.(type) {
		case _a.StartElement:
			switch _bfga.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dfag := NewCT_Name()
				if _cadg := d.DecodeElement(_dfag, &_bfga); _cadg != nil {
					return _cadg
				}
				_bfgbc.Title = append(_bfgbc.Title, _dfag)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_bfaa := NewCT_Description()
				if _bgba := d.DecodeElement(_bfaa, &_bfga); _bgba != nil {
					return _bgba
				}
				_bfgbc.Desc = append(_bfgbc.Desc, _bfaa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_bfgbc.CatLst = NewCT_Categories()
				if _dbaa := d.DecodeElement(_bfgbc.CatLst, &_bfga); _dbaa != nil {
					return _dbaa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfgbc.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _ggfc := d.DecodeElement(_bfgbc.ExtLst, &_bfga); _ggfc != nil {
					return _ggfc
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0044\u0069a\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072\u0020\u0025\u0076", _bfga.Name)
				if _baeag := d.Skip(); _baeag != nil {
					return _baeag
				}
			}
		case _a.EndElement:
			break _edcc
		case _a.CharData:
		}
	}
	return nil
}
func (_fcdd *ST_CenterShapeMapping) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fcdd = 0
	case "\u006e\u006f\u006e\u0065":
		*_fcdd = 1
	case "\u0066\u004e\u006fd\u0065":
		*_fcdd = 2
	}
	return nil
}

type ST_LinearDirection byte

func (_gfbb *CT_StyleLabel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", _gfbb.NameAttr)})
	e.EncodeToken(start)
	if _gfbb.Scene3d != nil {
		_faegd := _a.StartElement{Name: _a.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_gfbb.Scene3d, _faegd)
	}
	if _gfbb.Sp3d != nil {
		_aedc := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_gfbb.Sp3d, _aedc)
	}
	if _gfbb.TxPr != nil {
		_ebeee := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gfbb.TxPr, _ebeee)
	}
	if _gfbb.Style != nil {
		_dddc := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_gfbb.Style, _dddc)
	}
	if _gfbb.ExtLst != nil {
		_gcbbd := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gfbb.ExtLst, _gcbbd)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fbdcab ST_Offset) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_accd := _a.Attr{}
	_accd.Name = name
	switch _fbdcab {
	case ST_OffsetUnset:
		_accd.Value = ""
	case ST_OffsetCtr:
		_accd.Value = "\u0063\u0074\u0072"
	case ST_OffsetOff:
		_accd.Value = "\u006f\u0066\u0066"
	}
	return _accd, nil
}
func (_bdcf ST_ChildAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_egce := _a.Attr{}
	_egce.Name = name
	switch _bdcf {
	case ST_ChildAlignmentUnset:
		_egce.Value = ""
	case ST_ChildAlignmentT:
		_egce.Value = "\u0074"
	case ST_ChildAlignmentB:
		_egce.Value = "\u0062"
	case ST_ChildAlignmentL:
		_egce.Value = "\u006c"
	case ST_ChildAlignmentR:
		_egce.Value = "\u0072"
	}
	return _egce, nil
}
func (_gdda ST_CenterShapeMapping) Validate() error { return _gdda.ValidateWithPath("") }

// Validate validates the CT_Parameter and its children
func (_eace *CT_Parameter) Validate() error {
	return _eace.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072")
}
func NewAG_ConstraintRefAttributes() *AG_ConstraintRefAttributes {
	_ade := &AG_ConstraintRefAttributes{}
	return _ade
}
func (_cfgc *CT_TextProps) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_cfeb:
	for {
		_gdbca, _fecf := d.Token()
		if _fecf != nil {
			return _fecf
		}
		switch _fcgg := _gdbca.(type) {
		case _a.StartElement:
			switch _fcgg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}:
				_cfgc.Sp3d = _bb.NewCT_Shape3D()
				if _beac := d.DecodeElement(_cfgc.Sp3d, &_fcgg); _beac != nil {
					return _beac
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}:
				_cfgc.FlatTx = _bb.NewCT_FlatText()
				if _ceee := d.DecodeElement(_cfgc.FlatTx, &_fcgg); _ceee != nil {
					return _ceee
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0065\u0078t\u0050\u0072\u006f\u0070\u0073\u0020\u0025\u0076", _fcgg.Name)
				if _gabfb := d.Skip(); _gabfb != nil {
					return _gabfb
				}
			}
		case _a.EndElement:
			break _cfeb
		case _a.CharData:
		}
	}
	return nil
}
func (_aeeff *CT_Constraint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bbac := range start.Attr {
		if _bbac.Name.Local == "\u006f\u0070" {
			_aeeff.OpAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
		if _bbac.Name.Local == "\u0076\u0061\u006c" {
			_cag, _ebea := _b.ParseFloat(_bbac.Value, 64)
			if _ebea != nil {
				return _ebea
			}
			_aeeff.ValAttr = &_cag
			continue
		}
		if _bbac.Name.Local == "\u0066\u0061\u0063\u0074" {
			_gbf, _agca := _b.ParseFloat(_bbac.Value, 64)
			if _agca != nil {
				return _agca
			}
			_aeeff.FactAttr = &_gbf
			continue
		}
		if _bbac.Name.Local == "\u0074\u0079\u0070\u0065" {
			_aeeff.TypeAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
		if _bbac.Name.Local == "\u0066\u006f\u0072" {
			_aeeff.ForAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
		if _bbac.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_ged, _agga := _bbac.Value, error(nil)
			if _agga != nil {
				return _agga
			}
			_aeeff.ForNameAttr = &_ged
			continue
		}
		if _bbac.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_aeeff.PtTypeAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
		if _bbac.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_aeeff.RefTypeAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
		if _bbac.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_aeeff.RefForAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
		if _bbac.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_dbgce, _dadb := _bbac.Value, error(nil)
			if _dadb != nil {
				return _dadb
			}
			_aeeff.RefForNameAttr = &_dbgce
			continue
		}
		if _bbac.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_aeeff.RefPtTypeAttr.UnmarshalXMLAttr(_bbac)
			continue
		}
	}
_dabc:
	for {
		_babe, _adcg := d.Token()
		if _adcg != nil {
			return _adcg
		}
		switch _gfe := _babe.(type) {
		case _a.StartElement:
			switch _gfe.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeeff.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _caff := d.DecodeElement(_aeeff.ExtLst, &_gfe); _caff != nil {
					return _caff
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043o\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074 \u0025\u0076", _gfe.Name)
				if _dacc := d.Skip(); _dacc != nil {
					return _dacc
				}
			}
		case _a.EndElement:
			break _dabc
		case _a.CharData:
		}
	}
	return nil
}
func (_fcabf *CT_Rules) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _fcabf.Rule != nil {
		_gfddg := _a.StartElement{Name: _a.Name{Local: "\u0072\u0075\u006c\u0065"}}
		for _, _acae := range _fcabf.Rule {
			e.EncodeElement(_acae, _gfddg)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewCT_CxnList() *CT_CxnList { _edgc := &CT_CxnList{}; return _edgc }
func (_dgbgb *CT_ForEach) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bcag := range start.Attr {
		if _bcag.Name.Local == "\u0072\u0065\u0066" {
			_fbeca, _accaf := _bcag.Value, error(nil)
			if _accaf != nil {
				return _accaf
			}
			_dgbgb.RefAttr = &_fbeca
			continue
		}
		if _bcag.Name.Local == "\u006e\u0061\u006d\u0065" {
			_bdef, _agcf := _bcag.Value, error(nil)
			if _agcf != nil {
				return _agcf
			}
			_dgbgb.NameAttr = &_bdef
			continue
		}
		if _bcag.Name.Local == "\u0061\u0078\u0069\u0073" {
			_cbg, _aeba := ParseSliceST_AxisTypes(_bcag.Value)
			if _aeba != nil {
				return _aeba
			}
			_dgbgb.AxisAttr = &_cbg
			continue
		}
		if _bcag.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_feeg, _gcab := ParseSliceST_ElementTypes(_bcag.Value)
			if _gcab != nil {
				return _gcab
			}
			_dgbgb.PtTypeAttr = &_feeg
			continue
		}
		if _bcag.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_geee, _fega := ParseSliceST_Booleans(_bcag.Value)
			if _fega != nil {
				return _fega
			}
			_dgbgb.HideLastTransAttr = &_geee
			continue
		}
		if _bcag.Name.Local == "\u0073\u0074" {
			_gefa, _edgb := ParseSliceST_Ints(_bcag.Value)
			if _edgb != nil {
				return _edgb
			}
			_dgbgb.StAttr = &_gefa
			continue
		}
		if _bcag.Name.Local == "\u0063\u006e\u0074" {
			_agfa, _adfe := ParseSliceST_UnsignedInts(_bcag.Value)
			if _adfe != nil {
				return _adfe
			}
			_dgbgb.CntAttr = &_agfa
			continue
		}
		if _bcag.Name.Local == "\u0073\u0074\u0065\u0070" {
			_bgef, _bcfg := ParseSliceST_Ints(_bcag.Value)
			if _bcfg != nil {
				return _bcfg
			}
			_dgbgb.StepAttr = &_bgef
			continue
		}
	}
_fgb:
	for {
		_aef, _bcbg := d.Token()
		if _bcbg != nil {
			return _bcbg
		}
		switch _dfgf := _aef.(type) {
		case _a.StartElement:
			switch _dfgf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_aacb := NewCT_Algorithm()
				if _cgca := d.DecodeElement(_aacb, &_dfgf); _cgca != nil {
					return _cgca
				}
				_dgbgb.Alg = append(_dgbgb.Alg, _aacb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ecgg := NewCT_Shape()
				if _ddae := d.DecodeElement(_ecgg, &_dfgf); _ddae != nil {
					return _ddae
				}
				_dgbgb.Shape = append(_dgbgb.Shape, _ecgg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_fdfef := NewCT_PresentationOf()
				if _egeab := d.DecodeElement(_fdfef, &_dfgf); _egeab != nil {
					return _egeab
				}
				_dgbgb.PresOf = append(_dgbgb.PresOf, _fdfef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_cafe := NewCT_Constraints()
				if _aacg := d.DecodeElement(_cafe, &_dfgf); _aacg != nil {
					return _aacg
				}
				_dgbgb.ConstrLst = append(_dgbgb.ConstrLst, _cafe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_acgc := NewCT_Rules()
				if _fbg := d.DecodeElement(_acgc, &_dfgf); _fbg != nil {
					return _fbg
				}
				_dgbgb.RuleLst = append(_dgbgb.RuleLst, _acgc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_dafb := NewCT_ForEach()
				if _cccb := d.DecodeElement(_dafb, &_dfgf); _cccb != nil {
					return _cccb
				}
				_dgbgb.ForEach = append(_dgbgb.ForEach, _dafb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_dcdf := NewCT_LayoutNode()
				if _abbe := d.DecodeElement(_dcdf, &_dfgf); _abbe != nil {
					return _abbe
				}
				_dgbgb.LayoutNode = append(_dgbgb.LayoutNode, _dcdf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_gdbd := NewCT_Choose()
				if _cage := d.DecodeElement(_gdbd, &_dfgf); _cage != nil {
					return _cage
				}
				_dgbgb.Choose = append(_dgbgb.Choose, _gdbd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcgd := _bb.NewCT_OfficeArtExtensionList()
				if _gggg := d.DecodeElement(_dcgd, &_dfgf); _gggg != nil {
					return _gggg
				}
				_dgbgb.ExtLst = append(_dgbgb.ExtLst, _dcgd)
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fF\u006f\u0072\u0045\u0061\u0063\u0068\u0020\u0025\u0076", _dfgf.Name)
				if _gbfd := d.Skip(); _gbfd != nil {
					return _gbfd
				}
			}
		case _a.EndElement:
			break _fgb
		case _a.CharData:
		}
	}
	return nil
}
func (_ffdgd ST_HierarchyAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ffdgd.String(), start)
}
func (_fgc *CT_Category) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", _fgc.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _bg.Sprintf("\u0025\u0076", _fgc.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cdgba ST_LinearDirection) Validate() error { return _cdgba.ValidateWithPath("") }
func (_ebcg ST_CxnType) ValidateWithPath(path string) error {
	switch _ebcg {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ebcg))
	}
	return nil
}
func (_cdddg *CT_When) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cdddg.FuncAttr = ST_FunctionType(1)
	_cdddg.OpAttr = ST_FunctionOperator(1)
	for _, _daab := range start.Attr {
		if _daab.Name.Local == "\u006e\u0061\u006d\u0065" {
			_acff, _agag := _daab.Value, error(nil)
			if _agag != nil {
				return _agag
			}
			_cdddg.NameAttr = &_acff
			continue
		}
		if _daab.Name.Local == "\u0061\u0072\u0067" {
			_dddcd, _gdeg := ParseUnionST_FunctionArgument(_daab.Value)
			if _gdeg != nil {
				return _gdeg
			}
			_cdddg.ArgAttr = &_dddcd
			continue
		}
		if _daab.Name.Local == "\u0076\u0061\u006c" {
			_degda, _gdef := ParseUnionST_FunctionValue(_daab.Value)
			if _gdef != nil {
				return _gdef
			}
			_cdddg.ValAttr = _degda
			continue
		}
		if _daab.Name.Local == "\u0066\u0075\u006e\u0063" {
			_cdddg.FuncAttr.UnmarshalXMLAttr(_daab)
			continue
		}
		if _daab.Name.Local == "\u006f\u0070" {
			_cdddg.OpAttr.UnmarshalXMLAttr(_daab)
			continue
		}
		if _daab.Name.Local == "\u0061\u0078\u0069\u0073" {
			_bfde, _gcbfc := ParseSliceST_AxisTypes(_daab.Value)
			if _gcbfc != nil {
				return _gcbfc
			}
			_cdddg.AxisAttr = &_bfde
			continue
		}
		if _daab.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_dcef, _geeed := ParseSliceST_ElementTypes(_daab.Value)
			if _geeed != nil {
				return _geeed
			}
			_cdddg.PtTypeAttr = &_dcef
			continue
		}
		if _daab.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_dcebg, _bgcb := ParseSliceST_Booleans(_daab.Value)
			if _bgcb != nil {
				return _bgcb
			}
			_cdddg.HideLastTransAttr = &_dcebg
			continue
		}
		if _daab.Name.Local == "\u0073\u0074" {
			_cafc, _dbded := ParseSliceST_Ints(_daab.Value)
			if _dbded != nil {
				return _dbded
			}
			_cdddg.StAttr = &_cafc
			continue
		}
		if _daab.Name.Local == "\u0063\u006e\u0074" {
			_cgag, _caddaf := ParseSliceST_UnsignedInts(_daab.Value)
			if _caddaf != nil {
				return _caddaf
			}
			_cdddg.CntAttr = &_cgag
			continue
		}
		if _daab.Name.Local == "\u0073\u0074\u0065\u0070" {
			_gedd, _cabb := ParseSliceST_Ints(_daab.Value)
			if _cabb != nil {
				return _cabb
			}
			_cdddg.StepAttr = &_gedd
			continue
		}
	}
_gcgf:
	for {
		_ebacb, _dced := d.Token()
		if _dced != nil {
			return _dced
		}
		switch _cceec := _ebacb.(type) {
		case _a.StartElement:
			switch _cceec.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_deagf := NewCT_Algorithm()
				if _gggd := d.DecodeElement(_deagf, &_cceec); _gggd != nil {
					return _gggd
				}
				_cdddg.Alg = append(_cdddg.Alg, _deagf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ddcc := NewCT_Shape()
				if _acad := d.DecodeElement(_ddcc, &_cceec); _acad != nil {
					return _acad
				}
				_cdddg.Shape = append(_cdddg.Shape, _ddcc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_ccab := NewCT_PresentationOf()
				if _edaf := d.DecodeElement(_ccab, &_cceec); _edaf != nil {
					return _edaf
				}
				_cdddg.PresOf = append(_cdddg.PresOf, _ccab)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_fdbba := NewCT_Constraints()
				if _agcaf := d.DecodeElement(_fdbba, &_cceec); _agcaf != nil {
					return _agcaf
				}
				_cdddg.ConstrLst = append(_cdddg.ConstrLst, _fdbba)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_adcgd := NewCT_Rules()
				if _gbfbb := d.DecodeElement(_adcgd, &_cceec); _gbfbb != nil {
					return _gbfbb
				}
				_cdddg.RuleLst = append(_cdddg.RuleLst, _adcgd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_eggce := NewCT_ForEach()
				if _ffgb := d.DecodeElement(_eggce, &_cceec); _ffgb != nil {
					return _ffgb
				}
				_cdddg.ForEach = append(_cdddg.ForEach, _eggce)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_bgde := NewCT_LayoutNode()
				if _bdbe := d.DecodeElement(_bgde, &_cceec); _bdbe != nil {
					return _bdbe
				}
				_cdddg.LayoutNode = append(_cdddg.LayoutNode, _bgde)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_bfdbf := NewCT_Choose()
				if _beecd := d.DecodeElement(_bfdbf, &_cceec); _beecd != nil {
					return _beecd
				}
				_cdddg.Choose = append(_cdddg.Choose, _bfdbf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agea := _bb.NewCT_OfficeArtExtensionList()
				if _acbd := d.DecodeElement(_agea, &_cceec); _acbd != nil {
					return _acbd
				}
				_cdddg.ExtLst = append(_cdddg.ExtLst, _agea)
			default:
				_fb.Log("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0057\u0068\u0065\u006e\u0020\u0025\u0076", _cceec.Name)
				if _bbdea := d.Skip(); _bbdea != nil {
					return _bbdea
				}
			}
		case _a.EndElement:
			break _gcgf
		case _a.CharData:
		}
	}
	return nil
}
func (_abfd ST_FunctionOperator) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eaag := _a.Attr{}
	_eaag.Name = name
	switch _abfd {
	case ST_FunctionOperatorUnset:
		_eaag.Value = ""
	case ST_FunctionOperatorEqu:
		_eaag.Value = "\u0065\u0071\u0075"
	case ST_FunctionOperatorNeq:
		_eaag.Value = "\u006e\u0065\u0071"
	case ST_FunctionOperatorGt:
		_eaag.Value = "\u0067\u0074"
	case ST_FunctionOperatorLt:
		_eaag.Value = "\u006c\u0074"
	case ST_FunctionOperatorGte:
		_eaag.Value = "\u0067\u0074\u0065"
	case ST_FunctionOperatorLte:
		_eaag.Value = "\u006c\u0074\u0065"
	}
	return _eaag, nil
}

// Validate validates the CT_SDCategories and its children
func (_egbb *CT_SDCategories) Validate() error {
	return _egbb.ValidateWithPath("\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}
func (_bcdg ST_LayoutShapeType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bcdg.ST_ShapeType != _bb.ST_ShapeTypeUnset {
		e.EncodeToken(_a.CharData(_bcdg.ST_ShapeType.String()))
	}
	if _bcdg.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		e.EncodeToken(_a.CharData(_bcdg.ST_OutputShapeType.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

const (
	ST_GrowDirectionUnset ST_GrowDirection = 0
	ST_GrowDirectionTL    ST_GrowDirection = 1
	ST_GrowDirectionTR    ST_GrowDirection = 2
	ST_GrowDirectionBL    ST_GrowDirection = 3
	ST_GrowDirectionBR    ST_GrowDirection = 4
)

func (_cdfdg *ST_GrowDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cdfdg = 0
	case "\u0074\u004c":
		*_cdfdg = 1
	case "\u0074\u0052":
		*_cdfdg = 2
	case "\u0062\u004c":
		*_cdfdg = 3
	case "\u0062\u0052":
		*_cdfdg = 4
	}
	return nil
}
func (_cfbf *CT_Parameter) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_dbfe, _cecd := _cfbf.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _cecd != nil {
		return _cecd
	}
	start.Attr = append(start.Attr, _dbfe)
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _cfbf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gfed ST_TextAnchorHorizontal) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eagab := _a.Attr{}
	_eagab.Name = name
	switch _gfed {
	case ST_TextAnchorHorizontalUnset:
		_eagab.Value = ""
	case ST_TextAnchorHorizontalNone:
		_eagab.Value = "\u006e\u006f\u006e\u0065"
	case ST_TextAnchorHorizontalCtr:
		_eagab.Value = "\u0063\u0074\u0072"
	}
	return _eagab, nil
}
func (_dafa ST_OutputShapeType) String() string {
	switch _dafa {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	}
	return ""
}
func NewCT_ColorTransformHeaderLst() *CT_ColorTransformHeaderLst {
	_acdg := &CT_ColorTransformHeaderLst{}
	return _acdg
}
func NewCT_CTDescription() *CT_CTDescription { _babg := &CT_CTDescription{}; return _babg }

type ST_AxisTypes []ST_AxisType

func (_gada *CT_ElemPropSet) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bbe := range start.Attr {
		if _bbe.Name.Local == "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074" {
			_afgga, _geb := _b.ParseBool(_bbe.Value)
			if _geb != nil {
				return _geb
			}
			_gada.CustFlipVertAttr = &_afgga
			continue
		}
		if _bbe.Name.Local == "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044" {
			_efeg, _adbfd := ParseUnionST_ModelId(_bbe.Value)
			if _adbfd != nil {
				return _adbfd
			}
			_gada.PresAssocIDAttr = &_efeg
			continue
		}
		if _bbe.Name.Local == "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072" {
			_cbag, _ebba := _b.ParseBool(_bbe.Value)
			if _ebba != nil {
				return _ebba
			}
			_gada.CustFlipHorAttr = &_cbag
			continue
		}
		if _bbe.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_gaad, _dcea := _bbe.Value, error(nil)
			if _dcea != nil {
				return _dcea
			}
			_gada.PresStyleLblAttr = &_gaad
			continue
		}
		if _bbe.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0058" {
			_abdec, _abee := _b.ParseInt(_bbe.Value, 10, 32)
			if _abee != nil {
				return _abee
			}
			_efce := int32(_abdec)
			_gada.CustSzXAttr = &_efce
			continue
		}
		if _bbe.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074" {
			_fgfcb, _aagd := _b.ParseInt(_bbe.Value, 10, 32)
			if _aagd != nil {
				return _aagd
			}
			_babb := int32(_fgfcb)
			_gada.PresStyleCntAttr = &_babb
			continue
		}
		if _bbe.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0059" {
			_bead, _cccg := _b.ParseInt(_bbe.Value, 10, 32)
			if _cccg != nil {
				return _cccg
			}
			_dgbg := int32(_bead)
			_gada.CustSzYAttr = &_dgbg
			continue
		}
		if _bbe.Name.Local == "\u006co\u0043\u0061\u0074\u0049\u0064" {
			_aaea, _bgcf := _bbe.Value, error(nil)
			if _bgcf != nil {
				return _bgcf
			}
			_gada.LoCatIdAttr = &_aaea
			continue
		}
		if _bbe.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058" {
			_cabg, _gdfe := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _gdfe != nil {
				return _gdfe
			}
			_gada.CustScaleXAttr = &_cabg
			continue
		}
		if _bbe.Name.Local == "\u0071s\u0043\u0061\u0074\u0049\u0064" {
			_adgd, _ega := _bbe.Value, error(nil)
			if _ega != nil {
				return _ega
			}
			_gada.QsCatIdAttr = &_adgd
			continue
		}
		if _bbe.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059" {
			_dceb, _fdba := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _fdba != nil {
				return _fdba
			}
			_gada.CustScaleYAttr = &_dceb
			continue
		}
		if _bbe.Name.Local == "\u0063u\u0073\u0074\u0041\u006e\u0067" {
			_fgge, _ecg := _b.ParseInt(_bbe.Value, 10, 32)
			if _ecg != nil {
				return _ecg
			}
			_dfad := int32(_fgge)
			_gada.CustAngAttr = &_dfad
			continue
		}
		if _bbe.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064" {
			_dbc, _bgfb := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _bgfb != nil {
				return _bgfb
			}
			_gada.CustRadScaleRadAttr = &_dbc
			continue
		}
		if _bbe.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058" {
			_degd, _gaef := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _gaef != nil {
				return _gaef
			}
			_gada.CustLinFactXAttr = &_degd
			continue
		}
		if _bbe.Name.Local == "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_bfdf, _egggd := _bbe.Value, error(nil)
			if _egggd != nil {
				return _egggd
			}
			_gada.QsTypeIdAttr = &_bfdf
			continue
		}
		if _bbe.Name.Local == "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066" {
			_cebge, _aggca := _b.ParseBool(_bbe.Value)
			if _aggca != nil {
				return _aggca
			}
			_gada.Coherent3DOffAttr = &_cebge
			continue
		}
		if _bbe.Name.Local == "\u0063\u0075\u0073t\u0054" {
			_dcfb, _ffff := _b.ParseBool(_bbe.Value)
			if _ffff != nil {
				return _ffff
			}
			_gada.CustTAttr = &_dcfb
			continue
		}
		if _bbe.Name.Local == "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065" {
			_ddea, _bgacc := _bbe.Value, error(nil)
			if _bgacc != nil {
				return _bgacc
			}
			_gada.PresNameAttr = &_ddea
			continue
		}
		if _bbe.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059" {
			_cffg, _aafd := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _aafd != nil {
				return _aafd
			}
			_gada.CustLinFactNeighborYAttr = &_cffg
			continue
		}
		if _bbe.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059" {
			_cfg, _baaf := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _baaf != nil {
				return _baaf
			}
			_gada.CustLinFactYAttr = &_cfg
			continue
		}
		if _bbe.Name.Local == "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064" {
			_afac, _dagb := _bbe.Value, error(nil)
			if _dagb != nil {
				return _dagb
			}
			_gada.LoTypeIdAttr = &_afac
			continue
		}
		if _bbe.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063" {
			_ddda, _gacg := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _gacg != nil {
				return _gacg
			}
			_gada.CustRadScaleIncAttr = &_ddda
			continue
		}
		if _bbe.Name.Local == "\u0070\u0068\u006cd\u0072" {
			_aebe, _bcaa := _b.ParseBool(_bbe.Value)
			if _bcaa != nil {
				return _bcaa
			}
			_gada.PhldrAttr = &_aebe
			continue
		}
		if _bbe.Name.Local == "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_gge, _cdgb := _bbe.Value, error(nil)
			if _cdgb != nil {
				return _cdgb
			}
			_gada.CsTypeIdAttr = &_gge
			continue
		}
		if _bbe.Name.Local == "\u0063s\u0043\u0061\u0074\u0049\u0064" {
			_effee, _fabbb := _bbe.Value, error(nil)
			if _fabbb != nil {
				return _fabbb
			}
			_gada.CsCatIdAttr = &_effee
			continue
		}
		if _bbe.Name.Local == "\u0070\u0068\u006c\u0064\u0072\u0054" {
			_efddb, _ebgd := _bbe.Value, error(nil)
			if _ebgd != nil {
				return _ebgd
			}
			_gada.PhldrTAttr = &_efddb
			continue
		}
		if _bbe.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078" {
			_gcdfd, _gagb := _b.ParseInt(_bbe.Value, 10, 32)
			if _gagb != nil {
				return _gagb
			}
			_dccdb := int32(_gcdfd)
			_gada.PresStyleIdxAttr = &_dccdb
			continue
		}
		if _bbe.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058" {
			_acgb, _dgfg := ParseUnionST_PrSetCustVal(_bbe.Value)
			if _dgfg != nil {
				return _dgfg
			}
			_gada.CustLinFactNeighborXAttr = &_acgb
			continue
		}
	}
_dgaa:
	for {
		_gebg, _bdaa := d.Token()
		if _bdaa != nil {
			return _bdaa
		}
		switch _babf := _gebg.(type) {
		case _a.StartElement:
			switch _babf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}:
				_gada.PresLayoutVars = NewCT_LayoutVariablePropertySet()
				if _edfd := d.DecodeElement(_gada.PresLayoutVars, &_babf); _edfd != nil {
					return _edfd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_gada.Style = _bb.NewCT_ShapeStyle()
				if _bfba := d.DecodeElement(_gada.Style, &_babf); _bfba != nil {
					return _bfba
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072\u006fp\u0053e\u0074\u0020\u0025\u0076", _babf.Name)
				if _cgfb := d.Skip(); _cgfb != nil {
					return _cgfb
				}
			}
		case _a.EndElement:
			break _dgaa
		case _a.CharData:
		}
	}
	return nil
}
func (_afacf ST_Direction) ValidateWithPath(path string) error {
	switch _afacf {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afacf))
	}
	return nil
}
func (_gdcgd *ST_ChildDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gdcgd = 0
	case "\u0068\u006f\u0072\u007a":
		*_gdcgd = 1
	case "\u0076\u0065\u0072\u0074":
		*_gdcgd = 2
	}
	return nil
}

const (
	ST_AutoTextRotationUnset ST_AutoTextRotation = 0
	ST_AutoTextRotationNone  ST_AutoTextRotation = 1
	ST_AutoTextRotationUpr   ST_AutoTextRotation = 2
	ST_AutoTextRotationGrav  ST_AutoTextRotation = 3
)

// ValidateWithPath validates the CT_AdjLst and its children, prefixing error messages with path
func (_dbg *CT_AdjLst) ValidateWithPath(path string) error {
	for _cae, _abb := range _dbg.Adj {
		if _gfce := _abb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0041\u0064\u006a\u005b\u0025\u0064\u005d", path, _cae)); _gfce != nil {
			return _gfce
		}
	}
	return nil
}

type ST_DiagramTextAlignment byte

func (_gcgbd ST_TextDirection) ValidateWithPath(path string) error {
	switch _gcgbd {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gcgbd))
	}
	return nil
}

type ST_Direction byte

func (_ecgd ST_DiagramTextAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gafaf := _a.Attr{}
	_gafaf.Name = name
	switch _ecgd {
	case ST_DiagramTextAlignmentUnset:
		_gafaf.Value = ""
	case ST_DiagramTextAlignmentL:
		_gafaf.Value = "\u006c"
	case ST_DiagramTextAlignmentCtr:
		_gafaf.Value = "\u0063\u0074\u0072"
	case ST_DiagramTextAlignmentR:
		_gafaf.Value = "\u0072"
	}
	return _gafaf, nil
}

type ST_Offset byte

func (_geea *CT_HierBranchStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _geea.ValAttr != ST_HierBranchStyleUnset {
		_cgdg, _dcdfa := _geea.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _dcdfa != nil {
			return _dcdfa
		}
		start.Attr = append(start.Attr, _cgdg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_efge ST_GrowDirection) Validate() error { return _efge.ValidateWithPath("") }
func (_bceb ST_ModelId) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bceb.Int32 != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0064", *_bceb.Int32)))
	}
	if _bceb.ST_Guid != nil {
		e.EncodeToken(_a.CharData(*_bceb.ST_Guid))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}
func NewCT_BulletEnabled() *CT_BulletEnabled { _fade := &CT_BulletEnabled{}; return _fade }
func (_bga *CT_BulletEnabled) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bga.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_bga.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the LayoutDefHdrLst and its children
func (_gbeffe *LayoutDefHdrLst) Validate() error {
	return _gbeffe.ValidateWithPath("\u004ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}
func NewCT_StyleDefinition() *CT_StyleDefinition { _cdfbg := &CT_StyleDefinition{}; return _cdfbg }
func (_cebaf ST_ContinueDirection) String() string {
	switch _cebaf {
	case 0:
		return ""
	case 1:
		return "\u0072\u0065\u0076\u0044\u0069\u0072"
	case 2:
		return "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_ColorTransformHeaderLst and its children, prefixing error messages with path
func (_fffdg *CT_ColorTransformHeaderLst) ValidateWithPath(path string) error {
	for _ddefc, _cadf := range _fffdg.ColorsDefHdr {
		if _gafg := _cadf.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043ol\u006f\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _ddefc)); _gafg != nil {
			return _gafg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SDDescription and its children, prefixing error messages with path
func (_abcf *CT_SDDescription) ValidateWithPath(path string) error { return nil }

const (
	ST_BreakpointUnset  ST_Breakpoint = 0
	ST_BreakpointEndCnv ST_Breakpoint = 1
	ST_BreakpointBal    ST_Breakpoint = 2
	ST_BreakpointFixed  ST_Breakpoint = 3
)

func NewCT_PtList() *CT_PtList { _ffaf := &CT_PtList{}; return _ffaf }
func (_bagf ST_Offset) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bagf.String(), start)
}

// ST_LayoutShapeType is a union type
type ST_LayoutShapeType struct {
	ST_ShapeType       _bb.ST_ShapeType
	ST_OutputShapeType ST_OutputShapeType
}

func (_cfcb *ST_CxnType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bcgc, _dbdc := d.Token()
	if _dbdc != nil {
		return _dbdc
	}
	if _bcfee, _ccgc := _bcgc.(_a.EndElement); _ccgc && _bcfee.Name == start.Name {
		*_cfcb = 1
		return nil
	}
	if _bcdge, _bgfac := _bcgc.(_a.CharData); !_bgfac {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcgc)
	} else {
		switch string(_bcdge) {
		case "":
			*_cfcb = 0
		case "\u0070\u0061\u0072O\u0066":
			*_cfcb = 1
		case "\u0070\u0072\u0065\u0073\u004f\u0066":
			*_cfcb = 2
		case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
			*_cfcb = 3
		case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
			*_cfcb = 4
		}
	}
	_bcgc, _dbdc = d.Token()
	if _dbdc != nil {
		return _dbdc
	}
	if _dbffg, _cdef := _bcgc.(_a.EndElement); _cdef && _dbffg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcgc)
}
func NewCT_ResizeHandles() *CT_ResizeHandles { _dbff := &CT_ResizeHandles{}; return _dbff }
func (_bbea *ST_SecondaryChildAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cace, _cdege := d.Token()
	if _cdege != nil {
		return _cdege
	}
	if _badec, _egee := _cace.(_a.EndElement); _egee && _badec.Name == start.Name {
		*_bbea = 1
		return nil
	}
	if _fdgb, _eggf := _cace.(_a.CharData); !_eggf {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cace)
	} else {
		switch string(_fdgb) {
		case "":
			*_bbea = 0
		case "\u006e\u006f\u006e\u0065":
			*_bbea = 1
		case "\u0074":
			*_bbea = 2
		case "\u0062":
			*_bbea = 3
		case "\u006c":
			*_bbea = 4
		case "\u0072":
			*_bbea = 5
		}
	}
	_cace, _cdege = d.Token()
	if _cdege != nil {
		return _cdege
	}
	if _adcc, _efad := _cace.(_a.EndElement); _efad && _adcc.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cace)
}

type CT_StyleDefinitionHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	ResIdAttr    *int32
	Title        []*CT_SDName
	Desc         []*CT_SDDescription
	CatLst       *CT_SDCategories
	ExtLst       *_bb.CT_OfficeArtExtensionList
}

func (_cadaf *ST_ParameterVal) ValidateWithPath(path string) error {
	_daabb := []string{}
	if _cadaf.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		_daabb = append(_daabb, "\u0053\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _cadaf.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		_daabb = append(_daabb, "S\u0054_\u0056\u0065\u0072\u0074\u0069\u0063\u0061\u006cA\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _cadaf.ST_ChildDirection != ST_ChildDirectionUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0044\u0069\u0072\u0065c\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_ChildAlignment != ST_ChildAlignmentUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067n\u006d\u0065\u006e\u0074")
	}
	if _cadaf.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0053\u0065\u0063\u006f\u006e\u0064\u0061\u0072y\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _cadaf.ST_LinearDirection != ST_LinearDirectionUnset {
		_daabb = append(_daabb, "\u0053T\u005fL\u0069\u006e\u0065\u0061\u0072D\u0069\u0072e\u0063\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		_daabb = append(_daabb, "S\u0054\u005f\u0053\u0065\u0063\u006fn\u0064\u0061\u0072\u0079\u004c\u0069\u006e\u0065\u0061r\u0044\u0069\u0072e\u0063t\u0069\u006f\u006e")
	}
	if _cadaf.ST_StartingElement != ST_StartingElementUnset {
		_daabb = append(_daabb, "\u0053T\u005fS\u0074\u0061\u0072\u0074\u0069n\u0067\u0045l\u0065\u006d\u0065\u006e\u0074")
	}
	if _cadaf.ST_BendPoint != ST_BendPointUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005fB\u0065\u006e\u0064\u0050\u006f\u0069\u006e\u0074")
	}
	if _cadaf.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0043on\u006e\u0065\u0063\u0074\u006f\u0072\u0052\u006f\u0075\u0074\u0069\u006e\u0067")
	}
	if _cadaf.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0041\u0072\u0072\u006f\u0077\u0068\u0065\u0061\u0064S\u0074\u0079\u006c\u0065")
	}
	if _cadaf.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		_daabb = append(_daabb, "S\u0054\u005f\u0043\u006fnn\u0065c\u0074\u006f\u0072\u0044\u0069m\u0065\u006e\u0073\u0069\u006f\u006e")
	}
	if _cadaf.ST_RotationPath != ST_RotationPathUnset {
		_daabb = append(_daabb, "\u0053T\u005fR\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0050\u0061\u0074\u0068")
	}
	if _cadaf.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		_daabb = append(_daabb, "S\u0054\u005f\u0043\u0065nt\u0065r\u0053\u0068\u0061\u0070\u0065M\u0061\u0070\u0070\u0069\u006e\u0067")
	}
	if _cadaf.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u004e\u006f\u0064\u0065\u0048\u006f\u0072\u0069z\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _cadaf.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		_daabb = append(_daabb, "\u0053T\u005f\u004e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0069\u0063a\u006c\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _cadaf.ST_FallbackDimension != ST_FallbackDimensionUnset {
		_daabb = append(_daabb, "S\u0054_\u0046\u0061\u006c\u006c\u0062\u0061\u0063\u006bD\u0069\u006d\u0065\u006esi\u006f\u006e")
	}
	if _cadaf.ST_TextDirection != ST_TextDirectionUnset {
		_daabb = append(_daabb, "\u0053\u0054_\u0054\u0065\u0078t\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		_daabb = append(_daabb, "\u0053T\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041\u0063\u0063e\u006e\u0074\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041c\u0063\u0065\u006e\u0074\u0054\u0065\u0078\u0074\u004d\u0061r\u0067\u0069\u006e")
	}
	if _cadaf.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		_daabb = append(_daabb, "S\u0054\u005f\u0054\u0065xt\u0042l\u006f\u0063\u006b\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005fTe\u0078\u0074\u0041\u006e\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c")
	}
	if _cadaf.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		_daabb = append(_daabb, "S\u0054\u005f\u0054\u0065xt\u0041n\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0069\u0063\u0061\u006c")
	}
	if _cadaf.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005fDi\u0061\u0067\u0072\u0061\u006d\u0054\u0065\u0078\u0074\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _cadaf.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0041ut\u006f\u0054\u0065\u0078\u0074\u0052\u006f\u0074\u0061\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_GrowDirection != ST_GrowDirectionUnset {
		_daabb = append(_daabb, "\u0053\u0054_\u0047\u0072\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_FlowDirection != ST_FlowDirectionUnset {
		_daabb = append(_daabb, "\u0053\u0054_\u0046\u006c\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _cadaf.ST_ContinueDirection != ST_ContinueDirectionUnset {
		_daabb = append(_daabb, "S\u0054_\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065D\u0069\u0072\u0065\u0063ti\u006f\u006e")
	}
	if _cadaf.ST_Breakpoint != ST_BreakpointUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0070\u006f\u0069\u006e\u0074")
	}
	if _cadaf.ST_Offset != ST_OffsetUnset {
		_daabb = append(_daabb, "\u0053T\u005f\u004f\u0066\u0066\u0073\u0065t")
	}
	if _cadaf.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		_daabb = append(_daabb, "S\u0054\u005f\u0048\u0069er\u0061r\u0063\u0068\u0079\u0041\u006ci\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _cadaf.Int32 != nil {
		_daabb = append(_daabb, "\u0049\u006e\u00743\u0032")
	}
	if _cadaf.Float64 != nil {
		_daabb = append(_daabb, "\u0046l\u006f\u0061\u0074\u0036\u0034")
	}
	if _cadaf.Bool != nil {
		_daabb = append(_daabb, "\u0042\u006f\u006f\u006c")
	}
	if _cadaf.StringVal != nil {
		_daabb = append(_daabb, "\u0053t\u0072\u0069\u006e\u0067\u0056\u0061l")
	}
	if _cadaf.ST_ConnectorPoint != ST_ConnectorPointUnset {
		_daabb = append(_daabb, "\u0053\u0054\u005f\u0043\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072P\u006f\u0069\u006e\u0074")
	}
	if len(_daabb) > 1 {
		return _bg.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _daabb)
	}
	return nil
}
func (_ebagb *ColorsDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"
	return _ebagb.CT_ColorTransformHeader.MarshalXML(e, start)
}
func NewCT_When() *CT_When {
	_beabf := &CT_When{}
	_beabf.FuncAttr = ST_FunctionType(1)
	_beabf.OpAttr = ST_FunctionOperator(1)
	return _beabf
}
func (_ddegf *ST_CenterShapeMapping) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_edba, _adea := d.Token()
	if _adea != nil {
		return _adea
	}
	if _acege, _ffdda := _edba.(_a.EndElement); _ffdda && _acege.Name == start.Name {
		*_ddegf = 1
		return nil
	}
	if _egcb, _acgcc := _edba.(_a.CharData); !_acgcc {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edba)
	} else {
		switch string(_egcb) {
		case "":
			*_ddegf = 0
		case "\u006e\u006f\u006e\u0065":
			*_ddegf = 1
		case "\u0066\u004e\u006fd\u0065":
			*_ddegf = 2
		}
	}
	_edba, _adea = d.Token()
	if _adea != nil {
		return _adea
	}
	if _eabab, _cfge := _edba.(_a.EndElement); _cfge && _eabab.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edba)
}
func (_ebf *CT_DataModel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	_bcfb := _a.StartElement{Name: _a.Name{Local: "\u0070\u0074\u004cs\u0074"}}
	e.EncodeElement(_ebf.PtLst, _bcfb)
	if _ebf.CxnLst != nil {
		_edf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}}
		e.EncodeElement(_ebf.CxnLst, _edf)
	}
	if _ebf.Bg != nil {
		_eeee := _a.StartElement{Name: _a.Name{Local: "\u0062\u0067"}}
		e.EncodeElement(_ebf.Bg, _eeee)
	}
	if _ebf.Whole != nil {
		_bgee := _a.StartElement{Name: _a.Name{Local: "\u0077\u0068\u006fl\u0065"}}
		e.EncodeElement(_ebf.Whole, _bgee)
	}
	if _ebf.ExtLst != nil {
		_gce := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebf.ExtLst, _gce)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewCT_Category() *CT_Category { _fdb := &CT_Category{}; return _fdb }
func (_gbeff *CT_StyleDefinitionHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _gbeff.UniqueIdAttr)})
	if _gbeff.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _bg.Sprintf("\u0025\u0076", *_gbeff.MinVerAttr)})
	}
	if _gbeff.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_gbeff.ResIdAttr)})
	}
	e.EncodeToken(start)
	_cecg := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _gbdb := range _gbeff.Title {
		e.EncodeElement(_gbdb, _cecg)
	}
	_gebc := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _baade := range _gbeff.Desc {
		e.EncodeElement(_baade, _gebc)
	}
	if _gbeff.CatLst != nil {
		_aeaf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbeff.CatLst, _aeaf)
	}
	if _gbeff.ExtLst != nil {
		_dcggf := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbeff.ExtLst, _dcggf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_HierBranchStyleUnset ST_HierBranchStyle = 0
	ST_HierBranchStyleL     ST_HierBranchStyle = 1
	ST_HierBranchStyleR     ST_HierBranchStyle = 2
	ST_HierBranchStyleHang  ST_HierBranchStyle = 3
	ST_HierBranchStyleStd   ST_HierBranchStyle = 4
	ST_HierBranchStyleInit  ST_HierBranchStyle = 5
)

func (_deca ST_PyramidAccentPosition) String() string {
	switch _deca {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0066"
	case 2:
		return "\u0061\u0066\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_ChildPref and its children, prefixing error messages with path
func (_eddg *CT_ChildPref) ValidateWithPath(path string) error {
	if _eddg.ValAttr != nil {
		if *_eddg.ValAttr < -1 {
			return _bg.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_eddg.ValAttr)
		}
	}
	return nil
}
func (_fgcbg ST_TextBlockDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgcbg.String(), start)
}
func (_ceff ST_CenterShapeMapping) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ceff.String(), start)
}

// Validate validates the AG_IteratorAttributes and its children
func (_ga *AG_IteratorAttributes) Validate() error {
	return _ga.ValidateWithPath("A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073")
}
func NewCT_HierBranchStyle() *CT_HierBranchStyle { _gefb := &CT_HierBranchStyle{}; return _gefb }
func (_bfffc *ST_HierarchyAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfffc = 0
	case "\u0074\u004c":
		*_bfffc = 1
	case "\u0074\u0052":
		*_bfffc = 2
	case "\u0074\u0043\u0074\u0072\u0043\u0068":
		*_bfffc = 3
	case "\u0074C\u0074\u0072\u0044\u0065\u0073":
		*_bfffc = 4
	case "\u0062\u004c":
		*_bfffc = 5
	case "\u0062\u0052":
		*_bfffc = 6
	case "\u0062\u0043\u0074\u0072\u0043\u0068":
		*_bfffc = 7
	case "\u0062C\u0074\u0072\u0044\u0065\u0073":
		*_bfffc = 8
	case "\u006c\u0054":
		*_bfffc = 9
	case "\u006c\u0042":
		*_bfffc = 10
	case "\u006c\u0043\u0074\u0072\u0043\u0068":
		*_bfffc = 11
	case "\u006cC\u0074\u0072\u0044\u0065\u0073":
		*_bfffc = 12
	case "\u0072\u0054":
		*_bfffc = 13
	case "\u0072\u0042":
		*_bfffc = 14
	case "\u0072\u0043\u0074\u0072\u0043\u0068":
		*_bfffc = 15
	case "\u0072C\u0074\u0072\u0044\u0065\u0073":
		*_bfffc = 16
	}
	return nil
}

// ValidateWithPath validates the CT_PresentationOf and its children, prefixing error messages with path
func (_edef *CT_PresentationOf) ValidateWithPath(path string) error {
	if _edef.ExtLst != nil {
		if _bcga := _edef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcga != nil {
			return _bcga
		}
	}
	return nil
}
func (_bdfcb *ST_ChildAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bdfcb = 0
	case "\u0074":
		*_bdfcb = 1
	case "\u0062":
		*_bdfcb = 2
	case "\u006c":
		*_bdfcb = 3
	case "\u0072":
		*_bdfcb = 4
	}
	return nil
}
func (_ddgaa *ST_SecondaryLinearDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ddgaa = 0
	case "\u006e\u006f\u006e\u0065":
		*_ddgaa = 1
	case "\u0066\u0072\u006fm\u004c":
		*_ddgaa = 2
	case "\u0066\u0072\u006fm\u0052":
		*_ddgaa = 3
	case "\u0066\u0072\u006fm\u0054":
		*_ddgaa = 4
	case "\u0066\u0072\u006fm\u0042":
		*_ddgaa = 5
	}
	return nil
}
func (_bfebf *LayoutDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f"
	return _bfebf.CT_DiagramDefinition.MarshalXML(e, start)
}
func (_afdbd ST_DiagramTextAlignment) ValidateWithPath(path string) error {
	switch _afdbd {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afdbd))
	}
	return nil
}
func (_efdaa *ST_ElementType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffea, _bcfec := d.Token()
	if _bcfec != nil {
		return _bcfec
	}
	if _ebdg, _egefe := _ffea.(_a.EndElement); _egefe && _ebdg.Name == start.Name {
		*_efdaa = 1
		return nil
	}
	if _cdad, _edgea := _ffea.(_a.CharData); !_edgea {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffea)
	} else {
		switch string(_cdad) {
		case "":
			*_efdaa = 0
		case "\u0061\u006c\u006c":
			*_efdaa = 1
		case "\u0064\u006f\u0063":
			*_efdaa = 2
		case "\u006e\u006f\u0064\u0065":
			*_efdaa = 3
		case "\u006e\u006f\u0072\u006d":
			*_efdaa = 4
		case "\u006eo\u006e\u004e\u006f\u0072\u006d":
			*_efdaa = 5
		case "\u0061\u0073\u0073\u0074":
			*_efdaa = 6
		case "\u006eo\u006e\u0041\u0073\u0073\u0074":
			*_efdaa = 7
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_efdaa = 8
		case "\u0070\u0072\u0065\u0073":
			*_efdaa = 9
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_efdaa = 10
		}
	}
	_ffea, _bcfec = d.Token()
	if _bcfec != nil {
		return _bcfec
	}
	if _agef, _aabc := _ffea.(_a.EndElement); _aabc && _agef.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffea)
}
func (_gefc ST_PyramidAccentTextMargin) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gefc.String(), start)
}

type ST_ConstraintRelationship byte

// Validate validates the CT_ResizeHandles and its children
func (_cdaa *CT_ResizeHandles) Validate() error {
	return _cdaa.ValidateWithPath("\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073")
}
func (_ggdea *ST_HueDir) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_acfcg, _egdae := d.Token()
	if _egdae != nil {
		return _egdae
	}
	if _caag, _gcafe := _acfcg.(_a.EndElement); _gcafe && _caag.Name == start.Name {
		*_ggdea = 1
		return nil
	}
	if _edfb, _aeca := _acfcg.(_a.CharData); !_aeca {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acfcg)
	} else {
		switch string(_edfb) {
		case "":
			*_ggdea = 0
		case "\u0063\u0077":
			*_ggdea = 1
		case "\u0063\u0063\u0077":
			*_ggdea = 2
		}
	}
	_acfcg, _egdae = d.Token()
	if _egdae != nil {
		return _egdae
	}
	if _efdgf, _agaa := _acfcg.(_a.EndElement); _agaa && _efdgf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acfcg)
}

type CT_CTCategory struct {
	TypeAttr string
	PriAttr  uint32
}

func (_cbae *ST_ModelId) ValidateWithPath(path string) error {
	_dafd := []string{}
	if _cbae.Int32 != nil {
		_dafd = append(_dafd, "\u0049\u006e\u00743\u0032")
	}
	if _cbae.ST_Guid != nil {
		_dafd = append(_dafd, "\u0053T\u005f\u0047\u0075\u0069\u0064")
	}
	if len(_dafd) > 1 {
		return _bg.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dafd)
	}
	return nil
}
func (_deaae ST_ChildDirection) Validate() error { return _deaae.ValidateWithPath("") }

type ST_FallbackDimension byte

// ValidateWithPath validates the CT_HierBranchStyle and its children, prefixing error messages with path
func (_degf *CT_HierBranchStyle) ValidateWithPath(path string) error {
	if _dagec := _degf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dagec != nil {
		return _dagec
	}
	return nil
}
func NewCT_SampleData() *CT_SampleData { _effeb := &CT_SampleData{}; return _effeb }

// ValidateWithPath validates the CT_DiagramDefinitionHeaderLst and its children, prefixing error messages with path
func (_gbaf *CT_DiagramDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _effe, _ddbb := range _gbaf.LayoutDefHdr {
		if _ffcc := _ddbb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u004cay\u006f\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _effe)); _ffcc != nil {
			return _ffcc
		}
	}
	return nil
}
func (_agafe ST_ConnectorRouting) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fcga := _a.Attr{}
	_fcga.Name = name
	switch _agafe {
	case ST_ConnectorRoutingUnset:
		_fcga.Value = ""
	case ST_ConnectorRoutingStra:
		_fcga.Value = "\u0073\u0074\u0072\u0061"
	case ST_ConnectorRoutingBend:
		_fcga.Value = "\u0062\u0065\u006e\u0064"
	case ST_ConnectorRoutingCurve:
		_fcga.Value = "\u0063\u0075\u0072v\u0065"
	case ST_ConnectorRoutingLongCurve:
		_fcga.Value = "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return _fcga, nil
}
func (_dfffd *CT_DataModel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dfffd.PtLst = NewCT_PtList()
_bfgc:
	for {
		_cede, _acab := d.Token()
		if _acab != nil {
			return _acab
		}
		switch _abefe := _cede.(type) {
		case _a.StartElement:
			switch _abefe.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _gabd := d.DecodeElement(_dfffd.PtLst, &_abefe); _gabd != nil {
					return _gabd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_dfffd.CxnLst = NewCT_CxnList()
				if _ffcb := d.DecodeElement(_dfffd.CxnLst, &_abefe); _ffcb != nil {
					return _ffcb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_dfffd.Bg = _bb.NewCT_BackgroundFormatting()
				if _cafa := d.DecodeElement(_dfffd.Bg, &_abefe); _cafa != nil {
					return _cafa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_dfffd.Whole = _bb.NewCT_WholeE2oFormatting()
				if _fbc := d.DecodeElement(_dfffd.Whole, &_abefe); _fbc != nil {
					return _fbc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfffd.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _adde := d.DecodeElement(_dfffd.ExtLst, &_abefe); _adde != nil {
					return _adde
				}
			default:
				_fb.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0061\u0074a\u004d\u006f\u0064\u0065\u006c\u0020\u0025\u0076", _abefe.Name)
				if _dcae := d.Skip(); _dcae != nil {
					return _dcae
				}
			}
		case _a.EndElement:
			break _bfgc
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Name and its children, prefixing error messages with path
func (_aace *CT_Name) ValidateWithPath(path string) error { return nil }

const (
	ST_DirectionUnset ST_Direction = 0
	ST_DirectionNorm  ST_Direction = 1
	ST_DirectionRev   ST_Direction = 2
)

// Validate validates the CT_DiagramDefinitionHeaderLst and its children
func (_cgaf *CT_DiagramDefinitionHeaderLst) Validate() error {
	return _cgaf.ValidateWithPath("\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074")
}

type CT_DiagramDefinitionHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	DefStyleAttr *string
	ResIdAttr    *int32
	Title        []*CT_Name
	Desc         []*CT_Description
	CatLst       *CT_Categories
	ExtLst       *_bb.CT_OfficeArtExtensionList
}

const (
	ST_DiagramTextAlignmentUnset ST_DiagramTextAlignment = 0
	ST_DiagramTextAlignmentL     ST_DiagramTextAlignment = 1
	ST_DiagramTextAlignmentCtr   ST_DiagramTextAlignment = 2
	ST_DiagramTextAlignmentR     ST_DiagramTextAlignment = 3
)

func NewCT_StyleDefinitionHeaderLst() *CT_StyleDefinitionHeaderLst {
	_cfbbg := &CT_StyleDefinitionHeaderLst{}
	return _cfbbg
}
func (_aage *ST_ChildAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ddbg, _gaafc := d.Token()
	if _gaafc != nil {
		return _gaafc
	}
	if _dfagg, _gggb := _ddbg.(_a.EndElement); _gggb && _dfagg.Name == start.Name {
		*_aage = 1
		return nil
	}
	if _fcgff, _bdgff := _ddbg.(_a.CharData); !_bdgff {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddbg)
	} else {
		switch string(_fcgff) {
		case "":
			*_aage = 0
		case "\u0074":
			*_aage = 1
		case "\u0062":
			*_aage = 2
		case "\u006c":
			*_aage = 3
		case "\u0072":
			*_aage = 4
		}
	}
	_ddbg, _gaafc = d.Token()
	if _gaafc != nil {
		return _gaafc
	}
	if _fedf, _ffada := _ddbg.(_a.EndElement); _ffada && _fedf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddbg)
}

// ValidateWithPath validates the CT_Constraint and its children, prefixing error messages with path
func (_fcba *CT_Constraint) ValidateWithPath(path string) error {
	if _afd := _fcba.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _afd != nil {
		return _afd
	}
	if _fcba.ExtLst != nil {
		if _abff := _fcba.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abff != nil {
			return _abff
		}
	}
	if _acee := _fcba.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _acee != nil {
		return _acee
	}
	if _gfgb := _fcba.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _gfgb != nil {
		return _gfgb
	}
	if _eeg := _fcba.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _eeg != nil {
		return _eeg
	}
	if _ecab := _fcba.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _ecab != nil {
		return _ecab
	}
	if _agcg := _fcba.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _agcg != nil {
		return _agcg
	}
	if _caab := _fcba.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _caab != nil {
		return _caab
	}
	return nil
}

const (
	ST_FunctionTypeUnset    ST_FunctionType = 0
	ST_FunctionTypeCnt      ST_FunctionType = 1
	ST_FunctionTypePos      ST_FunctionType = 2
	ST_FunctionTypeRevPos   ST_FunctionType = 3
	ST_FunctionTypePosEven  ST_FunctionType = 4
	ST_FunctionTypePosOdd   ST_FunctionType = 5
	ST_FunctionTypeVar      ST_FunctionType = 6
	ST_FunctionTypeDepth    ST_FunctionType = 7
	ST_FunctionTypeMaxDepth ST_FunctionType = 8
)

func (_cgaed ST_SecondaryChildAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cgaed.String(), start)
}
func (_badd ST_FunctionOperator) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_badd.String(), start)
}

type ST_FlowDirection byte

func (_aefb *CT_PresentationOf) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _aefb.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_aefb.AxisAttr)})
	}
	if _aefb.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_aefb.PtTypeAttr)})
	}
	if _aefb.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_aefb.HideLastTransAttr)})
	}
	if _aefb.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_aefb.StAttr)})
	}
	if _aefb.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_aefb.CntAttr)})
	}
	if _aefb.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _bg.Sprintf("\u0025\u0076", *_aefb.StepAttr)})
	}
	e.EncodeToken(start)
	if _aefb.ExtLst != nil {
		_cbgg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aefb.ExtLst, _cbgg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the LayoutDef and its children
func (_dcfa *LayoutDef) Validate() error {
	return _dcfa.ValidateWithPath("\u004ca\u0079\u006f\u0075\u0074\u0044\u0065f")
}

// ValidateWithPath validates the CT_SDCategories and its children, prefixing error messages with path
func (_cgced *CT_SDCategories) ValidateWithPath(path string) error {
	for _affbec, _ecgb := range _cgced.Cat {
		if _cbage := _ecgb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _affbec)); _cbage != nil {
			return _cbage
		}
	}
	return nil
}
func NewCT_NumericRule() *CT_NumericRule { _bgec := &CT_NumericRule{}; return _bgec }
func (_fcbf ST_DiagramTextAlignment) String() string {
	switch _fcbf {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}
func ParseSliceST_Booleans(s string) (ST_Booleans, error) { return ST_Booleans{}, nil }
func (_adcba *ST_AlgorithmType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cggf, _adfcg := d.Token()
	if _adfcg != nil {
		return _adfcg
	}
	if _egef, _ebgg := _cggf.(_a.EndElement); _ebgg && _egef.Name == start.Name {
		*_adcba = 1
		return nil
	}
	if _fgfca, _ecae := _cggf.(_a.CharData); !_ecae {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cggf)
	} else {
		switch string(_fgfca) {
		case "":
			*_adcba = 0
		case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
			*_adcba = 1
		case "\u0063\u006f\u006e\u006e":
			*_adcba = 2
		case "\u0063\u0079\u0063l\u0065":
			*_adcba = 3
		case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
			*_adcba = 4
		case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
			*_adcba = 5
		case "\u0070\u0079\u0072\u0061":
			*_adcba = 6
		case "\u006c\u0069\u006e":
			*_adcba = 7
		case "\u0073\u0070":
			*_adcba = 8
		case "\u0074\u0078":
			*_adcba = 9
		case "\u0073\u006e\u0061k\u0065":
			*_adcba = 10
		}
	}
	_cggf, _adfcg = d.Token()
	if _adfcg != nil {
		return _adfcg
	}
	if _ffbc, _baafge := _cggf.(_a.EndElement); _baafge && _ffbc.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cggf)
}
func ParseUnionST_LayoutShapeType(s string) (ST_LayoutShapeType, error) {
	return ST_LayoutShapeType{}, nil
}
func (_cbgea *CT_ResizeHandles) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _efda := range start.Attr {
		if _efda.Name.Local == "\u0076\u0061\u006c" {
			_cbgea.ValAttr.UnmarshalXMLAttr(_efda)
			continue
		}
	}
	for {
		_gddb, _eeede := d.Token()
		if _eeede != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0052\u0065\u0073\u0069z\u0065H\u0061\u006e\u0064\u006c\u0065\u0073\u003a \u0025\u0073", _eeede)
		}
		if _faed, _bfbac := _gddb.(_a.EndElement); _bfbac && _faed.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cdfc ST_FallbackDimension) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bbdae := _a.Attr{}
	_bbdae.Name = name
	switch _cdfc {
	case ST_FallbackDimensionUnset:
		_bbdae.Value = ""
	case ST_FallbackDimension1D:
		_bbdae.Value = "\u0031\u0044"
	case ST_FallbackDimension2D:
		_bbdae.Value = "\u0032\u0044"
	}
	return _bbdae, nil
}
func (_bgdbd ST_ElementType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bgdbd.String(), start)
}
func (_fccf ST_SecondaryLinearDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dddaa := _a.Attr{}
	_dddaa.Name = name
	switch _fccf {
	case ST_SecondaryLinearDirectionUnset:
		_dddaa.Value = ""
	case ST_SecondaryLinearDirectionNone:
		_dddaa.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryLinearDirectionFromL:
		_dddaa.Value = "\u0066\u0072\u006fm\u004c"
	case ST_SecondaryLinearDirectionFromR:
		_dddaa.Value = "\u0066\u0072\u006fm\u0052"
	case ST_SecondaryLinearDirectionFromT:
		_dddaa.Value = "\u0066\u0072\u006fm\u0054"
	case ST_SecondaryLinearDirectionFromB:
		_dddaa.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _dddaa, nil
}
func (_bffdd *ST_ConnectorDimension) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bffdd = 0
	case "\u0031\u0044":
		*_bffdd = 1
	case "\u0032\u0044":
		*_bffdd = 2
	case "\u0063\u0075\u0073\u0074":
		*_bffdd = 3
	}
	return nil
}

const (
	ST_AxisTypeUnset       ST_AxisType = 0
	ST_AxisTypeSelf        ST_AxisType = 1
	ST_AxisTypeCh          ST_AxisType = 2
	ST_AxisTypeDes         ST_AxisType = 3
	ST_AxisTypeDesOrSelf   ST_AxisType = 4
	ST_AxisTypePar         ST_AxisType = 5
	ST_AxisTypeAncst       ST_AxisType = 6
	ST_AxisTypeAncstOrSelf ST_AxisType = 7
	ST_AxisTypeFollowSib   ST_AxisType = 8
	ST_AxisTypePrecedSib   ST_AxisType = 9
	ST_AxisTypeFollow      ST_AxisType = 10
	ST_AxisTypePreced      ST_AxisType = 11
	ST_AxisTypeRoot        ST_AxisType = 12
	ST_AxisTypeNone        ST_AxisType = 13
)

func NewCT_Constraints() *CT_Constraints { _gee := &CT_Constraints{}; return _gee }
func (_daff *ST_TextAnchorVertical) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ecagc, _egbdgf := d.Token()
	if _egbdgf != nil {
		return _egbdgf
	}
	if _begdc, _eeag := _ecagc.(_a.EndElement); _eeag && _begdc.Name == start.Name {
		*_daff = 1
		return nil
	}
	if _gdabb, _gccec := _ecagc.(_a.CharData); !_gccec {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ecagc)
	} else {
		switch string(_gdabb) {
		case "":
			*_daff = 0
		case "\u0074":
			*_daff = 1
		case "\u006d\u0069\u0064":
			*_daff = 2
		case "\u0062":
			*_daff = 3
		}
	}
	_ecagc, _egbdgf = d.Token()
	if _egbdgf != nil {
		return _egbdgf
	}
	if _dddb, _aecgd := _ecagc.(_a.EndElement); _aecgd && _dddb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ecagc)
}

// ValidateWithPath validates the CT_When and its children, prefixing error messages with path
func (_abccb *CT_When) ValidateWithPath(path string) error {
	if _abccb.FuncAttr == ST_FunctionTypeUnset {
		return _bg.Errorf("\u0025\u0073\u002f\u0046\u0075\u006e\u0063\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _fbfbb := _abccb.FuncAttr.ValidateWithPath(path + "\u002fF\u0075\u006e\u0063\u0041\u0074\u0074r"); _fbfbb != nil {
		return _fbfbb
	}
	if _abccb.ArgAttr != nil {
		if _geeaf := _abccb.ArgAttr.ValidateWithPath(path + "\u002f\u0041\u0072\u0067\u0041\u0074\u0074\u0072"); _geeaf != nil {
			return _geeaf
		}
	}
	if _abccb.OpAttr == ST_FunctionOperatorUnset {
		return _bg.Errorf("\u0025\u0073\u002f\u004f\u0070\u0041\u0074\u0074\u0072\u0020i\u0073\u0020\u0061\u0020\u006d\u0061\u006ed\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gcac := _abccb.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _gcac != nil {
		return _gcac
	}
	if _cafef := _abccb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cafef != nil {
		return _cafef
	}
	for _bgebd, _aedb := range _abccb.Alg {
		if _gdga := _aedb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _bgebd)); _gdga != nil {
			return _gdga
		}
	}
	for _bfggf, _fbcca := range _abccb.Shape {
		if _efae := _fbcca.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _bfggf)); _efae != nil {
			return _efae
		}
	}
	for _eceb, _fcfd := range _abccb.PresOf {
		if _cgfccb := _fcfd.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _eceb)); _cgfccb != nil {
			return _cgfccb
		}
	}
	for _fgabe, _egad := range _abccb.ConstrLst {
		if _fddc := _egad.ValidateWithPath(_bg.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _fgabe)); _fddc != nil {
			return _fddc
		}
	}
	for _dcde, _egff := range _abccb.RuleLst {
		if _fefb := _egff.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _dcde)); _fefb != nil {
			return _fefb
		}
	}
	for _daca, _bafg := range _abccb.ForEach {
		if _acfc := _bafg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _daca)); _acfc != nil {
			return _acfc
		}
	}
	for _ccea, _edag := range _abccb.LayoutNode {
		if _bgaee := _edag.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _ccea)); _bgaee != nil {
			return _bgaee
		}
	}
	for _cacd, _eebd := range _abccb.Choose {
		if _bfdcd := _eebd.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _cacd)); _bfdcd != nil {
			return _bfdcd
		}
	}
	for _dgdf, _aefbc := range _abccb.ExtLst {
		if _ccdgf := _aefbc.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _dgdf)); _ccdgf != nil {
			return _ccdgf
		}
	}
	return nil
}
func (_bacba ST_PyramidAccentTextMargin) Validate() error { return _bacba.ValidateWithPath("") }

// ValidateWithPath validates the CT_StyleDefinition and its children, prefixing error messages with path
func (_agbdg *CT_StyleDefinition) ValidateWithPath(path string) error {
	for _deae, _degb := range _agbdg.Title {
		if _faca := _degb.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _deae)); _faca != nil {
			return _faca
		}
	}
	for _dfdac, _cbca := range _agbdg.Desc {
		if _gead := _cbca.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _dfdac)); _gead != nil {
			return _gead
		}
	}
	if _agbdg.CatLst != nil {
		if _ggdb := _agbdg.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _ggdb != nil {
			return _ggdb
		}
	}
	if _agbdg.Scene3d != nil {
		if _fgcgg := _agbdg.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _fgcgg != nil {
			return _fgcgg
		}
	}
	for _gccbdg, _dgfe := range _agbdg.StyleLbl {
		if _age := _dgfe.ValidateWithPath(_bg.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _gccbdg)); _age != nil {
			return _age
		}
	}
	if _agbdg.ExtLst != nil {
		if _bcbbb := _agbdg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcbbb != nil {
			return _bcbbb
		}
	}
	return nil
}

const (
	ST_ParameterIdUnset            ST_ParameterId = 0
	ST_ParameterIdHorzAlign        ST_ParameterId = 1
	ST_ParameterIdVertAlign        ST_ParameterId = 2
	ST_ParameterIdChDir            ST_ParameterId = 3
	ST_ParameterIdChAlign          ST_ParameterId = 4
	ST_ParameterIdSecChAlign       ST_ParameterId = 5
	ST_ParameterIdLinDir           ST_ParameterId = 6
	ST_ParameterIdSecLinDir        ST_ParameterId = 7
	ST_ParameterIdStElem           ST_ParameterId = 8
	ST_ParameterIdBendPt           ST_ParameterId = 9
	ST_ParameterIdConnRout         ST_ParameterId = 10
	ST_ParameterIdBegSty           ST_ParameterId = 11
	ST_ParameterIdEndSty           ST_ParameterId = 12
	ST_ParameterIdDim              ST_ParameterId = 13
	ST_ParameterIdRotPath          ST_ParameterId = 14
	ST_ParameterIdCtrShpMap        ST_ParameterId = 15
	ST_ParameterIdNodeHorzAlign    ST_ParameterId = 16
	ST_ParameterIdNodeVertAlign    ST_ParameterId = 17
	ST_ParameterIdFallback         ST_ParameterId = 18
	ST_ParameterIdTxDir            ST_ParameterId = 19
	ST_ParameterIdPyraAcctPos      ST_ParameterId = 20
	ST_ParameterIdPyraAcctTxMar    ST_ParameterId = 21
	ST_ParameterIdTxBlDir          ST_ParameterId = 22
	ST_ParameterIdTxAnchorHorz     ST_ParameterId = 23
	ST_ParameterIdTxAnchorVert     ST_ParameterId = 24
	ST_ParameterIdTxAnchorHorzCh   ST_ParameterId = 25
	ST_ParameterIdTxAnchorVertCh   ST_ParameterId = 26
	ST_ParameterIdParTxLTRAlign    ST_ParameterId = 27
	ST_ParameterIdParTxRTLAlign    ST_ParameterId = 28
	ST_ParameterIdShpTxLTRAlignCh  ST_ParameterId = 29
	ST_ParameterIdShpTxRTLAlignCh  ST_ParameterId = 30
	ST_ParameterIdAutoTxRot        ST_ParameterId = 31
	ST_ParameterIdGrDir            ST_ParameterId = 32
	ST_ParameterIdFlowDir          ST_ParameterId = 33
	ST_ParameterIdContDir          ST_ParameterId = 34
	ST_ParameterIdBkpt             ST_ParameterId = 35
	ST_ParameterIdOff              ST_ParameterId = 36
	ST_ParameterIdHierAlign        ST_ParameterId = 37
	ST_ParameterIdBkPtFixedVal     ST_ParameterId = 38
	ST_ParameterIdStBulletLvl      ST_ParameterId = 39
	ST_ParameterIdStAng            ST_ParameterId = 40
	ST_ParameterIdSpanAng          ST_ParameterId = 41
	ST_ParameterIdAr               ST_ParameterId = 42
	ST_ParameterIdLnSpPar          ST_ParameterId = 43
	ST_ParameterIdLnSpAfParP       ST_ParameterId = 44
	ST_ParameterIdLnSpCh           ST_ParameterId = 45
	ST_ParameterIdLnSpAfChP        ST_ParameterId = 46
	ST_ParameterIdRtShortDist      ST_ParameterId = 47
	ST_ParameterIdAlignTx          ST_ParameterId = 48
	ST_ParameterIdPyraLvlNode      ST_ParameterId = 49
	ST_ParameterIdPyraAcctBkgdNode ST_ParameterId = 50
	ST_ParameterIdPyraAcctTxNode   ST_ParameterId = 51
	ST_ParameterIdSrcNode          ST_ParameterId = 52
	ST_ParameterIdDstNode          ST_ParameterId = 53
	ST_ParameterIdBegPts           ST_ParameterId = 54
	ST_ParameterIdEndPts           ST_ParameterId = 55
)

func NewCT_ColorTransformHeader() *CT_ColorTransformHeader {
	_gbcd := &CT_ColorTransformHeader{}
	return _gbcd
}
func (_cegc ST_ChildOrderType) Validate() error { return _cegc.ValidateWithPath("") }
func (_ccad *CT_ForEach) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ccad.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.NameAttr)})
	}
	if _ccad.RefAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.RefAttr)})
	}
	if _ccad.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.AxisAttr)})
	}
	if _ccad.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.PtTypeAttr)})
	}
	if _ccad.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.HideLastTransAttr)})
	}
	if _ccad.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.StAttr)})
	}
	if _ccad.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.CntAttr)})
	}
	if _ccad.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _bg.Sprintf("\u0025\u0076", *_ccad.StepAttr)})
	}
	e.EncodeToken(start)
	if _ccad.Alg != nil {
		_gcad := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _beb := range _ccad.Alg {
			e.EncodeElement(_beb, _gcad)
		}
	}
	if _ccad.Shape != nil {
		_cfeg := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _beba := range _ccad.Shape {
			e.EncodeElement(_beba, _cfeg)
		}
	}
	if _ccad.PresOf != nil {
		_dffe := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _cege := range _ccad.PresOf {
			e.EncodeElement(_cege, _dffe)
		}
	}
	if _ccad.ConstrLst != nil {
		_cdca := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _ccbda := range _ccad.ConstrLst {
			e.EncodeElement(_ccbda, _cdca)
		}
	}
	if _ccad.RuleLst != nil {
		_gfefg := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _efceg := range _ccad.RuleLst {
			e.EncodeElement(_efceg, _gfefg)
		}
	}
	if _ccad.ForEach != nil {
		_bdgf := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _cafg := range _ccad.ForEach {
			e.EncodeElement(_cafg, _bdgf)
		}
	}
	if _ccad.LayoutNode != nil {
		_ddgc := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _gecd := range _ccad.LayoutNode {
			e.EncodeElement(_gecd, _ddgc)
		}
	}
	if _ccad.Choose != nil {
		_cedd := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _adgfc := range _ccad.Choose {
			e.EncodeElement(_adgfc, _cedd)
		}
	}
	if _ccad.ExtLst != nil {
		_dfdc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _aggb := range _ccad.ExtLst {
			e.EncodeElement(_aggb, _dfdc)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_CTName struct {
	LangAttr *string
	ValAttr  string
}

// ValidateWithPath validates the CT_Category and its children, prefixing error messages with path
func (_dcg *CT_Category) ValidateWithPath(path string) error { return nil }
func (_geeab *ST_FunctionOperator) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ddefb, _bbgf := d.Token()
	if _bbgf != nil {
		return _bbgf
	}
	if _bdbc, _dcbg := _ddefb.(_a.EndElement); _dcbg && _bdbc.Name == start.Name {
		*_geeab = 1
		return nil
	}
	if _gdfcd, _gaee := _ddefb.(_a.CharData); !_gaee {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddefb)
	} else {
		switch string(_gdfcd) {
		case "":
			*_geeab = 0
		case "\u0065\u0071\u0075":
			*_geeab = 1
		case "\u006e\u0065\u0071":
			*_geeab = 2
		case "\u0067\u0074":
			*_geeab = 3
		case "\u006c\u0074":
			*_geeab = 4
		case "\u0067\u0074\u0065":
			*_geeab = 5
		case "\u006c\u0074\u0065":
			*_geeab = 6
		}
	}
	_ddefb, _bbgf = d.Token()
	if _bbgf != nil {
		return _bbgf
	}
	if _dacea, _bgaf := _ddefb.(_a.EndElement); _bgaf && _dacea.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddefb)
}
func (_dfdcg ST_AlgorithmType) Validate() error { return _dfdcg.ValidateWithPath("") }

type AG_ConstraintRefAttributes struct {
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}

func (_edega ST_Direction) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_acbe := _a.Attr{}
	_acbe.Name = name
	switch _edega {
	case ST_DirectionUnset:
		_acbe.Value = ""
	case ST_DirectionNorm:
		_acbe.Value = "\u006e\u006f\u0072\u006d"
	case ST_DirectionRev:
		_acbe.Value = "\u0072\u0065\u0076"
	}
	return _acbe, nil
}
func (_egaaa ST_FunctionType) Validate() error { return _egaaa.ValidateWithPath("") }

type CT_CTDescription struct {
	LangAttr *string
	ValAttr  string
}

func (_dbgcf ST_NodeVerticalAlignment) Validate() error { return _dbgcf.ValidateWithPath("") }
func (_feaa *CT_HierBranchStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ceag := range start.Attr {
		if _ceag.Name.Local == "\u0076\u0061\u006c" {
			_feaa.ValAttr.UnmarshalXMLAttr(_ceag)
			continue
		}
	}
	for {
		_ebeb, _bade := d.Token()
		if _bade != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054_\u0048\u0069\u0065\u0072\u0042\u0072\u0061n\u0063\u0068\u0053\u0074\u0079\u006c\u0065\u003a\u0020\u0025\u0073", _bade)
		}
		if _feea, _gfa := _ebeb.(_a.EndElement); _gfa && _feea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eagg *ST_NodeHorizontalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eagg = 0
	case "\u006c":
		*_eagg = 1
	case "\u0063\u0074\u0072":
		*_eagg = 2
	case "\u0072":
		*_eagg = 3
	}
	return nil
}
func NewCT_Description() *CT_Description { _fead := &CT_Description{}; return _fead }

type ST_TextAnchorVertical byte

func (_egffc ST_CxnType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_afdf := _a.Attr{}
	_afdf.Name = name
	switch _egffc {
	case ST_CxnTypeUnset:
		_afdf.Value = ""
	case ST_CxnTypeParOf:
		_afdf.Value = "\u0070\u0061\u0072O\u0066"
	case ST_CxnTypePresOf:
		_afdf.Value = "\u0070\u0072\u0065\u0073\u004f\u0066"
	case ST_CxnTypePresParOf:
		_afdf.Value = "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case ST_CxnTypeUnknownRelationship:
		_afdf.Value = "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return _afdf, nil
}

type CT_Direction struct{ ValAttr ST_Direction }

func (_gbccg ST_PyramidAccentPosition) ValidateWithPath(path string) error {
	switch _gbccg {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbccg))
	}
	return nil
}

// ValidateWithPath validates the CT_Constraints and its children, prefixing error messages with path
func (_bgac *CT_Constraints) ValidateWithPath(path string) error {
	for _eec, _feaf := range _bgac.Constr {
		if _ccg := _feaf.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u005b\u0025\u0064\u005d", path, _eec)); _ccg != nil {
			return _ccg
		}
	}
	return nil
}
func (_agaf *CT_Pt) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _agaf.ModelIdAttr)})
	if _agaf.TypeAttr != ST_PtTypeUnset {
		_agab, _ccdg := _agaf.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _ccdg != nil {
			return _ccdg
		}
		start.Attr = append(start.Attr, _agab)
	}
	if _agaf.CxnIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0078\u006eI\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_agaf.CxnIdAttr)})
	}
	e.EncodeToken(start)
	if _agaf.PrSet != nil {
		_efgg := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0053e\u0074"}}
		e.EncodeElement(_agaf.PrSet, _efgg)
	}
	if _agaf.SpPr != nil {
		_bbbcf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_agaf.SpPr, _bbbcf)
	}
	if _agaf.T != nil {
		_cebd := _a.StartElement{Name: _a.Name{Local: "\u0074"}}
		e.EncodeElement(_agaf.T, _cebd)
	}
	if _agaf.ExtLst != nil {
		_bega := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agaf.ExtLst, _bega)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_abbec *ST_TextDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_abbec = 0
	case "\u0066\u0072\u006fm\u0054":
		*_abbec = 1
	case "\u0066\u0072\u006fm\u0042":
		*_abbec = 2
	}
	return nil
}
func (_ee *CT_Adj) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0069\u0064\u0078"}, Value: _bg.Sprintf("\u0025\u0076", _ee.IdxAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _ee.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bfdb *CT_Description) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bfdb.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _bg.Sprintf("\u0025\u0076", *_bfdb.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", _bfdb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ConstraintTypeUnset         ST_ConstraintType = 0
	ST_ConstraintTypeNone          ST_ConstraintType = 1
	ST_ConstraintTypeAlignOff      ST_ConstraintType = 2
	ST_ConstraintTypeBegMarg       ST_ConstraintType = 3
	ST_ConstraintTypeBendDist      ST_ConstraintType = 4
	ST_ConstraintTypeBegPad        ST_ConstraintType = 5
	ST_ConstraintTypeB             ST_ConstraintType = 6
	ST_ConstraintTypeBMarg         ST_ConstraintType = 7
	ST_ConstraintTypeBOff          ST_ConstraintType = 8
	ST_ConstraintTypeCtrX          ST_ConstraintType = 9
	ST_ConstraintTypeCtrXOff       ST_ConstraintType = 10
	ST_ConstraintTypeCtrY          ST_ConstraintType = 11
	ST_ConstraintTypeCtrYOff       ST_ConstraintType = 12
	ST_ConstraintTypeConnDist      ST_ConstraintType = 13
	ST_ConstraintTypeDiam          ST_ConstraintType = 14
	ST_ConstraintTypeEndMarg       ST_ConstraintType = 15
	ST_ConstraintTypeEndPad        ST_ConstraintType = 16
	ST_ConstraintTypeH             ST_ConstraintType = 17
	ST_ConstraintTypeHArH          ST_ConstraintType = 18
	ST_ConstraintTypeHOff          ST_ConstraintType = 19
	ST_ConstraintTypeL             ST_ConstraintType = 20
	ST_ConstraintTypeLMarg         ST_ConstraintType = 21
	ST_ConstraintTypeLOff          ST_ConstraintType = 22
	ST_ConstraintTypeR             ST_ConstraintType = 23
	ST_ConstraintTypeRMarg         ST_ConstraintType = 24
	ST_ConstraintTypeROff          ST_ConstraintType = 25
	ST_ConstraintTypePrimFontSz    ST_ConstraintType = 26
	ST_ConstraintTypePyraAcctRatio ST_ConstraintType = 27
	ST_ConstraintTypeSecFontSz     ST_ConstraintType = 28
	ST_ConstraintTypeSibSp         ST_ConstraintType = 29
	ST_ConstraintTypeSecSibSp      ST_ConstraintType = 30
	ST_ConstraintTypeSp            ST_ConstraintType = 31
	ST_ConstraintTypeStemThick     ST_ConstraintType = 32
	ST_ConstraintTypeT             ST_ConstraintType = 33
	ST_ConstraintTypeTMarg         ST_ConstraintType = 34
	ST_ConstraintTypeTOff          ST_ConstraintType = 35
	ST_ConstraintTypeUserA         ST_ConstraintType = 36
	ST_ConstraintTypeUserB         ST_ConstraintType = 37
	ST_ConstraintTypeUserC         ST_ConstraintType = 38
	ST_ConstraintTypeUserD         ST_ConstraintType = 39
	ST_ConstraintTypeUserE         ST_ConstraintType = 40
	ST_ConstraintTypeUserF         ST_ConstraintType = 41
	ST_ConstraintTypeUserG         ST_ConstraintType = 42
	ST_ConstraintTypeUserH         ST_ConstraintType = 43
	ST_ConstraintTypeUserI         ST_ConstraintType = 44
	ST_ConstraintTypeUserJ         ST_ConstraintType = 45
	ST_ConstraintTypeUserK         ST_ConstraintType = 46
	ST_ConstraintTypeUserL         ST_ConstraintType = 47
	ST_ConstraintTypeUserM         ST_ConstraintType = 48
	ST_ConstraintTypeUserN         ST_ConstraintType = 49
	ST_ConstraintTypeUserO         ST_ConstraintType = 50
	ST_ConstraintTypeUserP         ST_ConstraintType = 51
	ST_ConstraintTypeUserQ         ST_ConstraintType = 52
	ST_ConstraintTypeUserR         ST_ConstraintType = 53
	ST_ConstraintTypeUserS         ST_ConstraintType = 54
	ST_ConstraintTypeUserT         ST_ConstraintType = 55
	ST_ConstraintTypeUserU         ST_ConstraintType = 56
	ST_ConstraintTypeUserV         ST_ConstraintType = 57
	ST_ConstraintTypeUserW         ST_ConstraintType = 58
	ST_ConstraintTypeUserX         ST_ConstraintType = 59
	ST_ConstraintTypeUserY         ST_ConstraintType = 60
	ST_ConstraintTypeUserZ         ST_ConstraintType = 61
	ST_ConstraintTypeW             ST_ConstraintType = 62
	ST_ConstraintTypeWArH          ST_ConstraintType = 63
	ST_ConstraintTypeWOff          ST_ConstraintType = 64
)

// ValidateWithPath validates the CT_SDCategory and its children, prefixing error messages with path
func (_agadg *CT_SDCategory) ValidateWithPath(path string) error { return nil }
func (_dcceb *ColorsDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcceb.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
_cdeb:
	for {
		_dabf, _gaaf := d.Token()
		if _gaaf != nil {
			return _gaaf
		}
		switch _cgedc := _dabf.(type) {
		case _a.StartElement:
			switch _cgedc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_dcaga := NewCT_ColorTransformHeader()
				if _ffef := d.DecodeElement(_dcaga, &_cgedc); _ffef != nil {
					return _ffef
				}
				_dcceb.ColorsDefHdr = append(_dcceb.ColorsDefHdr, _dcaga)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _cgedc.Name)
				if _gbaa := d.Skip(); _gbaa != nil {
					return _gbaa
				}
			}
		case _a.EndElement:
			break _cdeb
		case _a.CharData:
		}
	}
	return nil
}

type ST_GrowDirection byte

func (_gdgc ST_FunctionOperator) ValidateWithPath(path string) error {
	switch _gdgc {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdgc))
	}
	return nil
}
func (_gggfb ST_DiagramHorizontalAlignment) Validate() error { return _gggfb.ValidateWithPath("") }
func (_fdfe *CT_Category) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gcdf := range start.Attr {
		if _gcdf.Name.Local == "\u0074\u0079\u0070\u0065" {
			_fge, _dbgc := _gcdf.Value, error(nil)
			if _dbgc != nil {
				return _dbgc
			}
			_fdfe.TypeAttr = _fge
			continue
		}
		if _gcdf.Name.Local == "\u0070\u0072\u0069" {
			_fcgc, _bcb := _b.ParseUint(_gcdf.Value, 10, 32)
			if _bcb != nil {
				return _bcb
			}
			_fdfe.PriAttr = uint32(_fcgc)
			continue
		}
	}
	for {
		_cebg, _dfef := d.Token()
		if _dfef != nil {
			return _bg.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079\u003a\u0020\u0025\u0073", _dfef)
		}
		if _gda, _gbb := _cebg.(_a.EndElement); _gbb && _gda.Name == start.Name {
			break
		}
	}
	return nil
}
func (_egaa ST_Direction) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_egaa.String(), start)
}
func (_fcfcb ST_ChildAlignment) ValidateWithPath(path string) error {
	switch _fcfcb {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fcfcb))
	}
	return nil
}
func (_dabdf *CT_StyleDefinitionHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gdeb := range start.Attr {
		if _gdeb.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cfafg, _fede := _gdeb.Value, error(nil)
			if _fede != nil {
				return _fede
			}
			_dabdf.UniqueIdAttr = _cfafg
			continue
		}
		if _gdeb.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_dgag, _abba := _gdeb.Value, error(nil)
			if _abba != nil {
				return _abba
			}
			_dabdf.MinVerAttr = &_dgag
			continue
		}
		if _gdeb.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_aegb, _feaaa := _b.ParseInt(_gdeb.Value, 10, 32)
			if _feaaa != nil {
				return _feaaa
			}
			_cgbe := int32(_aegb)
			_dabdf.ResIdAttr = &_cgbe
			continue
		}
	}
_ffdc:
	for {
		_bdaeg, _gaebe := d.Token()
		if _gaebe != nil {
			return _gaebe
		}
		switch _cgbcb := _bdaeg.(type) {
		case _a.StartElement:
			switch _cgbcb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dgfc := NewCT_SDName()
				if _ccdda := d.DecodeElement(_dgfc, &_cgbcb); _ccdda != nil {
					return _ccdda
				}
				_dabdf.Title = append(_dabdf.Title, _dgfc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gdfa := NewCT_SDDescription()
				if _fagc := d.DecodeElement(_gdfa, &_cgbcb); _fagc != nil {
					return _fagc
				}
				_dabdf.Desc = append(_dabdf.Desc, _gdfa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dabdf.CatLst = NewCT_SDCategories()
				if _eacf := d.DecodeElement(_dabdf.CatLst, &_cgbcb); _eacf != nil {
					return _eacf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dabdf.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _cdba := d.DecodeElement(_dabdf.ExtLst, &_cgbcb); _cdba != nil {
					return _cdba
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048e\u0061\u0064\u0065\u0072\u0020%\u0076", _cgbcb.Name)
				if _bcda := d.Skip(); _bcda != nil {
					return _bcda
				}
			}
		case _a.EndElement:
			break _ffdc
		case _a.CharData:
		}
	}
	return nil
}
func (_fbfbc ST_FlowDirection) ValidateWithPath(path string) error {
	switch _fbfbc {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbfbc))
	}
	return nil
}
func (_afgcb *ST_AutoTextRotation) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_afgcb = 0
	case "\u006e\u006f\u006e\u0065":
		*_afgcb = 1
	case "\u0075\u0070\u0072":
		*_afgcb = 2
	case "\u0067\u0072\u0061\u0076":
		*_afgcb = 3
	}
	return nil
}
func (_edb ST_ModelId) String() string {
	if _edb.Int32 != nil {
		return _bg.Sprintf("\u0025\u0076", *_edb.Int32)
	}
	if _edb.ST_Guid != nil {
		return _bg.Sprintf("\u0025\u0076", *_edb.ST_Guid)
	}
	return ""
}

// ValidateWithPath validates the CT_PtList and its children, prefixing error messages with path
func (_cfdf *CT_PtList) ValidateWithPath(path string) error {
	for _febe, _fbdd := range _cfdf.Pt {
		if _eege := _fbdd.ValidateWithPath(_bg.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _febe)); _eege != nil {
			return _eege
		}
	}
	return nil
}
func (_ceac ST_BoolOperator) ValidateWithPath(path string) error {
	switch _ceac {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ceac))
	}
	return nil
}

type CT_Choose struct {
	NameAttr *string
	If       []*CT_When
	Else     *CT_Otherwise
}
type ST_PtType byte
type AG_IteratorAttributes struct {
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

// ValidateWithPath validates the CT_ColorTransform and its children, prefixing error messages with path
func (_afcd *CT_ColorTransform) ValidateWithPath(path string) error {
	for _bfg, _ddfbg := range _afcd.Title {
		if _cde := _ddfbg.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _bfg)); _cde != nil {
			return _cde
		}
	}
	for _aeg, _cbd := range _afcd.Desc {
		if _aac := _cbd.ValidateWithPath(_bg.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _aeg)); _aac != nil {
			return _aac
		}
	}
	if _afcd.CatLst != nil {
		if _bfad := _afcd.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _bfad != nil {
			return _bfad
		}
	}
	for _cba, _eaa := range _afcd.StyleLbl {
		if _dade := _eaa.ValidateWithPath(_bg.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _cba)); _dade != nil {
			return _dade
		}
	}
	if _afcd.ExtLst != nil {
		if _acdc := _afcd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acdc != nil {
			return _acdc
		}
	}
	return nil
}
func (_cdbb ST_HueDir) String() string {
	switch _cdbb {
	case 0:
		return ""
	case 1:
		return "\u0063\u0077"
	case 2:
		return "\u0063\u0063\u0077"
	}
	return ""
}
func (_gcgb ST_PrSetCustVal) String() string {
	if _gcgb.ST_Percentage != nil {
		return _bg.Sprintf("\u0025\u0076", *_gcgb.ST_Percentage)
	}
	if _gcgb.Int32 != nil {
		return _bg.Sprintf("\u0025\u0076", *_gcgb.Int32)
	}
	return ""
}

const (
	ST_RotationPathUnset     ST_RotationPath = 0
	ST_RotationPathNone      ST_RotationPath = 1
	ST_RotationPathAlongPath ST_RotationPath = 2
)

// Validate validates the CT_DiagramDefinition and its children
func (_fgea *CT_DiagramDefinition) Validate() error {
	return _fgea.ValidateWithPath("C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e")
}

const (
	ST_AnimOneStrUnset  ST_AnimOneStr = 0
	ST_AnimOneStrNone   ST_AnimOneStr = 1
	ST_AnimOneStrOne    ST_AnimOneStr = 2
	ST_AnimOneStrBranch ST_AnimOneStr = 3
)

type StyleDef struct{ CT_StyleDefinition }

func (_bfdag ST_TextAnchorVertical) String() string {
	switch _bfdag {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}

// Validate validates the LayoutDefHdr and its children
func (_fafc *LayoutDefHdr) Validate() error {
	return _fafc.ValidateWithPath("\u004c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072")
}

const (
	ST_NodeHorizontalAlignmentUnset ST_NodeHorizontalAlignment = 0
	ST_NodeHorizontalAlignmentL     ST_NodeHorizontalAlignment = 1
	ST_NodeHorizontalAlignmentCtr   ST_NodeHorizontalAlignment = 2
	ST_NodeHorizontalAlignmentR     ST_NodeHorizontalAlignment = 3
)

func (_cabcea *ST_PyramidAccentTextMargin) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fgfe, _ececa := d.Token()
	if _ececa != nil {
		return _ececa
	}
	if _faec, _gafbg := _fgfe.(_a.EndElement); _gafbg && _faec.Name == start.Name {
		*_cabcea = 1
		return nil
	}
	if _bbbg, _ggec := _fgfe.(_a.CharData); !_ggec {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgfe)
	} else {
		switch string(_bbbg) {
		case "":
			*_cabcea = 0
		case "\u0073\u0074\u0065\u0070":
			*_cabcea = 1
		case "\u0073\u0074\u0061c\u006b":
			*_cabcea = 2
		}
	}
	_fgfe, _ececa = d.Token()
	if _ececa != nil {
		return _ececa
	}
	if _abefg, _cgfga := _fgfe.(_a.EndElement); _cgfga && _abefg.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgfe)
}
func (_bcabf ST_TextAnchorVertical) Validate() error { return _bcabf.ValidateWithPath("") }
func (_cadd *CT_Choose) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cadd.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_cadd.NameAttr)})
	}
	e.EncodeToken(start)
	_dfd := _a.StartElement{Name: _a.Name{Local: "\u0069\u0066"}}
	for _, _baa := range _cadd.If {
		e.EncodeElement(_baa, _dfd)
	}
	if _cadd.Else != nil {
		_gabe := _a.StartElement{Name: _a.Name{Local: "\u0065\u006c\u0073\u0065"}}
		e.EncodeElement(_cadd.Else, _gabe)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gdaf ST_AnimOneStr) String() string {
	switch _gdaf {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u006e\u0065"
	case 3:
		return "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return ""
}
func (_eeedec ST_CxnType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eeedec.String(), start)
}
func (_ccfa *CT_PtList) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_dcaa:
	for {
		_ggeg, _cbcb := d.Token()
		if _cbcb != nil {
			return _cbcb
		}
		switch _cfde := _ggeg.(type) {
		case _a.StartElement:
			switch _cfde.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074"}:
				_adage := NewCT_Pt()
				if _ddcd := d.DecodeElement(_adage, &_cfde); _ddcd != nil {
					return _ddcd
				}
				_ccfa.Pt = append(_ccfa.Pt, _adage)
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0074\u004ci\u0073\u0074 \u0025\u0076", _cfde.Name)
				if _beeec := d.Skip(); _beeec != nil {
					return _beeec
				}
			}
		case _a.EndElement:
			break _dcaa
		case _a.CharData:
		}
	}
	return nil
}
func ParseUnionST_FunctionArgument(s string) (ST_FunctionArgument, error) {
	return ST_FunctionArgument{}, nil
}
func (_cbfc *CT_Otherwise) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cbfc.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_cbfc.NameAttr)})
	}
	e.EncodeToken(start)
	if _cbfc.Alg != nil {
		_cadda := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _fcd := range _cbfc.Alg {
			e.EncodeElement(_fcd, _cadda)
		}
	}
	if _cbfc.Shape != nil {
		_fbecag := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _ddad := range _cbfc.Shape {
			e.EncodeElement(_ddad, _fbecag)
		}
	}
	if _cbfc.PresOf != nil {
		_edebe := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _aea := range _cbfc.PresOf {
			e.EncodeElement(_aea, _edebe)
		}
	}
	if _cbfc.ConstrLst != nil {
		_cdce := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _edcb := range _cbfc.ConstrLst {
			e.EncodeElement(_edcb, _cdce)
		}
	}
	if _cbfc.RuleLst != nil {
		_cfbb := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _afbd := range _cbfc.RuleLst {
			e.EncodeElement(_afbd, _cfbb)
		}
	}
	if _cbfc.ForEach != nil {
		_ggff := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _dggg := range _cbfc.ForEach {
			e.EncodeElement(_dggg, _ggff)
		}
	}
	if _cbfc.LayoutNode != nil {
		_edcce := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _afgfd := range _cbfc.LayoutNode {
			e.EncodeElement(_afgfd, _edcce)
		}
	}
	if _cbfc.Choose != nil {
		_fffc := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _ebac := range _cbfc.Choose {
			e.EncodeElement(_ebac, _fffc)
		}
	}
	if _cbfc.ExtLst != nil {
		_bcde := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _bacb := range _cbfc.ExtLst {
			e.EncodeElement(_bacb, _bcde)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ffae *CT_Parameter) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffae.TypeAttr = ST_ParameterId(1)
	for _, _dbcb := range start.Attr {
		if _dbcb.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ffae.TypeAttr.UnmarshalXMLAttr(_dbcb)
			continue
		}
		if _dbcb.Name.Local == "\u0076\u0061\u006c" {
			_aacbf, _dbga := ParseUnionST_ParameterVal(_dbcb.Value)
			if _dbga != nil {
				return _dbga
			}
			_ffae.ValAttr = _aacbf
			continue
		}
	}
	for {
		_bbce, _ecaf := d.Token()
		if _ecaf != nil {
			return _bg.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u003a\u0020\u0025\u0073", _ecaf)
		}
		if _fbba, _fefd := _bbce.(_a.EndElement); _fefd && _fbba.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_When and its children
func (_aaca *CT_When) Validate() error {
	return _aaca.ValidateWithPath("\u0043T\u005f\u0057\u0068\u0065\u006e")
}

type ST_FunctionOperator byte

func (_adcgg *CT_NumericRule) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _adcgg.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", *_adcgg.ValAttr)})
	}
	if _adcgg.FactAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_adcgg.FactAttr)})
	}
	if _adcgg.MaxAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0061\u0078"}, Value: _bg.Sprintf("\u0025\u0076", *_adcgg.MaxAttr)})
	}
	if _adcgg.TypeAttr != ST_ConstraintTypeUnset {
		_fcabg, _cceg := _adcgg.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _cceg != nil {
			return _cceg
		}
		start.Attr = append(start.Attr, _fcabg)
	}
	if _adcgg.ForAttr != ST_ConstraintRelationshipUnset {
		_bbbe, _dabd := _adcgg.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _dabd != nil {
			return _dabd
		}
		start.Attr = append(start.Attr, _bbbe)
	}
	if _adcgg.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_adcgg.ForNameAttr)})
	}
	if _adcgg.PtTypeAttr != ST_ElementTypeUnset {
		_afcdg, _afbgg := _adcgg.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _afbgg != nil {
			return _afbgg
		}
		start.Attr = append(start.Attr, _afcdg)
	}
	e.EncodeToken(start)
	if _adcgg.ExtLst != nil {
		_afde := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adcgg.ExtLst, _afde)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type RelIds struct{ CT_RelIds }
type LayoutDef struct{ CT_DiagramDefinition }
type ST_CxnType byte

func (_bfebb ST_LinearDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bfebb.String(), start)
}
func (_afda ST_Direction) Validate() error { return _afda.ValidateWithPath("") }
func (_fec *CT_Shape) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _faef := range start.Attr {
		if _faef.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _faef.Name.Local == "\u0062\u006c\u0069\u0070" || _faef.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _faef.Name.Local == "\u0062\u006c\u0069\u0070" {
			_dfggc, _eedcg := _faef.Value, error(nil)
			if _eedcg != nil {
				return _eedcg
			}
			_fec.BlipAttr = &_dfggc
			continue
		}
		if _faef.Name.Local == "\u0072\u006f\u0074" {
			_cgbb, _ffcbb := _b.ParseFloat(_faef.Value, 64)
			if _ffcbb != nil {
				return _ffcbb
			}
			_fec.RotAttr = &_cgbb
			continue
		}
		if _faef.Name.Local == "\u0074\u0079\u0070\u0065" {
			_cbcba, _fbbbf := ParseUnionST_LayoutShapeType(_faef.Value)
			if _fbbbf != nil {
				return _fbbbf
			}
			_fec.TypeAttr = &_cbcba
			continue
		}
		if _faef.Name.Local == "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f" {
			_fgedeg, _cadac := _b.ParseInt(_faef.Value, 10, 32)
			if _cadac != nil {
				return _cadac
			}
			_bcgf := int32(_fgedeg)
			_fec.ZOrderOffAttr = &_bcgf
			continue
		}
		if _faef.Name.Local == "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d" {
			_cbfa, _bccf := _b.ParseBool(_faef.Value)
			if _bccf != nil {
				return _bccf
			}
			_fec.HideGeomAttr = &_cbfa
			continue
		}
		if _faef.Name.Local == "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y" {
			_dedg, _beab := _b.ParseBool(_faef.Value)
			if _beab != nil {
				return _beab
			}
			_fec.LkTxEntryAttr = &_dedg
			continue
		}
		if _faef.Name.Local == "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r" {
			_fagb, _agce := _b.ParseBool(_faef.Value)
			if _agce != nil {
				return _agce
			}
			_fec.BlipPhldrAttr = &_fagb
			continue
		}
	}
_dfcc:
	for {
		_ecag, _acbff := d.Token()
		if _acbff != nil {
			return _acbff
		}
		switch _cced := _ecag.(type) {
		case _a.StartElement:
			switch _cced.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}:
				_fec.AdjLst = NewCT_AdjLst()
				if _deagb := d.DecodeElement(_fec.AdjLst, &_cced); _deagb != nil {
					return _deagb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fec.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _edde := d.DecodeElement(_fec.ExtLst, &_cced); _edde != nil {
					return _edde
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u0020\u0025\u0076", _cced.Name)
				if _bccc := d.Skip(); _bccc != nil {
					return _bccc
				}
			}
		case _a.EndElement:
			break _dfcc
		case _a.CharData:
		}
	}
	return nil
}
func (_aafda ST_AnimOneStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbegb := _a.Attr{}
	_fbegb.Name = name
	switch _aafda {
	case ST_AnimOneStrUnset:
		_fbegb.Value = ""
	case ST_AnimOneStrNone:
		_fbegb.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimOneStrOne:
		_fbegb.Value = "\u006f\u006e\u0065"
	case ST_AnimOneStrBranch:
		_fbegb.Value = "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return _fbegb, nil
}

const (
	ST_FallbackDimensionUnset ST_FallbackDimension = 0
	ST_FallbackDimension1D    ST_FallbackDimension = 1
	ST_FallbackDimension2D    ST_FallbackDimension = 2
)

func (_beff ST_ClrAppMethod) String() string {
	switch _beff {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0063\u0079\u0063l\u0065"
	case 3:
		return "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return ""
}
func NewCT_TextProps() *CT_TextProps { _dcbb := &CT_TextProps{}; return _dcbb }
func (_daa *CT_AdjLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _daa.Adj != nil {
		_affd := _a.StartElement{Name: _a.Name{Local: "\u0061\u0064\u006a"}}
		for _, _ddeb := range _daa.Adj {
			e.EncodeElement(_ddeb, _affd)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TextAnchorVerticalUnset ST_TextAnchorVertical = 0
	ST_TextAnchorVerticalT     ST_TextAnchorVertical = 1
	ST_TextAnchorVerticalMid   ST_TextAnchorVertical = 2
	ST_TextAnchorVerticalB     ST_TextAnchorVertical = 3
)
const (
	ST_OutputShapeTypeUnset ST_OutputShapeType = 0
	ST_OutputShapeTypeNone  ST_OutputShapeType = 1
	ST_OutputShapeTypeConn  ST_OutputShapeType = 2
)

func (_fcgbb *ST_HueDir) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fcgbb = 0
	case "\u0063\u0077":
		*_fcgbb = 1
	case "\u0063\u0063\u0077":
		*_fcgbb = 2
	}
	return nil
}
func (_afgfac *CT_SDDescription) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bgfe := range start.Attr {
		if _bgfe.Name.Local == "\u006c\u0061\u006e\u0067" {
			_bgdac, _bgg := _bgfe.Value, error(nil)
			if _bgg != nil {
				return _bgg
			}
			_afgfac.LangAttr = &_bgdac
			continue
		}
		if _bgfe.Name.Local == "\u0076\u0061\u006c" {
			_geac, _dcce := _bgfe.Value, error(nil)
			if _dcce != nil {
				return _dcce
			}
			_afgfac.ValAttr = _geac
			continue
		}
	}
	for {
		_eeaf, _aabbc := d.Token()
		if _aabbc != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0044\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _aabbc)
		}
		if _dfgaf, _gefbf := _eeaf.(_a.EndElement); _gefbf && _dfgaf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dedf ST_PrSetCustVal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dedf.ST_Percentage != nil {
		e.EncodeToken(_a.CharData(*_dedf.ST_Percentage))
	}
	if _dedf.Int32 != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0064", *_dedf.Int32)))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

// Validate validates the CT_Category and its children
func (_ada *CT_Category) Validate() error {
	return _ada.ValidateWithPath("C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}
func (_feebe *ST_Offset) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_feebe = 0
	case "\u0063\u0074\u0072":
		*_feebe = 1
	case "\u006f\u0066\u0066":
		*_feebe = 2
	}
	return nil
}

// ValidateWithPath validates the CT_Parameter and its children, prefixing error messages with path
func (_eacc *CT_Parameter) ValidateWithPath(path string) error {
	if _eacc.TypeAttr == ST_ParameterIdUnset {
		return _bg.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _efgdd := _eacc.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _efgdd != nil {
		return _efgdd
	}
	if _acdef := _eacc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acdef != nil {
		return _acdef
	}
	return nil
}
func (_bafgg ST_TextAnchorHorizontal) String() string {
	switch _bafgg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u0074\u0072"
	}
	return ""
}
func (_cabce ST_ConnectorDimension) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ccdff := _a.Attr{}
	_ccdff.Name = name
	switch _cabce {
	case ST_ConnectorDimensionUnset:
		_ccdff.Value = ""
	case ST_ConnectorDimension1D:
		_ccdff.Value = "\u0031\u0044"
	case ST_ConnectorDimension2D:
		_ccdff.Value = "\u0032\u0044"
	case ST_ConnectorDimensionCust:
		_ccdff.Value = "\u0063\u0075\u0073\u0074"
	}
	return _ccdff, nil
}

// Validate validates the CT_Direction and its children
func (_ccc *CT_Direction) Validate() error {
	return _ccc.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
}

type CT_OrgChart struct{ ValAttr *bool }

func (_bbcg ST_ChildDirection) ValidateWithPath(path string) error {
	switch _bbcg {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbcg))
	}
	return nil
}

// Validate validates the CT_AnimLvl and its children
func (_ggd *CT_AnimLvl) Validate() error {
	return _ggd.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c")
}

type ST_TextAnchorHorizontal byte

func (_fbfda ST_ConnectorPoint) Validate() error { return _fbfda.ValidateWithPath("") }

type CT_TextProps struct {
	Sp3d   *_bb.CT_Shape3D
	FlatTx *_bb.CT_FlatText
}

func NewCT_Adj() *CT_Adj { _ece := &CT_Adj{}; _ece.IdxAttr = 1; return _ece }
func (_fgaf *ST_VariableType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_egdf, _bcdec := d.Token()
	if _bcdec != nil {
		return _bcdec
	}
	if _bfbcf, _gagef := _egdf.(_a.EndElement); _gagef && _bfbcf.Name == start.Name {
		*_fgaf = 1
		return nil
	}
	if _bdfbe, _gfdgba := _egdf.(_a.CharData); !_gfdgba {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _egdf)
	} else {
		switch string(_bdfbe) {
		case "":
			*_fgaf = 0
		case "\u006e\u006f\u006e\u0065":
			*_fgaf = 1
		case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
			*_fgaf = 2
		case "\u0063\u0068\u004da\u0078":
			*_fgaf = 3
		case "\u0063\u0068\u0050\u0072\u0065\u0066":
			*_fgaf = 4
		case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
			*_fgaf = 5
		case "\u0064\u0069\u0072":
			*_fgaf = 6
		case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
			*_fgaf = 7
		case "\u0061n\u0069\u006d\u004f\u006e\u0065":
			*_fgaf = 8
		case "\u0061n\u0069\u006d\u004c\u0076\u006c":
			*_fgaf = 9
		case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
			*_fgaf = 10
		}
	}
	_egdf, _bcdec = d.Token()
	if _bcdec != nil {
		return _bcdec
	}
	if _gfac, _ceae := _egdf.(_a.EndElement); _ceae && _gfac.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _egdf)
}
func (_aeae *CT_StyleLabel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dgbad := range start.Attr {
		if _dgbad.Name.Local == "\u006e\u0061\u006d\u0065" {
			_geed, _eggeb := _dgbad.Value, error(nil)
			if _eggeb != nil {
				return _eggeb
			}
			_aeae.NameAttr = _geed
			continue
		}
	}
_afgdf:
	for {
		_cagf, _cbaa := d.Token()
		if _cbaa != nil {
			return _cbaa
		}
		switch _cffb := _cagf.(type) {
		case _a.StartElement:
			switch _cffb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_aeae.Scene3d = _bb.NewCT_Scene3D()
				if _gafd := d.DecodeElement(_aeae.Scene3d, &_cffb); _gafd != nil {
					return _gafd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0033\u0064"}:
				_aeae.Sp3d = _bb.NewCT_Shape3D()
				if _abdf := d.DecodeElement(_aeae.Sp3d, &_cffb); _abdf != nil {
					return _abdf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0050\u0072"}:
				_aeae.TxPr = NewCT_TextProps()
				if _agge := d.DecodeElement(_aeae.TxPr, &_cffb); _agge != nil {
					return _agge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_aeae.Style = _bb.NewCT_ShapeStyle()
				if _fbbe := d.DecodeElement(_aeae.Style, &_cffb); _fbbe != nil {
					return _fbbe
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeae.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _dagf := d.DecodeElement(_aeae.ExtLst, &_cffb); _dagf != nil {
					return _dagf
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c \u0025\u0076", _cffb.Name)
				if _bgeg := d.Skip(); _bgeg != nil {
					return _bgeg
				}
			}
		case _a.EndElement:
			break _afgdf
		case _a.CharData:
		}
	}
	return nil
}
func (_aaae ST_VariableType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdadd := _a.Attr{}
	_gdadd.Name = name
	switch _aaae {
	case ST_VariableTypeUnset:
		_gdadd.Value = ""
	case ST_VariableTypeNone:
		_gdadd.Value = "\u006e\u006f\u006e\u0065"
	case ST_VariableTypeOrgChart:
		_gdadd.Value = "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case ST_VariableTypeChMax:
		_gdadd.Value = "\u0063\u0068\u004da\u0078"
	case ST_VariableTypeChPref:
		_gdadd.Value = "\u0063\u0068\u0050\u0072\u0065\u0066"
	case ST_VariableTypeBulEnabled:
		_gdadd.Value = "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case ST_VariableTypeDir:
		_gdadd.Value = "\u0064\u0069\u0072"
	case ST_VariableTypeHierBranch:
		_gdadd.Value = "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case ST_VariableTypeAnimOne:
		_gdadd.Value = "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case ST_VariableTypeAnimLvl:
		_gdadd.Value = "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case ST_VariableTypeResizeHandles:
		_gdadd.Value = "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return _gdadd, nil
}

// ST_ParameterVal is a union type
type ST_ParameterVal struct {
	ST_DiagramHorizontalAlignment ST_DiagramHorizontalAlignment
	ST_VerticalAlignment          ST_VerticalAlignment
	ST_ChildDirection             ST_ChildDirection
	ST_ChildAlignment             ST_ChildAlignment
	ST_SecondaryChildAlignment    ST_SecondaryChildAlignment
	ST_LinearDirection            ST_LinearDirection
	ST_SecondaryLinearDirection   ST_SecondaryLinearDirection
	ST_StartingElement            ST_StartingElement
	ST_BendPoint                  ST_BendPoint
	ST_ConnectorRouting           ST_ConnectorRouting
	ST_ArrowheadStyle             ST_ArrowheadStyle
	ST_ConnectorDimension         ST_ConnectorDimension
	ST_RotationPath               ST_RotationPath
	ST_CenterShapeMapping         ST_CenterShapeMapping
	ST_NodeHorizontalAlignment    ST_NodeHorizontalAlignment
	ST_NodeVerticalAlignment      ST_NodeVerticalAlignment
	ST_FallbackDimension          ST_FallbackDimension
	ST_TextDirection              ST_TextDirection
	ST_PyramidAccentPosition      ST_PyramidAccentPosition
	ST_PyramidAccentTextMargin    ST_PyramidAccentTextMargin
	ST_TextBlockDirection         ST_TextBlockDirection
	ST_TextAnchorHorizontal       ST_TextAnchorHorizontal
	ST_TextAnchorVertical         ST_TextAnchorVertical
	ST_DiagramTextAlignment       ST_DiagramTextAlignment
	ST_AutoTextRotation           ST_AutoTextRotation
	ST_GrowDirection              ST_GrowDirection
	ST_FlowDirection              ST_FlowDirection
	ST_ContinueDirection          ST_ContinueDirection
	ST_Breakpoint                 ST_Breakpoint
	ST_Offset                     ST_Offset
	ST_HierarchyAlignment         ST_HierarchyAlignment
	Int32                         *int32
	Float64                       *float64
	Bool                          *bool
	StringVal                     *string
	ST_ConnectorPoint             ST_ConnectorPoint
}

func (_ffaac ST_FallbackDimension) String() string {
	switch _ffaac {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	}
	return ""
}
func (_bcbgbc ST_FlowDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbdf := _a.Attr{}
	_fbdf.Name = name
	switch _bcbgbc {
	case ST_FlowDirectionUnset:
		_fbdf.Value = ""
	case ST_FlowDirectionRow:
		_fbdf.Value = "\u0072\u006f\u0077"
	case ST_FlowDirectionCol:
		_fbdf.Value = "\u0063\u006f\u006c"
	}
	return _fbdf, nil
}

// ValidateWithPath validates the CT_Algorithm and its children, prefixing error messages with path
func (_agb *CT_Algorithm) ValidateWithPath(path string) error {
	if _agb.TypeAttr == ST_AlgorithmTypeUnset {
		return _bg.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ecd := _agb.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _ecd != nil {
		return _ecd
	}
	for _ddba, _fe := range _agb.Param {
		if _bba := _fe.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002fP\u0061\u0072\u0061\u006d\u005b\u0025\u0064\u005d", path, _ddba)); _bba != nil {
			return _bba
		}
	}
	if _agb.ExtLst != nil {
		if _eag := _agb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eag != nil {
			return _eag
		}
	}
	return nil
}

// ValidateWithPath validates the LayoutDef and its children, prefixing error messages with path
func (_eedce *LayoutDef) ValidateWithPath(path string) error {
	if _fdgg := _eedce.CT_DiagramDefinition.ValidateWithPath(path); _fdgg != nil {
		return _fdgg
	}
	return nil
}
func (_bace *ST_ParameterVal) Validate() error { return _bace.ValidateWithPath("") }
func (_eaafc *CT_ResizeHandles) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _eaafc.ValAttr != ST_ResizeHandlesStrUnset {
		_ffbb, _dcba := _eaafc.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _dcba != nil {
			return _dcba
		}
		start.Attr = append(start.Attr, _ffbb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fbaee *ST_AxisType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fbaee = 0
	case "\u0073\u0065\u006c\u0066":
		*_fbaee = 1
	case "\u0063\u0068":
		*_fbaee = 2
	case "\u0064\u0065\u0073":
		*_fbaee = 3
	case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
		*_fbaee = 4
	case "\u0070\u0061\u0072":
		*_fbaee = 5
	case "\u0061\u006e\u0063s\u0074":
		*_fbaee = 6
	case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
		*_fbaee = 7
	case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
		*_fbaee = 8
	case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
		*_fbaee = 9
	case "\u0066\u006f\u006c\u006c\u006f\u0077":
		*_fbaee = 10
	case "\u0070\u0072\u0065\u0063\u0065\u0064":
		*_fbaee = 11
	case "\u0072\u006f\u006f\u0074":
		*_fbaee = 12
	case "\u006e\u006f\u006e\u0065":
		*_fbaee = 13
	}
	return nil
}

// ValidateWithPath validates the CT_CTCategories and its children, prefixing error messages with path
func (_bdg *CT_CTCategories) ValidateWithPath(path string) error {
	for _abbbd, _gac := range _bdg.Cat {
		if _bab := _gac.ValidateWithPath(_bg.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _abbbd)); _bab != nil {
			return _bab
		}
	}
	return nil
}
func NewColorsDef() *ColorsDef {
	_fcca := &ColorsDef{}
	_fcca.CT_ColorTransform = *NewCT_ColorTransform()
	return _fcca
}

type DataModel struct{ CT_DataModel }

// ValidateWithPath validates the CT_Cxn and its children, prefixing error messages with path
func (_cddd *CT_Cxn) ValidateWithPath(path string) error {
	if _cabeg := _cddd.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _cabeg != nil {
		return _cabeg
	}
	if _ded := _cddd.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _ded != nil {
		return _ded
	}
	if _cfc := _cddd.SrcIdAttr.ValidateWithPath(path + "\u002f\u0053\u0072\u0063\u0049\u0064\u0041\u0074\u0074\u0072"); _cfc != nil {
		return _cfc
	}
	if _afga := _cddd.DestIdAttr.ValidateWithPath(path + "/\u0044\u0065\u0073\u0074\u0049\u0064\u0041\u0074\u0074\u0072"); _afga != nil {
		return _afga
	}
	if _cddd.ParTransIdAttr != nil {
		if _ebag := _cddd.ParTransIdAttr.ValidateWithPath(path + "\u002fP\u0061r\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _ebag != nil {
			return _ebag
		}
	}
	if _cddd.SibTransIdAttr != nil {
		if _fgda := _cddd.SibTransIdAttr.ValidateWithPath(path + "\u002fS\u0069b\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _fgda != nil {
			return _fgda
		}
	}
	if _cddd.ExtLst != nil {
		if _cea := _cddd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cea != nil {
			return _cea
		}
	}
	return nil
}
func NewCT_Algorithm() *CT_Algorithm {
	_fgfc := &CT_Algorithm{}
	_fgfc.TypeAttr = ST_AlgorithmType(1)
	return _fgfc
}
func NewCT_ElemPropSet() *CT_ElemPropSet { _abc := &CT_ElemPropSet{}; return _abc }
func (_bde *CT_AnimLvl) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _acg := range start.Attr {
		if _acg.Name.Local == "\u0076\u0061\u006c" {
			_bde.ValAttr.UnmarshalXMLAttr(_acg)
			continue
		}
	}
	for {
		_gff, _dag := d.Token()
		if _dag != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u003a\u0020%\u0073", _dag)
		}
		if _ceg, _ecbf := _gff.(_a.EndElement); _ecbf && _ceg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_addad ST_PtType) ValidateWithPath(path string) error {
	switch _addad {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_addad))
	}
	return nil
}
func (_gdcfe ST_ConstraintRelationship) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gdcfe.String(), start)
}
func (_ebef ST_ResizeHandlesStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ebef.String(), start)
}
func (_fcbcfd ST_BendPoint) String() string {
	switch _fcbcfd {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0067"
	case 2:
		return "\u0064\u0065\u0066"
	case 3:
		return "\u0065\u006e\u0064"
	}
	return ""
}
func (_efdgfa *ST_NodeVerticalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gfdc, _bagb := d.Token()
	if _bagb != nil {
		return _bagb
	}
	if _daaaf, _ffcbg := _gfdc.(_a.EndElement); _ffcbg && _daaaf.Name == start.Name {
		*_efdgfa = 1
		return nil
	}
	if _cbee, _fcegb := _gfdc.(_a.CharData); !_fcegb {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfdc)
	} else {
		switch string(_cbee) {
		case "":
			*_efdgfa = 0
		case "\u0074":
			*_efdgfa = 1
		case "\u006d\u0069\u0064":
			*_efdgfa = 2
		case "\u0062":
			*_efdgfa = 3
		}
	}
	_gfdc, _bagb = d.Token()
	if _bagb != nil {
		return _bagb
	}
	if _cafb, _gcfg := _gfdc.(_a.EndElement); _gcfg && _cafb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfdc)
}
func (_geaeb ST_HierarchyAlignment) ValidateWithPath(path string) error {
	switch _geaeb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_geaeb))
	}
	return nil
}
func (_ffa *CT_Cxn) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _acedb := range start.Attr {
		if _acedb.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_fgdc, _agf := ParseUnionST_ModelId(_acedb.Value)
			if _agf != nil {
				return _agf
			}
			_ffa.ModelIdAttr = _fgdc
			continue
		}
		if _acedb.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ffa.TypeAttr.UnmarshalXMLAttr(_acedb)
			continue
		}
		if _acedb.Name.Local == "\u0073\u0072\u0063I\u0064" {
			_ddgf, _aaf := ParseUnionST_ModelId(_acedb.Value)
			if _aaf != nil {
				return _aaf
			}
			_ffa.SrcIdAttr = _ddgf
			continue
		}
		if _acedb.Name.Local == "\u0064\u0065\u0073\u0074\u0049\u0064" {
			_cfd, _gcfa := ParseUnionST_ModelId(_acedb.Value)
			if _gcfa != nil {
				return _gcfa
			}
			_ffa.DestIdAttr = _cfd
			continue
		}
		if _acedb.Name.Local == "\u0073\u0072\u0063\u004f\u0072\u0064" {
			_fab, _gfea := _b.ParseUint(_acedb.Value, 10, 32)
			if _gfea != nil {
				return _gfea
			}
			_ffa.SrcOrdAttr = uint32(_fab)
			continue
		}
		if _acedb.Name.Local == "\u0064e\u0073\u0074\u004f\u0072\u0064" {
			_adeg, _afgc := _b.ParseUint(_acedb.Value, 10, 32)
			if _afgc != nil {
				return _afgc
			}
			_ffa.DestOrdAttr = uint32(_adeg)
			continue
		}
		if _acedb.Name.Local == "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_dfffc, _cdg := ParseUnionST_ModelId(_acedb.Value)
			if _cdg != nil {
				return _cdg
			}
			_ffa.ParTransIdAttr = &_dfffc
			continue
		}
		if _acedb.Name.Local == "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_ccbd, _bgfae := ParseUnionST_ModelId(_acedb.Value)
			if _bgfae != nil {
				return _bgfae
			}
			_ffa.SibTransIdAttr = &_ccbd
			continue
		}
		if _acedb.Name.Local == "\u0070\u0072\u0065\u0073\u0049\u0064" {
			_daaf, _adgb := _acedb.Value, error(nil)
			if _adgb != nil {
				return _adgb
			}
			_ffa.PresIdAttr = &_daaf
			continue
		}
	}
_cadc:
	for {
		_abgc, _fce := d.Token()
		if _fce != nil {
			return _fce
		}
		switch _dccd := _abgc.(type) {
		case _a.StartElement:
			switch _dccd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ffa.ExtLst = _bb.NewCT_OfficeArtExtensionList()
				if _bag := d.DecodeElement(_ffa.ExtLst, &_dccd); _bag != nil {
					return _bag
				}
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0078\u006e\u0020\u0025\u0076", _dccd.Name)
				if _bbdd := d.Skip(); _bbdd != nil {
					return _bbdd
				}
			}
		case _a.EndElement:
			break _cadc
		case _a.CharData:
		}
	}
	return nil
}
func (_bgag *CT_Choose) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _afce := range start.Attr {
		if _afce.Name.Local == "\u006e\u0061\u006d\u0065" {
			_dbba, _eea := _afce.Value, error(nil)
			if _eea != nil {
				return _eea
			}
			_bgag.NameAttr = &_dbba
			continue
		}
	}
_bed:
	for {
		_def, _dead := d.Token()
		if _dead != nil {
			return _dead
		}
		switch _fbae := _def.(type) {
		case _a.StartElement:
			switch _fbae.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0069\u0066"}:
				_bcca := NewCT_When()
				if _cdd := d.DecodeElement(_bcca, &_fbae); _cdd != nil {
					return _cdd
				}
				_bgag.If = append(_bgag.If, _bcca)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u006c\u0073\u0065"}:
				_bgag.Else = NewCT_Otherwise()
				if _adfc := d.DecodeElement(_bgag.Else, &_fbae); _adfc != nil {
					return _adfc
				}
			default:
				_fb.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u0068\u006fo\u0073\u0065 \u0025\u0076", _fbae.Name)
				if _dfb := d.Skip(); _dfb != nil {
					return _dfb
				}
			}
		case _a.EndElement:
			break _bed
		case _a.CharData:
		}
	}
	return nil
}
func (_adge ST_ArrowheadStyle) Validate() error { return _adge.ValidateWithPath("") }

type CT_Algorithm struct {
	TypeAttr ST_AlgorithmType
	RevAttr  *uint32
	Param    []*CT_Parameter
	ExtLst   *_bb.CT_OfficeArtExtensionList
}

func (_geaa ST_GrowDirection) ValidateWithPath(path string) error {
	switch _geaa {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_geaa))
	}
	return nil
}
func (_debb *ST_OutputShapeType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffbea, _dadff := d.Token()
	if _dadff != nil {
		return _dadff
	}
	if _dfcg, _dbcfg := _ffbea.(_a.EndElement); _dbcfg && _dfcg.Name == start.Name {
		*_debb = 1
		return nil
	}
	if _fbad, _dbdcb := _ffbea.(_a.CharData); !_dbdcb {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffbea)
	} else {
		switch string(_fbad) {
		case "":
			*_debb = 0
		case "\u006e\u006f\u006e\u0065":
			*_debb = 1
		case "\u0063\u006f\u006e\u006e":
			*_debb = 2
		}
	}
	_ffbea, _dadff = d.Token()
	if _dadff != nil {
		return _dadff
	}
	if _aagfb, _gfggf := _ffbea.(_a.EndElement); _gfggf && _aagfb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffbea)
}

const (
	ST_ChildAlignmentUnset ST_ChildAlignment = 0
	ST_ChildAlignmentT     ST_ChildAlignment = 1
	ST_ChildAlignmentB     ST_ChildAlignment = 2
	ST_ChildAlignmentL     ST_ChildAlignment = 3
	ST_ChildAlignmentR     ST_ChildAlignment = 4
)

// Validate validates the CT_OrgChart and its children
func (_ccdf *CT_OrgChart) Validate() error {
	return _ccdf.ValidateWithPath("C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074")
}
func (_fbaa ST_ParameterVal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _fbaa.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_DiagramHorizontalAlignment.String()))
	}
	if _fbaa.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_VerticalAlignment.String()))
	}
	if _fbaa.ST_ChildDirection != ST_ChildDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ChildDirection.String()))
	}
	if _fbaa.ST_ChildAlignment != ST_ChildAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ChildAlignment.String()))
	}
	if _fbaa.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_SecondaryChildAlignment.String()))
	}
	if _fbaa.ST_LinearDirection != ST_LinearDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_LinearDirection.String()))
	}
	if _fbaa.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_SecondaryLinearDirection.String()))
	}
	if _fbaa.ST_StartingElement != ST_StartingElementUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_StartingElement.String()))
	}
	if _fbaa.ST_BendPoint != ST_BendPointUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_BendPoint.String()))
	}
	if _fbaa.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ConnectorRouting.String()))
	}
	if _fbaa.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ArrowheadStyle.String()))
	}
	if _fbaa.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ConnectorDimension.String()))
	}
	if _fbaa.ST_RotationPath != ST_RotationPathUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_RotationPath.String()))
	}
	if _fbaa.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_CenterShapeMapping.String()))
	}
	if _fbaa.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_NodeHorizontalAlignment.String()))
	}
	if _fbaa.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_NodeVerticalAlignment.String()))
	}
	if _fbaa.ST_FallbackDimension != ST_FallbackDimensionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_FallbackDimension.String()))
	}
	if _fbaa.ST_TextDirection != ST_TextDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_TextDirection.String()))
	}
	if _fbaa.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_PyramidAccentPosition.String()))
	}
	if _fbaa.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_PyramidAccentTextMargin.String()))
	}
	if _fbaa.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_TextBlockDirection.String()))
	}
	if _fbaa.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_TextAnchorHorizontal.String()))
	}
	if _fbaa.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_TextAnchorVertical.String()))
	}
	if _fbaa.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_DiagramTextAlignment.String()))
	}
	if _fbaa.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_AutoTextRotation.String()))
	}
	if _fbaa.ST_GrowDirection != ST_GrowDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_GrowDirection.String()))
	}
	if _fbaa.ST_FlowDirection != ST_FlowDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_FlowDirection.String()))
	}
	if _fbaa.ST_ContinueDirection != ST_ContinueDirectionUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ContinueDirection.String()))
	}
	if _fbaa.ST_Breakpoint != ST_BreakpointUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_Breakpoint.String()))
	}
	if _fbaa.ST_Offset != ST_OffsetUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_Offset.String()))
	}
	if _fbaa.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_HierarchyAlignment.String()))
	}
	if _fbaa.Int32 != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0064", *_fbaa.Int32)))
	}
	if _fbaa.Float64 != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0066", *_fbaa.Float64)))
	}
	if _fbaa.Bool != nil {
		e.EncodeToken(_a.CharData(_bg.Sprintf("\u0025\u0064", _gggf(*_fbaa.Bool))))
	}
	if _fbaa.StringVal != nil {
		e.EncodeToken(_a.CharData(*_fbaa.StringVal))
	}
	if _fbaa.ST_ConnectorPoint != ST_ConnectorPointUnset {
		e.EncodeToken(_a.CharData(_fbaa.ST_ConnectorPoint.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

// ST_ModelId is a union type
type ST_ModelId struct {
	Int32   *int32
	ST_Guid *string
}
type ST_PyramidAccentTextMargin byte

func (_bfded ST_PyramidAccentTextMargin) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dgab := _a.Attr{}
	_dgab.Name = name
	switch _bfded {
	case ST_PyramidAccentTextMarginUnset:
		_dgab.Value = ""
	case ST_PyramidAccentTextMarginStep:
		_dgab.Value = "\u0073\u0074\u0065\u0070"
	case ST_PyramidAccentTextMarginStack:
		_dgab.Value = "\u0073\u0074\u0061c\u006b"
	}
	return _dgab, nil
}
func (_cbeef ST_VariableType) Validate() error { return _cbeef.ValidateWithPath("") }
func (_gbeb *CT_DiagramDefinition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gbeb.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_gbeb.UniqueIdAttr)})
	}
	if _gbeb.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _bg.Sprintf("\u0025\u0076", *_gbeb.MinVerAttr)})
	}
	if _gbeb.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_gbeb.DefStyleAttr)})
	}
	e.EncodeToken(start)
	if _gbeb.Title != nil {
		_bage := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _gfeg := range _gbeb.Title {
			e.EncodeElement(_gfeg, _bage)
		}
	}
	if _gbeb.Desc != nil {
		_fbdc := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _efdc := range _gbeb.Desc {
			e.EncodeElement(_efdc, _fbdc)
		}
	}
	if _gbeb.CatLst != nil {
		_geec := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbeb.CatLst, _geec)
	}
	if _gbeb.SampData != nil {
		_dgad := _a.StartElement{Name: _a.Name{Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_gbeb.SampData, _dgad)
	}
	if _gbeb.StyleData != nil {
		_gfdgb := _a.StartElement{Name: _a.Name{Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}}
		e.EncodeElement(_gbeb.StyleData, _gfdgb)
	}
	if _gbeb.ClrData != nil {
		_ecac := _a.StartElement{Name: _a.Name{Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_gbeb.ClrData, _ecac)
	}
	_gea := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
	e.EncodeElement(_gbeb.LayoutNode, _gea)
	if _gbeb.ExtLst != nil {
		_gaaa := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbeb.ExtLst, _gaaa)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_CTCategories and its children
func (_fcfa *CT_CTCategories) Validate() error {
	return _fcfa.ValidateWithPath("\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

type CT_StyleDefinition struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	Title        []*CT_SDName
	Desc         []*CT_SDDescription
	CatLst       *CT_SDCategories
	Scene3d      *_bb.CT_Scene3D
	StyleLbl     []*CT_StyleLabel
	ExtLst       *_bb.CT_OfficeArtExtensionList
}

const (
	ST_TextDirectionUnset ST_TextDirection = 0
	ST_TextDirectionFromT ST_TextDirection = 1
	ST_TextDirectionFromB ST_TextDirection = 2
)

func (_fbaac ST_BendPoint) ValidateWithPath(path string) error {
	switch _fbaac {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbaac))
	}
	return nil
}

type ST_Ints []int32

func (_eddeg ST_CenterShapeMapping) ValidateWithPath(path string) error {
	switch _eddeg {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eddeg))
	}
	return nil
}
func (_febaa ST_PtType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cbbg := _a.Attr{}
	_cbbg.Name = name
	switch _febaa {
	case ST_PtTypeUnset:
		_cbbg.Value = ""
	case ST_PtTypeNode:
		_cbbg.Value = "\u006e\u006f\u0064\u0065"
	case ST_PtTypeAsst:
		_cbbg.Value = "\u0061\u0073\u0073\u0074"
	case ST_PtTypeDoc:
		_cbbg.Value = "\u0064\u006f\u0063"
	case ST_PtTypePres:
		_cbbg.Value = "\u0070\u0072\u0065\u0073"
	case ST_PtTypeParTrans:
		_cbbg.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_PtTypeSibTrans:
		_cbbg.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _cbbg, nil
}
func (_becgb ST_VariableType) ValidateWithPath(path string) error {
	switch _becgb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_becgb))
	}
	return nil
}
func (_bdad ST_ChildDirection) String() string {
	switch _bdad {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}
func (_adab ST_AnimLvlStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bbebf := _a.Attr{}
	_bbebf.Name = name
	switch _adab {
	case ST_AnimLvlStrUnset:
		_bbebf.Value = ""
	case ST_AnimLvlStrNone:
		_bbebf.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimLvlStrLvl:
		_bbebf.Value = "\u006c\u0076\u006c"
	case ST_AnimLvlStrCtr:
		_bbebf.Value = "\u0063\u0074\u0072"
	}
	return _bbebf, nil
}

// Validate validates the CT_AnimOne and its children
func (_dea *CT_AnimOne) Validate() error {
	return _dea.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065")
}

const (
	ST_SecondaryLinearDirectionUnset ST_SecondaryLinearDirection = 0
	ST_SecondaryLinearDirectionNone  ST_SecondaryLinearDirection = 1
	ST_SecondaryLinearDirectionFromL ST_SecondaryLinearDirection = 2
	ST_SecondaryLinearDirectionFromR ST_SecondaryLinearDirection = 3
	ST_SecondaryLinearDirectionFromT ST_SecondaryLinearDirection = 4
	ST_SecondaryLinearDirectionFromB ST_SecondaryLinearDirection = 5
)

// Validate validates the CT_ColorTransform and its children
func (_fdcg *CT_ColorTransform) Validate() error {
	return _fdcg.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d")
}
func NewCT_LayoutNode() *CT_LayoutNode            { _dgbga := &CT_LayoutNode{}; return _dgbga }
func (_ccfe ST_ResizeHandlesStr) Validate() error { return _ccfe.ValidateWithPath("") }
func (_bdccg *ST_TextAnchorHorizontal) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bdccg = 0
	case "\u006e\u006f\u006e\u0065":
		*_bdccg = 1
	case "\u0063\u0074\u0072":
		*_bdccg = 2
	}
	return nil
}
func (_dgga ST_Breakpoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bdadb := _a.Attr{}
	_bdadb.Name = name
	switch _dgga {
	case ST_BreakpointUnset:
		_bdadb.Value = ""
	case ST_BreakpointEndCnv:
		_bdadb.Value = "\u0065\u006e\u0064\u0043\u006e\u0076"
	case ST_BreakpointBal:
		_bdadb.Value = "\u0062\u0061\u006c"
	case ST_BreakpointFixed:
		_bdadb.Value = "\u0066\u0069\u0078e\u0064"
	}
	return _bdadb, nil
}
func (_aeebg ST_ConstraintRelationship) ValidateWithPath(path string) error {
	switch _aeebg {
	case 0, 1, 2, 3:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aeebg))
	}
	return nil
}
func (_bafb *ST_FunctionType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_faac, _adgbg := d.Token()
	if _adgbg != nil {
		return _adgbg
	}
	if _cdgf, _egcf := _faac.(_a.EndElement); _egcf && _cdgf.Name == start.Name {
		*_bafb = 1
		return nil
	}
	if _ddde, _fgccgd := _faac.(_a.CharData); !_fgccgd {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _faac)
	} else {
		switch string(_ddde) {
		case "":
			*_bafb = 0
		case "\u0063\u006e\u0074":
			*_bafb = 1
		case "\u0070\u006f\u0073":
			*_bafb = 2
		case "\u0072\u0065\u0076\u0050\u006f\u0073":
			*_bafb = 3
		case "\u0070o\u0073\u0045\u0076\u0065\u006e":
			*_bafb = 4
		case "\u0070\u006f\u0073\u004f\u0064\u0064":
			*_bafb = 5
		case "\u0076\u0061\u0072":
			*_bafb = 6
		case "\u0064\u0065\u0070t\u0068":
			*_bafb = 7
		case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
			*_bafb = 8
		}
	}
	_faac, _adgbg = d.Token()
	if _adgbg != nil {
		return _adgbg
	}
	if _aebbf, _gded := _faac.(_a.EndElement); _gded && _aebbf.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _faac)
}

// ValidateWithPath validates the CT_Adj and its children, prefixing error messages with path
func (_eee *CT_Adj) ValidateWithPath(path string) error {
	if _eee.IdxAttr < 1 {
		return _bg.Errorf("%\u0073\u002f\u006d\u002e\u0049\u0064x\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _eee.IdxAttr)
	}
	return nil
}

type CT_DataModel struct {
	PtLst  *CT_PtList
	CxnLst *CT_CxnList
	Bg     *_bb.CT_BackgroundFormatting
	Whole  *_bb.CT_WholeE2oFormatting
	ExtLst *_bb.CT_OfficeArtExtensionList
}

func (_ceebc ST_ConstraintType) String() string {
	switch _ceebc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case 3:
		return "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case 4:
		return "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case 5:
		return "\u0062\u0065\u0067\u0050\u0061\u0064"
	case 6:
		return "\u0062"
	case 7:
		return "\u0062\u004d\u0061r\u0067"
	case 8:
		return "\u0062\u004f\u0066\u0066"
	case 9:
		return "\u0063\u0074\u0072\u0058"
	case 10:
		return "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case 11:
		return "\u0063\u0074\u0072\u0059"
	case 12:
		return "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case 13:
		return "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case 14:
		return "\u0064\u0069\u0061\u006d"
	case 15:
		return "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case 16:
		return "\u0065\u006e\u0064\u0050\u0061\u0064"
	case 17:
		return "\u0068"
	case 18:
		return "\u0068\u0041\u0072\u0048"
	case 19:
		return "\u0068\u004f\u0066\u0066"
	case 20:
		return "\u006c"
	case 21:
		return "\u006c\u004d\u0061r\u0067"
	case 22:
		return "\u006c\u004f\u0066\u0066"
	case 23:
		return "\u0072"
	case 24:
		return "\u0072\u004d\u0061r\u0067"
	case 25:
		return "\u0072\u004f\u0066\u0066"
	case 26:
		return "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case 27:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case 28:
		return "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case 29:
		return "\u0073\u0069\u0062S\u0070"
	case 30:
		return "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case 31:
		return "\u0073\u0070"
	case 32:
		return "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case 33:
		return "\u0074"
	case 34:
		return "\u0074\u004d\u0061r\u0067"
	case 35:
		return "\u0074\u004f\u0066\u0066"
	case 36:
		return "\u0075\u0073\u0065r\u0041"
	case 37:
		return "\u0075\u0073\u0065r\u0042"
	case 38:
		return "\u0075\u0073\u0065r\u0043"
	case 39:
		return "\u0075\u0073\u0065r\u0044"
	case 40:
		return "\u0075\u0073\u0065r\u0045"
	case 41:
		return "\u0075\u0073\u0065r\u0046"
	case 42:
		return "\u0075\u0073\u0065r\u0047"
	case 43:
		return "\u0075\u0073\u0065r\u0048"
	case 44:
		return "\u0075\u0073\u0065r\u0049"
	case 45:
		return "\u0075\u0073\u0065r\u004a"
	case 46:
		return "\u0075\u0073\u0065r\u004b"
	case 47:
		return "\u0075\u0073\u0065r\u004c"
	case 48:
		return "\u0075\u0073\u0065r\u004d"
	case 49:
		return "\u0075\u0073\u0065r\u004e"
	case 50:
		return "\u0075\u0073\u0065r\u004f"
	case 51:
		return "\u0075\u0073\u0065r\u0050"
	case 52:
		return "\u0075\u0073\u0065r\u0051"
	case 53:
		return "\u0075\u0073\u0065r\u0052"
	case 54:
		return "\u0075\u0073\u0065r\u0053"
	case 55:
		return "\u0075\u0073\u0065r\u0054"
	case 56:
		return "\u0075\u0073\u0065r\u0055"
	case 57:
		return "\u0075\u0073\u0065r\u0056"
	case 58:
		return "\u0075\u0073\u0065r\u0057"
	case 59:
		return "\u0075\u0073\u0065r\u0058"
	case 60:
		return "\u0075\u0073\u0065r\u0059"
	case 61:
		return "\u0075\u0073\u0065r\u005a"
	case 62:
		return "\u0077"
	case 63:
		return "\u0077\u0041\u0072\u0048"
	case 64:
		return "\u0077\u004f\u0066\u0066"
	}
	return ""
}

type CT_SDDescription struct {
	LangAttr *string
	ValAttr  string
}

func (_egac ST_HueDir) ValidateWithPath(path string) error {
	switch _egac {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egac))
	}
	return nil
}
func (_ecec *ST_ParameterId) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dadg, _dfge := d.Token()
	if _dfge != nil {
		return _dfge
	}
	if _accf, _gcea := _dadg.(_a.EndElement); _gcea && _accf.Name == start.Name {
		*_ecec = 1
		return nil
	}
	if _feca, _ffgbd := _dadg.(_a.CharData); !_ffgbd {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dadg)
	} else {
		switch string(_feca) {
		case "":
			*_ecec = 0
		case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
			*_ecec = 1
		case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
			*_ecec = 2
		case "\u0063\u0068\u0044i\u0072":
			*_ecec = 3
		case "\u0063h\u0041\u006c\u0069\u0067\u006e":
			*_ecec = 4
		case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
			*_ecec = 5
		case "\u006c\u0069\u006e\u0044\u0069\u0072":
			*_ecec = 6
		case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
			*_ecec = 7
		case "\u0073\u0074\u0045\u006c\u0065\u006d":
			*_ecec = 8
		case "\u0062\u0065\u006e\u0064\u0050\u0074":
			*_ecec = 9
		case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
			*_ecec = 10
		case "\u0062\u0065\u0067\u0053\u0074\u0079":
			*_ecec = 11
		case "\u0065\u006e\u0064\u0053\u0074\u0079":
			*_ecec = 12
		case "\u0064\u0069\u006d":
			*_ecec = 13
		case "\u0072o\u0074\u0050\u0061\u0074\u0068":
			*_ecec = 14
		case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
			*_ecec = 15
		case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
			*_ecec = 16
		case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
			*_ecec = 17
		case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
			*_ecec = 18
		case "\u0074\u0078\u0044i\u0072":
			*_ecec = 19
		case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
			*_ecec = 20
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
			*_ecec = 21
		case "\u0074x\u0042\u006c\u0044\u0069\u0072":
			*_ecec = 22
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
			*_ecec = 23
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
			*_ecec = 24
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
			*_ecec = 25
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
			*_ecec = 26
		case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
			*_ecec = 27
		case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
			*_ecec = 28
		case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_ecec = 29
		case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_ecec = 30
		case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
			*_ecec = 31
		case "\u0067\u0072\u0044i\u0072":
			*_ecec = 32
		case "\u0066l\u006f\u0077\u0044\u0069\u0072":
			*_ecec = 33
		case "\u0063o\u006e\u0074\u0044\u0069\u0072":
			*_ecec = 34
		case "\u0062\u006b\u0070\u0074":
			*_ecec = 35
		case "\u006f\u0066\u0066":
			*_ecec = 36
		case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
			*_ecec = 37
		case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_ecec = 38
		case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
			*_ecec = 39
		case "\u0073\u0074\u0041n\u0067":
			*_ecec = 40
		case "\u0073p\u0061\u006e\u0041\u006e\u0067":
			*_ecec = 41
		case "\u0061\u0072":
			*_ecec = 42
		case "\u006cn\u0053\u0070\u0050\u0061\u0072":
			*_ecec = 43
		case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
			*_ecec = 44
		case "\u006c\u006e\u0053\u0070\u0043\u0068":
			*_ecec = 45
		case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
			*_ecec = 46
		case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
			*_ecec = 47
		case "\u0061l\u0069\u0067\u006e\u0054\u0078":
			*_ecec = 48
		case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
			*_ecec = 49
		case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
			*_ecec = 50
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
			*_ecec = 51
		case "\u0073r\u0063\u004e\u006f\u0064\u0065":
			*_ecec = 52
		case "\u0064s\u0074\u004e\u006f\u0064\u0065":
			*_ecec = 53
		case "\u0062\u0065\u0067\u0050\u0074\u0073":
			*_ecec = 54
		case "\u0065\u006e\u0064\u0050\u0074\u0073":
			*_ecec = 55
		}
	}
	_dadg, _dfge = d.Token()
	if _dfge != nil {
		return _dfge
	}
	if _cfade, _dgedd := _dadg.(_a.EndElement); _dgedd && _cfade.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dadg)
}
func (_gbdd ST_VariableType) String() string {
	switch _gbdd {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case 3:
		return "\u0063\u0068\u004da\u0078"
	case 4:
		return "\u0063\u0068\u0050\u0072\u0065\u0066"
	case 5:
		return "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case 6:
		return "\u0064\u0069\u0072"
	case 7:
		return "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case 8:
		return "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case 9:
		return "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case 10:
		return "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return ""
}
func (_geabb ST_ParameterId) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gbfdc := _a.Attr{}
	_gbfdc.Name = name
	switch _geabb {
	case ST_ParameterIdUnset:
		_gbfdc.Value = ""
	case ST_ParameterIdHorzAlign:
		_gbfdc.Value = "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdVertAlign:
		_gbfdc.Value = "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdChDir:
		_gbfdc.Value = "\u0063\u0068\u0044i\u0072"
	case ST_ParameterIdChAlign:
		_gbfdc.Value = "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdSecChAlign:
		_gbfdc.Value = "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdLinDir:
		_gbfdc.Value = "\u006c\u0069\u006e\u0044\u0069\u0072"
	case ST_ParameterIdSecLinDir:
		_gbfdc.Value = "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case ST_ParameterIdStElem:
		_gbfdc.Value = "\u0073\u0074\u0045\u006c\u0065\u006d"
	case ST_ParameterIdBendPt:
		_gbfdc.Value = "\u0062\u0065\u006e\u0064\u0050\u0074"
	case ST_ParameterIdConnRout:
		_gbfdc.Value = "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case ST_ParameterIdBegSty:
		_gbfdc.Value = "\u0062\u0065\u0067\u0053\u0074\u0079"
	case ST_ParameterIdEndSty:
		_gbfdc.Value = "\u0065\u006e\u0064\u0053\u0074\u0079"
	case ST_ParameterIdDim:
		_gbfdc.Value = "\u0064\u0069\u006d"
	case ST_ParameterIdRotPath:
		_gbfdc.Value = "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case ST_ParameterIdCtrShpMap:
		_gbfdc.Value = "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case ST_ParameterIdNodeHorzAlign:
		_gbfdc.Value = "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdNodeVertAlign:
		_gbfdc.Value = "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdFallback:
		_gbfdc.Value = "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case ST_ParameterIdTxDir:
		_gbfdc.Value = "\u0074\u0078\u0044i\u0072"
	case ST_ParameterIdPyraAcctPos:
		_gbfdc.Value = "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case ST_ParameterIdPyraAcctTxMar:
		_gbfdc.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case ST_ParameterIdTxBlDir:
		_gbfdc.Value = "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case ST_ParameterIdTxAnchorHorz:
		_gbfdc.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case ST_ParameterIdTxAnchorVert:
		_gbfdc.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case ST_ParameterIdTxAnchorHorzCh:
		_gbfdc.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case ST_ParameterIdTxAnchorVertCh:
		_gbfdc.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case ST_ParameterIdParTxLTRAlign:
		_gbfdc.Value = "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdParTxRTLAlign:
		_gbfdc.Value = "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdShpTxLTRAlignCh:
		_gbfdc.Value = "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdShpTxRTLAlignCh:
		_gbfdc.Value = "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdAutoTxRot:
		_gbfdc.Value = "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case ST_ParameterIdGrDir:
		_gbfdc.Value = "\u0067\u0072\u0044i\u0072"
	case ST_ParameterIdFlowDir:
		_gbfdc.Value = "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case ST_ParameterIdContDir:
		_gbfdc.Value = "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case ST_ParameterIdBkpt:
		_gbfdc.Value = "\u0062\u006b\u0070\u0074"
	case ST_ParameterIdOff:
		_gbfdc.Value = "\u006f\u0066\u0066"
	case ST_ParameterIdHierAlign:
		_gbfdc.Value = "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdBkPtFixedVal:
		_gbfdc.Value = "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ParameterIdStBulletLvl:
		_gbfdc.Value = "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case ST_ParameterIdStAng:
		_gbfdc.Value = "\u0073\u0074\u0041n\u0067"
	case ST_ParameterIdSpanAng:
		_gbfdc.Value = "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case ST_ParameterIdAr:
		_gbfdc.Value = "\u0061\u0072"
	case ST_ParameterIdLnSpPar:
		_gbfdc.Value = "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case ST_ParameterIdLnSpAfParP:
		_gbfdc.Value = "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case ST_ParameterIdLnSpCh:
		_gbfdc.Value = "\u006c\u006e\u0053\u0070\u0043\u0068"
	case ST_ParameterIdLnSpAfChP:
		_gbfdc.Value = "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case ST_ParameterIdRtShortDist:
		_gbfdc.Value = "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case ST_ParameterIdAlignTx:
		_gbfdc.Value = "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case ST_ParameterIdPyraLvlNode:
		_gbfdc.Value = "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctBkgdNode:
		_gbfdc.Value = "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctTxNode:
		_gbfdc.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case ST_ParameterIdSrcNode:
		_gbfdc.Value = "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case ST_ParameterIdDstNode:
		_gbfdc.Value = "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case ST_ParameterIdBegPts:
		_gbfdc.Value = "\u0062\u0065\u0067\u0050\u0074\u0073"
	case ST_ParameterIdEndPts:
		_gbfdc.Value = "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return _gbfdc, nil
}
func NewAG_IteratorAttributes() *AG_IteratorAttributes { _ce := &AG_IteratorAttributes{}; return _ce }
func (_egfb *ST_HierBranchStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_eebe, _fbga := d.Token()
	if _fbga != nil {
		return _fbga
	}
	if _gfag, _aaff := _eebe.(_a.EndElement); _aaff && _gfag.Name == start.Name {
		*_egfb = 1
		return nil
	}
	if _fgccg, _dedde := _eebe.(_a.CharData); !_dedde {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eebe)
	} else {
		switch string(_fgccg) {
		case "":
			*_egfb = 0
		case "\u006c":
			*_egfb = 1
		case "\u0072":
			*_egfb = 2
		case "\u0068\u0061\u006e\u0067":
			*_egfb = 3
		case "\u0073\u0074\u0064":
			*_egfb = 4
		case "\u0069\u006e\u0069\u0074":
			*_egfb = 5
		}
	}
	_eebe, _fbga = d.Token()
	if _fbga != nil {
		return _fbga
	}
	if _eaeb, _ggadc := _eebe.(_a.EndElement); _ggadc && _eaeb.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eebe)
}
func (_eeed *CT_Description) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gbfb := range start.Attr {
		if _gbfb.Name.Local == "\u006c\u0061\u006e\u0067" {
			_agad, _cgfcc := _gbfb.Value, error(nil)
			if _cgfcc != nil {
				return _cgfcc
			}
			_eeed.LangAttr = &_agad
			continue
		}
		if _gbfb.Name.Local == "\u0076\u0061\u006c" {
			_gacb, _bgfag := _gbfb.Value, error(nil)
			if _bgfag != nil {
				return _bgfag
			}
			_eeed.ValAttr = _gacb
			continue
		}
	}
	for {
		_gbbb, _acca := d.Token()
		if _acca != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fD\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _acca)
		}
		if _dbfb, _cfdb := _gbbb.(_a.EndElement); _cfdb && _dbfb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the StyleDefHdr and its children
func (_dcfce *StyleDefHdr) Validate() error {
	return _dcfce.ValidateWithPath("S\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072")
}

type ST_ArrowheadStyle byte

func (_cdb *CT_ChildMax) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cdb.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _bg.Sprintf("\u0025\u0076", *_cdb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_deaec ST_VerticalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_deaec.String(), start)
}
func (_egfc *ST_Direction) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_egfc = 0
	case "\u006e\u006f\u0072\u006d":
		*_egfc = 1
	case "\u0072\u0065\u0076":
		*_egfc = 2
	}
	return nil
}
func (_bdced ST_FlowDirection) Validate() error { return _bdced.ValidateWithPath("") }
func (_gdfc *ST_BoolOperator) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gbdeb, _fgfd := d.Token()
	if _fgfd != nil {
		return _fgfd
	}
	if _gbdebc, _fddf := _gbdeb.(_a.EndElement); _fddf && _gbdebc.Name == start.Name {
		*_gdfc = 1
		return nil
	}
	if _eegef, _bbdag := _gbdeb.(_a.CharData); !_bbdag {
		return _bg.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbdeb)
	} else {
		switch string(_eegef) {
		case "":
			*_gdfc = 0
		case "\u006e\u006f\u006e\u0065":
			*_gdfc = 1
		case "\u0065\u0071\u0075":
			*_gdfc = 2
		case "\u0067\u0074\u0065":
			*_gdfc = 3
		case "\u006c\u0074\u0065":
			*_gdfc = 4
		}
	}
	_gbdeb, _fgfd = d.Token()
	if _fgfd != nil {
		return _fgfd
	}
	if _ddbee, _dcbcg := _gbdeb.(_a.EndElement); _dcbcg && _ddbee.Name == start.Name {
		return nil
	}
	return _bg.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbdeb)
}
func (_dfcf ST_ParameterId) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dfcf.String(), start)
}

type ST_ChildOrderType byte
type CT_AdjLst struct{ Adj []*CT_Adj }

func (_efff ST_CxnType) Validate() error { return _efff.ValidateWithPath("") }
func (_acddf *ST_ConstraintRelationship) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_acddf = 0
	case "\u0073\u0065\u006c\u0066":
		*_acddf = 1
	case "\u0063\u0068":
		*_acddf = 2
	case "\u0064\u0065\u0073":
		*_acddf = 3
	}
	return nil
}

type CT_Name struct {
	LangAttr *string
	ValAttr  string
}

const (
	ST_BoolOperatorUnset ST_BoolOperator = 0
	ST_BoolOperatorNone  ST_BoolOperator = 1
	ST_BoolOperatorEqu   ST_BoolOperator = 2
	ST_BoolOperatorGte   ST_BoolOperator = 3
	ST_BoolOperatorLte   ST_BoolOperator = 4
)
const (
	ST_FunctionOperatorUnset ST_FunctionOperator = 0
	ST_FunctionOperatorEqu   ST_FunctionOperator = 1
	ST_FunctionOperatorNeq   ST_FunctionOperator = 2
	ST_FunctionOperatorGt    ST_FunctionOperator = 3
	ST_FunctionOperatorLt    ST_FunctionOperator = 4
	ST_FunctionOperatorGte   ST_FunctionOperator = 5
	ST_FunctionOperatorLte   ST_FunctionOperator = 6
)
const (
	ST_ChildOrderTypeUnset ST_ChildOrderType = 0
	ST_ChildOrderTypeB     ST_ChildOrderType = 1
	ST_ChildOrderTypeT     ST_ChildOrderType = 2
)

func (_gfcb *ST_FunctionArgument) Validate() error { return _gfcb.ValidateWithPath("") }

// ValidateWithPath validates the AG_ConstraintAttributes and its children, prefixing error messages with path
func (_bd *AG_ConstraintAttributes) ValidateWithPath(path string) error {
	if _cd := _bd.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _cd != nil {
		return _cd
	}
	if _ebd := _bd.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _ebd != nil {
		return _ebd
	}
	if _ff := _bd.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _ff != nil {
		return _ff
	}
	return nil
}
func (_bfbcb *ST_FunctionValue) Validate() error { return _bfbcb.ValidateWithPath("") }
func (_ebcf ST_ConnectorPoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ebcf.String(), start)
}

type CT_SDCategories struct{ Cat []*CT_SDCategory }

func NewStyleDef() *StyleDef {
	_cdfeg := &StyleDef{}
	_cdfeg.CT_StyleDefinition = *NewCT_StyleDefinition()
	return _cdfeg
}

// Validate validates the CT_Constraint and its children
func (_gege *CT_Constraint) Validate() error {
	return _gege.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074")
}
func NewLayoutDefHdrLst() *LayoutDefHdrLst {
	_caaed := &LayoutDefHdrLst{}
	_caaed.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
	return _caaed
}
func (_bbef ST_PyramidAccentPosition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bbef.String(), start)
}
func (_ebec *CT_SDCategories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ebec.Cat != nil {
		_bedde := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _bcbb := range _ebec.Cat {
			e.EncodeElement(_bcbb, _bedde)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_When struct {
	NameAttr          *string
	FuncAttr          ST_FunctionType
	ArgAttr           *ST_FunctionArgument
	OpAttr            ST_FunctionOperator
	ValAttr           ST_FunctionValue
	Alg               []*CT_Algorithm
	Shape             []*CT_Shape
	PresOf            []*CT_PresentationOf
	ConstrLst         []*CT_Constraints
	RuleLst           []*CT_Rules
	ForEach           []*CT_ForEach
	LayoutNode        []*CT_LayoutNode
	Choose            []*CT_Choose
	ExtLst            []*_bb.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func NewCT_SDCategory() *CT_SDCategory { _egge := &CT_SDCategory{}; return _egge }
func (_egeff *ST_ConnectorRouting) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_egeff = 0
	case "\u0073\u0074\u0072\u0061":
		*_egeff = 1
	case "\u0062\u0065\u006e\u0064":
		*_egeff = 2
	case "\u0063\u0075\u0072v\u0065":
		*_egeff = 3
	case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
		*_egeff = 4
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinitionHeaderLst and its children, prefixing error messages with path
func (_daag *CT_StyleDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _afccb, _afbb := range _daag.StyleDefHdr {
		if _gedb := _afbb.ValidateWithPath(_bg.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0048d\u0072\u005b\u0025\u0064\u005d", path, _afccb)); _gedb != nil {
			return _gedb
		}
	}
	return nil
}
func (_egag ST_ElementType) Validate() error { return _egag.ValidateWithPath("") }
func (_dedd *DataModel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"
	return _dedd.CT_DataModel.MarshalXML(e, start)
}
func (_gcdgg *CT_SDCategory) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gdge := range start.Attr {
		if _gdge.Name.Local == "\u0074\u0079\u0070\u0065" {
			_bgcab, _cfdeg := _gdge.Value, error(nil)
			if _cfdeg != nil {
				return _cfdeg
			}
			_gcdgg.TypeAttr = _bgcab
			continue
		}
		if _gdge.Name.Local == "\u0070\u0072\u0069" {
			_aacdb, _ecad := _b.ParseUint(_gdge.Value, 10, 32)
			if _ecad != nil {
				return _ecad
			}
			_gcdgg.PriAttr = uint32(_aacdb)
			continue
		}
	}
	for {
		_cdbe, _baac := d.Token()
		if _baac != nil {
			return _bg.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0053D\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _baac)
		}
		if _fdeg, _cgege := _cdbe.(_a.EndElement); _cgege && _fdeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_afceg *CT_DiagramDefinitionHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _bg.Sprintf("\u0025\u0076", _afceg.UniqueIdAttr)})
	if _afceg.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _bg.Sprintf("\u0025\u0076", *_afceg.MinVerAttr)})
	}
	if _afceg.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_afceg.DefStyleAttr)})
	}
	if _afceg.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _bg.Sprintf("\u0025\u0076", *_afceg.ResIdAttr)})
	}
	e.EncodeToken(start)
	_acdd := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _eeab := range _afceg.Title {
		e.EncodeElement(_eeab, _acdd)
	}
	_baea := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _feed := range _afceg.Desc {
		e.EncodeElement(_feed, _baea)
	}
	if _afceg.CatLst != nil {
		_fabb := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_afceg.CatLst, _fabb)
	}
	if _afceg.ExtLst != nil {
		_cfdd := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_afceg.ExtLst, _cfdd)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewCT_Parameter() *CT_Parameter {
	_affac := &CT_Parameter{}
	_affac.TypeAttr = ST_ParameterId(1)
	return _affac
}
func (_bbfde ST_SecondaryLinearDirection) Validate() error { return _bbfde.ValidateWithPath("") }
func (_cdfbf ST_VerticalAlignment) ValidateWithPath(path string) error {
	switch _cdfbf {
	case 0, 1, 2, 3, 4:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdfbf))
	}
	return nil
}
func (_bfbb *CT_Name) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cbfd := range start.Attr {
		if _cbfd.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gccf, _cbfdg := _cbfd.Value, error(nil)
			if _cbfdg != nil {
				return _cbfdg
			}
			_bfbb.LangAttr = &_gccf
			continue
		}
		if _cbfd.Name.Local == "\u0076\u0061\u006c" {
			_beae, _cbfde := _cbfd.Value, error(nil)
			if _cbfde != nil {
				return _cbfde
			}
			_bfbb.ValAttr = _beae
			continue
		}
	}
	for {
		_eaafg, _cfda := d.Token()
		if _cfda != nil {
			return _bg.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004e\u0061\u006d\u0065\u003a\u0020\u0025\u0073", _cfda)
		}
		if _edfdc, _gdcg := _eaafg.(_a.EndElement); _gdcg && _edfdc.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_ChildDirection byte

func (_badg *CT_Shape) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _badg.RotAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u006f\u0074"}, Value: _bg.Sprintf("\u0025\u0076", *_badg.RotAttr)})
	}
	if _badg.TypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _bg.Sprintf("\u0025\u0076", *_badg.TypeAttr)})
	}
	if _badg.BlipAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0062\u006c\u0069\u0070"}, Value: _bg.Sprintf("\u0025\u0076", *_badg.BlipAttr)})
	}
	if _badg.ZOrderOffAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f"}, Value: _bg.Sprintf("\u0025\u0076", *_badg.ZOrderOffAttr)})
	}
	if _badg.HideGeomAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_badg.HideGeomAttr))})
	}
	if _badg.LkTxEntryAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_badg.LkTxEntryAttr))})
	}
	if _badg.BlipPhldrAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r"}, Value: _bg.Sprintf("\u0025\u0064", _gggf(*_badg.BlipPhldrAttr))})
	}
	e.EncodeToken(start)
	if _badg.AdjLst != nil {
		_dcbe := _a.StartElement{Name: _a.Name{Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}}
		e.EncodeElement(_badg.AdjLst, _dcbe)
	}
	if _badg.ExtLst != nil {
		_cabde := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_badg.ExtLst, _cabde)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_dccb ST_RotationPath) ValidateWithPath(path string) error {
	switch _dccb {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dccb))
	}
	return nil
}

type CT_Constraint struct {
	OpAttr         ST_BoolOperator
	ValAttr        *float64
	FactAttr       *float64
	ExtLst         *_bb.CT_OfficeArtExtensionList
	TypeAttr       ST_ConstraintType
	ForAttr        ST_ConstraintRelationship
	ForNameAttr    *string
	PtTypeAttr     ST_ElementType
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}
type ST_Breakpoint byte

// Validate validates the CT_CxnList and its children
func (_defa *CT_CxnList) Validate() error {
	return _defa.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074")
}
func (_babc *CT_Categories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_agc:
	for {
		_cbe, _feg := d.Token()
		if _feg != nil {
			return _feg
		}
		switch _cad := _cbe.(type) {
		case _a.StartElement:
			switch _cad.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_ddef := NewCT_Category()
				if _bbd := d.DecodeElement(_ddef, &_cad); _bbd != nil {
					return _bbd
				}
				_babc.Cat = append(_babc.Cat, _ddef)
			default:
				_fb.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073 \u0025\u0076", _cad.Name)
				if _caf := d.Skip(); _caf != nil {
					return _caf
				}
			}
		case _a.EndElement:
			break _agc
		case _a.CharData:
		}
	}
	return nil
}
func init() {
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0054\u004e\u0061\u006de", NewCT_CTName)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_CTDescription)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_CTCategory)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_CTCategories)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s", NewCT_Colors)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_CTStyleLabel)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d", NewCT_ColorTransform)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_ColorTransformHeader)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074", NewCT_ColorTransformHeaderLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0074", NewCT_Pt)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t", NewCT_PtList)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e", NewCT_Cxn)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074", NewCT_CxnList)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c", NewCT_DataModel)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074", NewCT_Constraint)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073", NewCT_Constraints)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065", NewCT_NumericRule)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073", NewCT_Rules)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066", NewCT_PresentationOf)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u0064\u006a", NewCT_Adj)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t", NewCT_AdjLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072", NewCT_Parameter)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d", NewCT_Algorithm)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065", NewCT_LayoutNode)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068", NewCT_ForEach)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0057\u0068\u0065\u006e", NewCT_When)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065", NewCT_Otherwise)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e", NewCT_Choose)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061", NewCT_SampleData)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_Category)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_Categories)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u004e\u0061\u006d\u0065", NewCT_Name)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e", NewCT_Description)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e", NewCT_DiagramDefinition)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072", NewCT_DiagramDefinitionHeader)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074", NewCT_DiagramDefinitionHeaderLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s", NewCT_RelIds)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074", NewCT_ElemPropSet)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074", NewCT_OrgChart)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078", NewCT_ChildMax)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066", NewCT_ChildPref)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064", NewCT_BulletEnabled)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Direction)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065", NewCT_HierBranchStyle)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065", NewCT_AnimOne)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c", NewCT_AnimLvl)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073", NewCT_ResizeHandles)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074", NewCT_LayoutVariablePropertySet)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0044\u004e\u0061\u006de", NewCT_SDName)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_SDDescription)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_SDCategory)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_SDCategories)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073", NewCT_TextProps)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_StyleLabel)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e", NewCT_StyleDefinition)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_StyleDefinitionHeader)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074", NewCT_StyleDefinitionHeaderLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f", NewColorsDef)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072", NewColorsDefHdr)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewColorsDefHdrLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l", NewDataModel)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f", NewLayoutDef)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072", NewLayoutDefHdr)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewLayoutDefHdrLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0072\u0065\u006c\u0049\u0064\u0073", NewRelIds)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066", NewStyleDef)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072", NewStyleDefHdr)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074", NewStyleDefHdrLst)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_IteratorAttributes)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_ConstraintAttributes)
	_fb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073", NewAG_ConstraintRefAttributes)
}
func (_cbeg ST_StartingElement) ValidateWithPath(path string) error {
	switch _cbeg {
	case 0, 1, 2:
	default:
		return _bg.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbeg))
	}
	return nil
}
func (_dcage ST_OutputShapeType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dcage.String(), start)
}

type CT_CxnList struct{ Cxn []*CT_Cxn }

func (_eadeg ST_AlgorithmType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dacfc := _a.Attr{}
	_dacfc.Name = name
	switch _eadeg {
	case ST_AlgorithmTypeUnset:
		_dacfc.Value = ""
	case ST_AlgorithmTypeComposite:
		_dacfc.Value = "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case ST_AlgorithmTypeConn:
		_dacfc.Value = "\u0063\u006f\u006e\u006e"
	case ST_AlgorithmTypeCycle:
		_dacfc.Value = "\u0063\u0079\u0063l\u0065"
	case ST_AlgorithmTypeHierChild:
		_dacfc.Value = "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case ST_AlgorithmTypeHierRoot:
		_dacfc.Value = "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case ST_AlgorithmTypePyra:
		_dacfc.Value = "\u0070\u0079\u0072\u0061"
	case ST_AlgorithmTypeLin:
		_dacfc.Value = "\u006c\u0069\u006e"
	case ST_AlgorithmTypeSp:
		_dacfc.Value = "\u0073\u0070"
	case ST_AlgorithmTypeTx:
		_dacfc.Value = "\u0074\u0078"
	case ST_AlgorithmTypeSnake:
		_dacfc.Value = "\u0073\u006e\u0061k\u0065"
	}
	return _dacfc, nil
}
func (_aggg ST_GrowDirection) String() string {
	switch _aggg {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0062\u004c"
	case 4:
		return "\u0062\u0052"
	}
	return ""
}
