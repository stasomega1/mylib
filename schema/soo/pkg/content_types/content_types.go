//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package content_types

import (
	_e "encoding/xml"
	_c "fmt"
	_ga "github.com/stasomega1/mylib"
	_eb "regexp"
)

var ST_ContentTypePatternRe = _eb.MustCompile(ST_ContentTypePattern)

func NewDefault() *Default { _ge := &Default{}; _ge.CT_Default = *NewCT_Default(); return _ge }
func (_fdf *Types) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fdf.CT_Types = *NewCT_Types()
_ccd:
	for {
		_ceg, _dbad := d.Token()
		if _dbad != nil {
			return _dbad
		}
		switch _edg := _ceg.(type) {
		case _e.StartElement:
			switch _edg.Name {
			case _e.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u0044e\u0066\u0061\u0075\u006c\u0074"}:
				_cee := NewDefault()
				if _fef := d.DecodeElement(_cee, &_edg); _fef != nil {
					return _fef
				}
				_fdf.Default = append(_fdf.Default, _cee)
			case _e.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:
				_cce := NewOverride()
				if _bc := d.DecodeElement(_cce, &_edg); _bc != nil {
					return _bc
				}
				_fdf.Override = append(_fdf.Override, _cce)
			default:
				_ga.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0054\u0079\u0070e\u0073 \u0025\u0076", _edg.Name)
				if _abd := d.Skip(); _abd != nil {
					return _abd
				}
			}
		case _e.EndElement:
			break _ccd
		case _e.CharData:
		}
	}
	return nil
}
func (_gb *CT_Override) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"}, Value: _c.Sprintf("\u0025\u0076", _gb.ContentTypeAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065"}, Value: _c.Sprintf("\u0025\u0076", _gb.PartNameAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Override and its children, prefixing error messages with path
func (_ba *CT_Override) ValidateWithPath(path string) error {
	if !ST_ContentTypePatternRe.MatchString(_ba.ContentTypeAttr) {
		return _c.Errorf("\u0025\u0073/\u006d\u002e\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, ST_ContentTypePatternRe, _ba.ContentTypeAttr)
	}
	return nil
}

type CT_Types struct {
	Default  []*Default
	Override []*Override
}

// Validate validates the Types and its children
func (_ddd *Types) Validate() error { return _ddd.ValidateWithPath("\u0054\u0079\u0070e\u0073") }

// Validate validates the CT_Override and its children
func (_bd *CT_Override) Validate() error {
	return _bd.ValidateWithPath("C\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065")
}
func NewOverride() *Override { _ag := &Override{}; _ag.CT_Override = *NewCT_Override(); return _ag }
func NewCT_Types() *CT_Types { _fgg := &CT_Types{}; return _fgg }

type Override struct{ CT_Override }

// Validate validates the Override and its children
func (_dba *Override) Validate() error {
	return _dba.ValidateWithPath("\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065")
}

// ValidateWithPath validates the Override and its children, prefixing error messages with path
func (_gadd *Override) ValidateWithPath(path string) error {
	if _bgb := _gadd.CT_Override.ValidateWithPath(path); _bgb != nil {
		return _bgb
	}
	return nil
}

// ValidateWithPath validates the Types and its children, prefixing error messages with path
func (_cfd *Types) ValidateWithPath(path string) error {
	if _ef := _cfd.CT_Types.ValidateWithPath(path); _ef != nil {
		return _ef
	}
	return nil
}

type CT_Default struct {
	ExtensionAttr   string
	ContentTypeAttr string
}

func (_ccf *Default) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return _ccf.CT_Default.MarshalXML(e, start)
}

var ST_ExtensionPatternRe = _eb.MustCompile(ST_ExtensionPattern)

type Default struct{ CT_Default }

func (_fe *CT_Default) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn"}, Value: _c.Sprintf("\u0025\u0076", _fe.ExtensionAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"}, Value: _c.Sprintf("\u0025\u0076", _fe.ContentTypeAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Default and its children
func (_acb *Default) Validate() error {
	return _acb.ValidateWithPath("\u0044e\u0066\u0061\u0075\u006c\u0074")
}

// ValidateWithPath validates the Default and its children, prefixing error messages with path
func (_bea *Default) ValidateWithPath(path string) error {
	if _dee := _bea.CT_Default.ValidateWithPath(path); _dee != nil {
		return _dee
	}
	return nil
}
func (_cb *Types) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0054\u0079\u0070e\u0073"
	return _cb.CT_Types.MarshalXML(e, start)
}

const ST_ExtensionPattern = "\u0028\u005b\u0021\u0024\u0026\u0027\\\u0028\u005c\u0029\u005c\u002a\\\u002b\u002c\u003a\u003d\u005d\u007c(\u0025\u005b\u0030\u002d\u0039a\u002d\u0066\u0041\u002d\u0046\u005d\u005b\u0030\u002d\u0039\u0061\u002df\u0041\u002d\u0046\u005d\u0029\u007c\u005b\u003a\u0040\u005d\u007c\u005b\u0061\u002d\u007aA\u002d\u005a\u0030\u002d\u0039\u005c\u002d\u005f~\u005d\u0029\u002b"

func NewCT_Override() *CT_Override {
	_ee := &CT_Override{}
	_ee.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	return _ee
}
func NewCT_Default() *CT_Default {
	_f := &CT_Default{}
	_f.ExtensionAttr = "\u0078\u006d\u006c"
	_f.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	return _f
}
func (_gbg *Default) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gbg.CT_Default = *NewCT_Default()
	for _, _bf := range start.Attr {
		if _bf.Name.Local == "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn" {
			_db, _fad := _bf.Value, error(nil)
			if _fad != nil {
				return _fad
			}
			_gbg.ExtensionAttr = _db
			continue
		}
		if _bf.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_afc, _ca := _bf.Value, error(nil)
			if _ca != nil {
				return _ca
			}
			_gbg.ContentTypeAttr = _afc
			continue
		}
	}
	for {
		_fafg, _ade := d.Token()
		if _ade != nil {
			return _c.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u003a\u0020\u0025\u0073", _ade)
		}
		if _dff, _bdd := _fafg.(_e.EndElement); _bdd && _dff.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adb *Override) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return _adb.CT_Override.MarshalXML(e, start)
}

const ST_ContentTypePattern = "\u005e\\\u0070{\u004c\u0061\u0074\u0069\u006e\u007d\u002b\u002f\u002e\u002a\u0024"

func NewTypes() *Types { _fcb := &Types{}; _fcb.CT_Types = *NewCT_Types(); return _fcb }

type CT_Override struct {
	ContentTypeAttr string
	PartNameAttr    string
}

// Validate validates the CT_Types and its children
func (_fce *CT_Types) Validate() error {
	return _fce.ValidateWithPath("\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073")
}
func (_de *CT_Override) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_de.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	for _, _aa := range start.Attr {
		if _aa.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_fec, _gd := _aa.Value, error(nil)
			if _gd != nil {
				return _gd
			}
			_de.ContentTypeAttr = _fec
			continue
		}
		if _aa.Name.Local == "\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065" {
			_ab, _bb := _aa.Value, error(nil)
			if _bb != nil {
				return _bb
			}
			_de.PartNameAttr = _ab
			continue
		}
	}
	for {
		_dgd, _ea := d.Token()
		if _ea != nil {
			return _c.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025\u0073", _ea)
		}
		if _df, _gdc := _dgd.(_e.EndElement); _gdc && _df.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Default and its children, prefixing error messages with path
func (_fa *CT_Default) ValidateWithPath(path string) error {
	if !ST_ExtensionPatternRe.MatchString(_fa.ExtensionAttr) {
		return _c.Errorf("\u0025s\u002f\u006d.\u0045\u0078\u0074\u0065n\u0073\u0069\u006fn\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074 m\u0061\u0074\u0063h\u0020\u0027%\u0073\u0027\u0020\u0028\u0068\u0061v\u0065\u0020%\u0076\u0029", path, ST_ExtensionPatternRe, _fa.ExtensionAttr)
	}
	if !ST_ContentTypePatternRe.MatchString(_fa.ContentTypeAttr) {
		return _c.Errorf("\u0025\u0073/\u006d\u002e\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, ST_ContentTypePatternRe, _fa.ContentTypeAttr)
	}
	return nil
}
func (_d *CT_Default) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_d.ExtensionAttr = "\u0078\u006d\u006c"
	_d.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	for _, _fb := range start.Attr {
		if _fb.Name.Local == "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn" {
			_cf, _b := _fb.Value, error(nil)
			if _b != nil {
				return _b
			}
			_d.ExtensionAttr = _cf
			continue
		}
		if _fb.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_cc, _a := _fb.Value, error(nil)
			if _a != nil {
				return _a
			}
			_d.ContentTypeAttr = _cc
			continue
		}
	}
	for {
		_dg, _be := d.Token()
		if _be != nil {
			return _c.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u003a\u0020%\u0073", _be)
		}
		if _gad, _gf := _dg.(_e.EndElement); _gf && _gad.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Default and its children
func (_ad *CT_Default) Validate() error {
	return _ad.ValidateWithPath("\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074")
}

type Types struct{ CT_Types }

func (_cff *CT_Types) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ae:
	for {
		_gfe, _bee := d.Token()
		if _bee != nil {
			return _bee
		}
		switch _bgg := _gfe.(type) {
		case _e.StartElement:
			switch _bgg.Name {
			case _e.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u0044e\u0066\u0061\u0075\u006c\u0074"}:
				_ead := NewDefault()
				if _da := d.DecodeElement(_ead, &_bgg); _da != nil {
					return _da
				}
				_cff.Default = append(_cff.Default, _ead)
			case _e.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:
				_fc := NewOverride()
				if _gba := d.DecodeElement(_fc, &_bgg); _gba != nil {
					return _gba
				}
				_cff.Override = append(_cff.Override, _fc)
			default:
				_ga.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073\u0020\u0025\u0076", _bgg.Name)
				if _gc := d.Skip(); _gc != nil {
					return _gc
				}
			}
		case _e.EndElement:
			break _ae
		case _e.CharData:
		}
	}
	return nil
}
func (_ccfc *Override) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ccfc.CT_Override = *NewCT_Override()
	for _, _aab := range start.Attr {
		if _aab.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_abg, _age := _aab.Value, error(nil)
			if _age != nil {
				return _age
			}
			_ccfc.ContentTypeAttr = _abg
			continue
		}
		if _aab.Name.Local == "\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065" {
			_ede, _aabe := _aab.Value, error(nil)
			if _aabe != nil {
				return _aabe
			}
			_ccfc.PartNameAttr = _ede
			continue
		}
	}
	for {
		_cg, _dfa := d.Token()
		if _dfa != nil {
			return _c.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u004f\u0076\u0065r\u0072\u0069\u0064\u0065: \u0025\u0073", _dfa)
		}
		if _ce, _afb := _cg.(_e.EndElement); _afb && _ce.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Types and its children, prefixing error messages with path
func (_ac *CT_Types) ValidateWithPath(path string) error {
	for _fdc, _af := range _ac.Default {
		if _edd := _af.ValidateWithPath(_c.Sprintf("\u0025\u0073\u002f\u0044\u0065\u0066\u0061\u0075\u006ct\u005b\u0025\u0064\u005d", path, _fdc)); _edd != nil {
			return _edd
		}
	}
	for _gg, _faf := range _ac.Override {
		if _eef := _faf.ValidateWithPath(_c.Sprintf("\u0025s\u002fO\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u005b\u0025\u0064\u005d", path, _gg)); _eef != nil {
			return _eef
		}
	}
	return nil
}
func (_bg *CT_Types) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bg.Default != nil {
		_ed := _e.StartElement{Name: _e.Name{Local: "\u0044e\u0066\u0061\u0075\u006c\u0074"}}
		for _, _ec := range _bg.Default {
			e.EncodeElement(_ec, _ed)
		}
	}
	if _bg.Override != nil {
		_bbg := _e.StartElement{Name: _e.Name{Local: "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}}
		for _, _add := range _bg.Override {
			e.EncodeElement(_add, _bbg)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func init() {
	_ga.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073", NewCT_Types)
	_ga.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074", NewCT_Default)
	_ga.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "C\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065", NewCT_Override)
	_ga.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0054\u0079\u0070e\u0073", NewTypes)
	_ga.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0044e\u0066\u0061\u0075\u006c\u0074", NewDefault)
	_ga.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065", NewOverride)
}
