//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package relationships

import (
	_e "encoding/xml"
	_g "fmt"
	_d "github.com/stasomega1/mylib"
)

func (_cdb *Relationship) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cdb.CT_Relationship = *NewCT_Relationship()
	for _, _eagf := range start.Attr {
		if _eagf.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074\u004d\u006f\u0064\u0065" {
			_cdb.TargetModeAttr.UnmarshalXMLAttr(_eagf)
			continue
		}
		if _eagf.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074" {
			_cb, _cg := _eagf.Value, error(nil)
			if _cg != nil {
				return _cg
			}
			_cdb.TargetAttr = _cb
			continue
		}
		if _eagf.Name.Local == "\u0054\u0079\u0070\u0065" {
			_gca, _fcb := _eagf.Value, error(nil)
			if _fcb != nil {
				return _fcb
			}
			_cdb.TypeAttr = _gca
			continue
		}
		if _eagf.Name.Local == "\u0049\u0064" {
			_ae, _ece := _eagf.Value, error(nil)
			if _ece != nil {
				return _ece
			}
			_cdb.IdAttr = _ae
			continue
		}
	}
	for {
		_daa, _gb := d.Token()
		if _gb != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0052\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069\u0070\u003a\u0020\u0025\u0073", _gb)
		}
		if _eeg, _bbf := _daa.(_e.EndElement); _bbf && _eeg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the Relationship and its children, prefixing error messages with path
func (_eg *Relationship) ValidateWithPath(path string) error {
	if _db := _eg.CT_Relationship.ValidateWithPath(path); _db != nil {
		return _db
	}
	return nil
}

type ST_TargetMode byte

// ValidateWithPath validates the Relationships and its children, prefixing error messages with path
func (_ab *Relationships) ValidateWithPath(path string) error {
	if _cfa := _ab.CT_Relationships.ValidateWithPath(path); _cfa != nil {
		return _cfa
	}
	return nil
}
func NewCT_Relationship() *CT_Relationship { _a := &CT_Relationship{}; return _a }
func (_bde *CT_Relationships) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bde.Relationship != nil {
		_ea := _e.StartElement{Name: _e.Name{Local: "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"}}
		for _, _bg := range _bde.Relationship {
			e.EncodeElement(_bg, _ea)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TargetModeUnset    ST_TargetMode = 0
	ST_TargetModeExternal ST_TargetMode = 1
	ST_TargetModeInternal ST_TargetMode = 2
)

func (_ba *ST_TargetMode) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ba = 0
	case "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c":
		*_ba = 1
	case "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c":
		*_ba = 2
	}
	return nil
}

type CT_Relationships struct{ Relationship []*Relationship }

func (_af *CT_Relationship) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _b := range start.Attr {
		if _b.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074\u004d\u006f\u0064\u0065" {
			_af.TargetModeAttr.UnmarshalXMLAttr(_b)
			continue
		}
		if _b.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074" {
			_ec, _cd := _b.Value, error(nil)
			if _cd != nil {
				return _cd
			}
			_af.TargetAttr = _ec
			continue
		}
		if _b.Name.Local == "\u0054\u0079\u0070\u0065" {
			_ecg, _bc := _b.Value, error(nil)
			if _bc != nil {
				return _bc
			}
			_af.TypeAttr = _ecg
			continue
		}
		if _b.Name.Local == "\u0049\u0064" {
			_ca, _ee := _b.Value, error(nil)
			if _ee != nil {
				return _ee
			}
			_af.IdAttr = _ca
			continue
		}
	}
	for {
		_fa, _afa := d.Token()
		if _afa != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0052\u0065\u006c\u0061\u0074\u0069o\u006e\u0073\u0068i\u0070:\u0020\u0025\u0073", _afa)
		}
		if _bb, _gc := _fa.(_e.CharData); _gc {
			_af.Content = string(_bb)
		}
		if _faa, _fab := _fa.(_e.EndElement); _fab && _faa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ged ST_TargetMode) Validate() error { return _ged.ValidateWithPath("") }
func NewRelationships() *Relationships {
	_cdbf := &Relationships{}
	_cdbf.CT_Relationships = *NewCT_Relationships()
	return _cdbf
}

// Validate validates the Relationships and its children
func (_gg *Relationships) Validate() error {
	return _gg.ValidateWithPath("\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073")
}

type Relationship struct{ CT_Relationship }

func (_gbc ST_TargetMode) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gcg := _e.Attr{}
	_gcg.Name = name
	switch _gbc {
	case ST_TargetModeUnset:
		_gcg.Value = ""
	case ST_TargetModeExternal:
		_gcg.Value = "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c"
	case ST_TargetModeInternal:
		_gcg.Value = "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c"
	}
	return _gcg, nil
}

type Relationships struct{ CT_Relationships }

func (_afg ST_TargetMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_afg.String(), start)
}
func (_cdac ST_TargetMode) String() string {
	switch _cdac {
	case 0:
		return ""
	case 1:
		return "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c"
	case 2:
		return "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c"
	}
	return ""
}
func (_ccf *Relationships) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073"
	return _ccf.CT_Relationships.MarshalXML(e, start)
}
func (_ed *CT_Relationship) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ed.TargetModeAttr != ST_TargetModeUnset {
		_da, _c := _ed.TargetModeAttr.MarshalXMLAttr(_e.Name{Local: "\u0054\u0061\u0072\u0067\u0065\u0074\u004d\u006f\u0064\u0065"})
		if _c != nil {
			return _c
		}
		start.Attr = append(start.Attr, _da)
	}
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0054\u0061\u0072\u0067\u0065\u0074"}, Value: _g.Sprintf("\u0025\u0076", _ed.TargetAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0054\u0079\u0070\u0065"}, Value: _g.Sprintf("\u0025\u0076", _ed.TypeAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0049\u0064"}, Value: _g.Sprintf("\u0025\u0076", _ed.IdAttr)})
	e.EncodeElement(_ed.Content, start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_df *Relationships) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_df.CT_Relationships = *NewCT_Relationships()
_aa:
	for {
		_dfd, _ffb := d.Token()
		if _ffb != nil {
			return _ffb
		}
		switch _ace := _dfd.(type) {
		case _e.StartElement:
			switch _ace.Name {
			case _e.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", Local: "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"}:
				_aad := NewRelationship()
				if _gf := d.DecodeElement(_aad, &_ace); _gf != nil {
					return _gf
				}
				_df.Relationship = append(_df.Relationship, _aad)
			default:
				_d.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0052\u0065\u006c\u0061t\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073 \u0025\u0076", _ace.Name)
				if _gea := d.Skip(); _gea != nil {
					return _gea
				}
			}
		case _e.EndElement:
			break _aa
		case _e.CharData:
		}
	}
	return nil
}

type CT_Relationship struct {
	TargetModeAttr ST_TargetMode
	TargetAttr     string
	TypeAttr       string
	IdAttr         string
	Content        string
}

func (_be *CT_Relationships) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bcd:
	for {
		_dg, _efg := d.Token()
		if _efg != nil {
			return _efg
		}
		switch _cda := _dg.(type) {
		case _e.StartElement:
			switch _cda.Name {
			case _e.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", Local: "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"}:
				_eag := NewRelationship()
				if _ge := d.DecodeElement(_eag, &_cda); _ge != nil {
					return _ge
				}
				_be.Relationship = append(_be.Relationship, _eag)
			default:
				_d.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u0020\u0025v", _cda.Name)
				if _fag := d.Skip(); _fag != nil {
					return _fag
				}
			}
		case _e.EndElement:
			break _bcd
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the Relationship and its children
func (_bbe *Relationship) Validate() error {
	return _bbe.ValidateWithPath("\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070")
}

// Validate validates the CT_Relationship and its children
func (_ef *CT_Relationship) Validate() error {
	return _ef.ValidateWithPath("\u0043T\u005fR\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070")
}
func (_dbg *ST_TargetMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eee, _fb := d.Token()
	if _fb != nil {
		return _fb
	}
	if _bf, _ag := _eee.(_e.EndElement); _ag && _bf.Name == start.Name {
		*_dbg = 1
		return nil
	}
	if _beb, _abg := _eee.(_e.CharData); !_abg {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eee)
	} else {
		switch string(_beb) {
		case "":
			*_dbg = 0
		case "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c":
			*_dbg = 1
		case "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c":
			*_dbg = 2
		}
	}
	_eee, _fb = d.Token()
	if _fb != nil {
		return _fb
	}
	if _afb, _dad := _eee.(_e.EndElement); _dad && _afb.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eee)
}

// Validate validates the CT_Relationships and its children
func (_geg *CT_Relationships) Validate() error {
	return _geg.ValidateWithPath("\u0043\u0054_\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073")
}
func NewRelationship() *Relationship {
	_ff := &Relationship{}
	_ff.CT_Relationship = *NewCT_Relationship()
	return _ff
}

// ValidateWithPath validates the CT_Relationships and its children, prefixing error messages with path
func (_afaa *CT_Relationships) ValidateWithPath(path string) error {
	for _ac, _ad := range _afaa.Relationship {
		if _bgg := _ad.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0052el\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u005b\u0025\u0064\u005d", path, _ac)); _bgg != nil {
			return _bgg
		}
	}
	return nil
}
func (_bbb ST_TargetMode) ValidateWithPath(path string) error {
	switch _bbb {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbb))
	}
	return nil
}
func NewCT_Relationships() *CT_Relationships { _cc := &CT_Relationships{}; return _cc }
func (_dc *Relationship) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return _dc.CT_Relationship.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_Relationship and its children, prefixing error messages with path
func (_bd *CT_Relationship) ValidateWithPath(path string) error {
	if _cf := _bd.TargetModeAttr.ValidateWithPath(path + "\u002fT\u0061r\u0067\u0065\u0074\u004d\u006f\u0064\u0065\u0041\u0074\u0074\u0072"); _cf != nil {
		return _cf
	}
	return nil
}
func init() {
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0043\u0054_\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073", NewCT_Relationships)
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0043T\u005fR\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070", NewCT_Relationship)
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073", NewRelationships)
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070", NewRelationship)
}
