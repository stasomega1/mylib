//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint

import (
	_b "encoding/xml"
	_g "fmt"
	_e "github.com/stasomega1/mylib"
)

func NewCT_Empty() *CT_Empty { _ec := &CT_Empty{}; return _ec }

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_fg *Textdata) ValidateWithPath(path string) error {
	if _egc := _fg.CT_Rel.ValidateWithPath(path); _egc != nil {
		return _egc
	}
	return nil
}

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_bg *CT_Rel) ValidateWithPath(path string) error { return nil }
func (_dcg *Iscomment) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0069s\u0063\u006f\u006d\u006d\u0065\u006et"
	return _dcg.CT_Empty.MarshalXML(e, start)
}

// Validate validates the CT_Rel and its children
func (_eg *CT_Rel) Validate() error {
	return _eg.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c")
}

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_dc *CT_Empty) ValidateWithPath(path string) error { return nil }
func NewTextdata() *Textdata                             { _eff := &Textdata{}; _eff.CT_Rel = *NewCT_Rel(); return _eff }
func (_bc *CT_Empty) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_ce *Iscomment) ValidateWithPath(path string) error {
	if _ca := _ce.CT_Empty.ValidateWithPath(path); _ca != nil {
		return _ca
	}
	return nil
}
func (_cb *CT_Rel) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bf := range start.Attr {
		if _bf.Name.Local == "\u0069\u0064" {
			_fe, _fee := _bf.Value, error(nil)
			if _fee != nil {
				return _fee
			}
			_cb.IdAttr = &_fe
			continue
		}
	}
	for {
		_de, _gde := d.Token()
		if _gde != nil {
			return _g.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073", _gde)
		}
		if _aa, _feb := _de.(_b.EndElement); _feb && _aa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gd *CT_Empty) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for {
		_ece, _af := d.Token()
		if _af != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073", _af)
		}
		if _ef, _d := _ece.(_b.EndElement); _d && _ef.Name == start.Name {
			break
		}
	}
	return nil
}

type Iscomment struct{ CT_Empty }
type CT_Rel struct{ IdAttr *string }

// Validate validates the Iscomment and its children
func (_ga *Iscomment) Validate() error {
	return _ga.ValidateWithPath("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et")
}
func (_ge *Textdata) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061"
	return _ge.CT_Rel.MarshalXML(e, start)
}
func (_c *CT_Rel) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _c.IdAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0069\u0064"}, Value: _g.Sprintf("\u0025\u0076", *_c.IdAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ad *Textdata) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ad.CT_Rel = *NewCT_Rel()
	for _, _bcb := range start.Attr {
		if _bcb.Name.Local == "\u0069\u0064" {
			_fc, _ff := _bcb.Value, error(nil)
			if _ff != nil {
				return _ff
			}
			_ad.IdAttr = &_fc
			continue
		}
	}
	for {
		_fa, _baa := d.Token()
		if _baa != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073", _baa)
		}
		if _dgc, _egd := _fa.(_b.EndElement); _egd && _dgc.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Rel() *CT_Rel { _gc := &CT_Rel{}; return _gc }

// Validate validates the CT_Empty and its children
func (_gg *CT_Empty) Validate() error {
	return _gg.ValidateWithPath("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079")
}

type Textdata struct{ CT_Rel }

// Validate validates the Textdata and its children
func (_ag *Textdata) Validate() error {
	return _ag.ValidateWithPath("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061")
}

type CT_Empty struct{}

func (_ac *Iscomment) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ac.CT_Empty = *NewCT_Empty()
	for {
		_fd, _acg := d.Token()
		if _acg != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073", _acg)
		}
		if _da, _dg := _fd.(_b.EndElement); _dg && _da.Name == start.Name {
			break
		}
	}
	return nil
}
func NewIscomment() *Iscomment { _ba := &Iscomment{}; _ba.CT_Empty = *NewCT_Empty(); return _ba }
func init() {
	_e.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079", NewCT_Empty)
	_e.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c", NewCT_Rel)
	_e.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0069s\u0063\u006f\u006d\u006d\u0065\u006et", NewIscomment)
	_e.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061", NewTextdata)
}
