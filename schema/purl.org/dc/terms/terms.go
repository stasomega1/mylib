//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package terms

import (
	_a "encoding/xml"
	_ac "fmt"
	_f "github.com/stasomega1/mylib"
	_fc "github.com/stasomega1/mylib/schema/purl.org/dc/elements"
)

func NewBox() *Box { _ab := &Box{}; return _ab }
func NewTGN() *TGN { _dab := &TGN{}; return _dab }
func (_aedb *W3CDTF) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_dfaa, _bdcg := d.Token()
		if _bdcg != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u00573\u0043\u0044T\u0046\u003a\u0020\u0025\u0073", _bdcg)
		}
		if _fce, _eec := _dfaa.(_a.EndElement); _eec && _fce.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the Point and its children, prefixing error messages with path
func (_bde *Point) ValidateWithPath(path string) error { return nil }
func NewISO3166() *ISO3166                             { _acc := &ISO3166{}; return _acc }
func (_eea *ElementOrRefinementContainer) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0065\u006c\u0065\u006de\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065m\u0065n\u0074\u0043\u006f\u006e\u0074\u0061\u0069n\u0065\u0072"
	e.EncodeToken(start)
	if _eea.Choice != nil {
		for _, _acd := range _eea.Choice {
			_acd.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the DCMIType and its children, prefixing error messages with path
func (_be *DCMIType) ValidateWithPath(path string) error { return nil }
func (_fbf *LCSH) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_bgf, _gaac := d.Token()
		if _gaac != nil {
			return _ac.Errorf("\u0070\u0061r\u0073\u0069\u006eg\u0020\u004c\u0043\u0053\u0048\u003a\u0020\u0025\u0073", _gaac)
		}
		if _cbd, _bbe := _bgf.(_a.EndElement); _bbe && _cbd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewISO639_2() *ISO639_2 { _fed := &ISO639_2{}; return _fed }
func NewLCC() *LCC           { _gag := &LCC{}; return _gag }

// Validate validates the ElementsAndRefinementsGroup and its children
func (_aab *ElementsAndRefinementsGroup) Validate() error {
	return _aab.ValidateWithPath("E\u006c\u0065\u006d\u0065\u006e\u0074s\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065m\u0065\u006e\u0074s\u0047r\u006f\u0075\u0070")
}
func (_fdf *RFC1766) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0052F\u0043\u0031\u0037\u0036\u0036"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_age *Period) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_gde, _db := d.Token()
		if _db != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0050e\u0072\u0069o\u0064\u003a\u0020\u0025\u0073", _db)
		}
		if _agb, _efed := _gde.(_a.EndElement); _efed && _agb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bcfe *TGN) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_ceg, _fcg := d.Token()
		if _fcg != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0054\u0047\u004e\u003a\u0020\u0025\u0073", _fcg)
		}
		if _ccf, _fag := _ceg.(_a.EndElement); _fag && _ccf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ega *ISO639_2) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0049\u0053\u004f\u0036\u0033\u0039\u002d\u0032"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the ISO639_2 and its children
func (_eca *ISO639_2) Validate() error {
	return _eca.ValidateWithPath("\u0049\u0053\u004f\u0036\u0033\u0039\u005f\u0032")
}
func (_fb *ISO3166) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0049S\u004f\u0033\u0031\u0036\u0036"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the DDC and its children
func (_gg *DDC) Validate() error { return _gg.ValidateWithPath("\u0044\u0044\u0043") }
func NewElementsAndRefinementsGroup() *ElementsAndRefinementsGroup {
	_ed := &ElementsAndRefinementsGroup{}
	return _ed
}

type IMT struct{}

// Validate validates the ISO3166 and its children
func (_eae *ISO3166) Validate() error {
	return _eae.ValidateWithPath("\u0049S\u004f\u0033\u0031\u0036\u0036")
}
func (_bed *MESH) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u004d\u0045\u0053\u0048"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ecf *DCMIType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0044\u0043\u004d\u0049\u0054\u0079\u0070\u0065"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the W3CDTF and its children, prefixing error messages with path
func (_bag *W3CDTF) ValidateWithPath(path string) error { return nil }
func (_bec *IMT) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_ece, _cab := d.Token()
		if _cab != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0049\u004d\u0054\u003a\u0020\u0025\u0073", _cab)
		}
		if _bff, _eb := _ece.(_a.EndElement); _eb && _bff.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fg *IMT) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0049\u004d\u0054"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewPeriod() *Period { _gd := &Period{}; return _gd }

// ValidateWithPath validates the TGN and its children, prefixing error messages with path
func (_aec *TGN) ValidateWithPath(path string) error { return nil }

type DDC struct{}

// Validate validates the ElementOrRefinementContainer and its children
func (_fe *ElementOrRefinementContainer) Validate() error {
	return _fe.ValidateWithPath("\u0045\u006c\u0065\u006de\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065m\u0065n\u0074\u0043\u006f\u006e\u0074\u0061\u0069n\u0065\u0072")
}
func NewLCSH() *LCSH { _cfb := &LCSH{}; return _cfb }
func (_ffaa *ISO639_2) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_gcf, _ebb := d.Token()
		if _ebb != nil {
			return _ac.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0049\u0053\u004f6\u0033\u0039\u005f\u0032: \u0025\u0073", _ebb)
		}
		if _cfe, _fab := _gcf.(_a.EndElement); _fab && _cfe.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the ISO3166 and its children, prefixing error messages with path
func (_egd *ISO3166) ValidateWithPath(path string) error { return nil }

// Validate validates the RFC3066 and its children
func (_beac *RFC3066) Validate() error {
	return _beac.ValidateWithPath("\u0052F\u0043\u0033\u0030\u0036\u0036")
}
func (_gfd *DCMIType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_de, _ff := d.Token()
		if _ff != nil {
			return _ac.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0044\u0043\u004dI\u0054\u0079\u0070\u0065: \u0025\u0073", _ff)
		}
		if _cc, _ca := _de.(_a.EndElement); _ca && _cc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bfb *W3CDTF) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0057\u0033\u0043\u0044\u0054\u0046"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_dfa *RFC3066) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_egb, _acf := d.Token()
		if _acf != nil {
			return _ac.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0052\u0046\u0043\u0033\u0030\u0036\u0036\u003a\u0020\u0025\u0073", _acf)
		}
		if _dbc, _ege := _egb.(_a.EndElement); _ege && _dbc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the Period and its children, prefixing error messages with path
func (_fgd *Period) ValidateWithPath(path string) error { return nil }
func (_efc *UDC) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_gae, _gfde := d.Token()
		if _gfde != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0055\u0044\u0043\u003a\u0020\u0025\u0073", _gfde)
		}
		if _adfb, _fbe := _gae.(_a.EndElement); _fbe && _adfb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cb *ElementsAndRefinementsGroup) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_eg:
	for {
		_af, _beb := d.Token()
		if _beb != nil {
			return _beb
		}
		switch _bf := _af.(type) {
		case _a.StartElement:
			switch _bf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f", Local: "\u0061\u006e\u0079"}:
				_ddd := NewElementsAndRefinementsGroupChoice()
				if _gbe := d.DecodeElement(&_ddd.Any, &_bf); _gbe != nil {
					return _gbe
				}
				_cb.Choice = append(_cb.Choice, _ddd)
			default:
				_f.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006ce\u006d\u0065\u006e\u0074\u0073\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006et\u0073\u0047\u0072\u006f\u0075\u0070\u0020\u0025\u0076", _bf.Name)
				if _gc := d.Skip(); _gc != nil {
					return _gc
				}
			}
		case _a.EndElement:
			break _eg
		case _a.CharData:
		}
	}
	return nil
}
func (_gdf *RFC3066) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0052F\u0043\u0033\u0030\u0036\u0036"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Period and its children
func (_aee *Period) Validate() error {
	return _aee.ValidateWithPath("\u0050\u0065\u0072\u0069\u006f\u0064")
}

// ValidateWithPath validates the LCSH and its children, prefixing error messages with path
func (_ce *LCSH) ValidateWithPath(path string) error { return nil }

type DCMIType struct{}

// ValidateWithPath validates the ISO639_2 and its children, prefixing error messages with path
func (_baa *ISO639_2) ValidateWithPath(path string) error { return nil }

type LCSH struct{}

func NewPoint() *Point { _abg := &Point{}; return _abg }
func (_gb *DDC) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0044\u0044\u0043"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the DDC and its children, prefixing error messages with path
func (_fd *DDC) ValidateWithPath(path string) error { return nil }

type W3CDTF struct{}
type URI struct{}

func (_efa *MESH) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_abeg, _gbef := d.Token()
		if _gbef != nil {
			return _ac.Errorf("\u0070\u0061r\u0073\u0069\u006eg\u0020\u004d\u0045\u0053\u0048\u003a\u0020\u0025\u0073", _gbef)
		}
		if _aba, _bdc := _abeg.(_a.EndElement); _bdc && _aba.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the ElementsAndRefinementsGroupChoice and its children
func (_cbf *ElementsAndRefinementsGroupChoice) Validate() error {
	return _cbf.ValidateWithPath("\u0045\u006c\u0065\u006d\u0065\u006et\u0073\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006et\u0073\u0047\u0072\u006f\u0075\u0070\u0043h\u006f\u0069\u0063\u0065")
}

type LCC struct{}

func (_cbdf *URI) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0055\u0052\u0049"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Box and its children, prefixing error messages with path
func (_df *Box) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the UDC and its children, prefixing error messages with path
func (_dee *UDC) ValidateWithPath(path string) error { return nil }
func (_dbf *RFC1766) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_gef, _ecea := d.Token()
		if _ecea != nil {
			return _ac.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0052\u0046\u0043\u0031\u0037\u0036\u0036\u003a\u0020\u0025\u0073", _ecea)
		}
		if _bbb, _ccc := _gef.(_a.EndElement); _ccc && _bbb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_deg *Point) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0050\u006f\u0069n\u0074"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewElementOrRefinementContainer() *ElementOrRefinementContainer {
	_fcb := &ElementOrRefinementContainer{}
	return _fcb
}

// ValidateWithPath validates the IMT and its children, prefixing error messages with path
func (_abeb *IMT) ValidateWithPath(path string) error { return nil }

type UDC struct{}
type Point struct{}

// ValidateWithPath validates the RFC1766 and its children, prefixing error messages with path
func (_gca *RFC1766) ValidateWithPath(path string) error { return nil }
func (_cf *ElementsAndRefinementsGroupChoice) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cf.Any != nil {
		_bga := _a.StartElement{Name: _a.Name{Local: "\u0064\u0063\u003a\u0061\u006e\u0079"}}
		for _, _aaf := range _cf.Any {
			e.EncodeElement(_aaf, _bga)
		}
	}
	return nil
}

// Validate validates the UDC and its children
func (_bcb *UDC) Validate() error { return _bcb.ValidateWithPath("\u0055\u0044\u0043") }
func (_add *ElementsAndRefinementsGroup) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _add.Choice != nil {
		for _, _gaa := range _add.Choice {
			_gaa.MarshalXML(e, _a.StartElement{})
		}
	}
	return nil
}

// Validate validates the RFC1766 and its children
func (_cff *RFC1766) Validate() error {
	return _cff.ValidateWithPath("\u0052F\u0043\u0031\u0037\u0036\u0036")
}

type ElementsAndRefinementsGroup struct {
	Choice []*ElementsAndRefinementsGroupChoice
}
type ElementsAndRefinementsGroupChoice struct{ Any []*_fc.Any }

func (_ecfa *DDC) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_ee, _gbd := d.Token()
		if _gbd != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0044\u0044\u0043\u003a\u0020\u0025\u0073", _gbd)
		}
		if _dc, _fca := _ee.(_a.EndElement); _fca && _dc.Name == start.Name {
			break
		}
	}
	return nil
}

type RFC1766 struct{}
type RFC3066 struct{}

// Validate validates the Point and its children
func (_ddf *Point) Validate() error { return _ddf.ValidateWithPath("\u0050\u006f\u0069n\u0074") }

type ISO3166 struct{}

// Validate validates the IMT and its children
func (_ge *IMT) Validate() error { return _ge.ValidateWithPath("\u0049\u004d\u0054") }
func (_bbg *LCC) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u004c\u0043\u0043"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewMESH() *MESH { _bea := &MESH{}; return _bea }
func NewUDC() *UDC   { _fcbc := &UDC{}; return _fcbc }
func (_cbe *ISO3166) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_bb, _fcab := d.Token()
		if _fcab != nil {
			return _ac.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0049\u0053\u004f\u0033\u0031\u0036\u0036\u003a\u0020\u0025\u0073", _fcab)
		}
		if _egf, _dcg := _bb.(_a.EndElement); _dcg && _egf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewDCMIType() *DCMIType { _dfc := &DCMIType{}; return _dfc }

type TGN struct{}

// ValidateWithPath validates the ElementsAndRefinementsGroupChoice and its children, prefixing error messages with path
func (_bef *ElementsAndRefinementsGroupChoice) ValidateWithPath(path string) error {
	for _ffae, _gfg := range _bef.Any {
		if _gcc := _gfg.ValidateWithPath(_ac.Sprintf("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d", path, _ffae)); _gcc != nil {
			return _gcc
		}
	}
	return nil
}
func NewElementsAndRefinementsGroupChoice() *ElementsAndRefinementsGroupChoice {
	_aed := &ElementsAndRefinementsGroupChoice{}
	return _aed
}
func (_fcba *LCC) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_ggc, _cbg := d.Token()
		if _cbg != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u004c\u0043\u0043\u003a\u0020\u0025\u0073", _cbg)
		}
		if _ffad, _ag := _ggc.(_a.EndElement); _ag && _ffad.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the TGN and its children
func (_dea *TGN) Validate() error { return _dea.ValidateWithPath("\u0054\u0047\u004e") }

// ValidateWithPath validates the MESH and its children, prefixing error messages with path
func (_aga *MESH) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the RFC3066 and its children, prefixing error messages with path
func (_efd *RFC3066) ValidateWithPath(path string) error { return nil }

type Box struct{}

func NewRFC3066() *RFC3066 { _dfcg := &RFC3066{}; return _dfcg }

// ValidateWithPath validates the LCC and its children, prefixing error messages with path
func (_cfa *LCC) ValidateWithPath(path string) error { return nil }
func NewDDC() *DDC                                   { _aa := &DDC{}; return _aa }
func (_bfd *LCSH) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u004c\u0043\u0053\u0048"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the LCC and its children
func (_bab *LCC) Validate() error { return _bab.ValidateWithPath("\u004c\u0043\u0043") }

type ISO639_2 struct{}

func (_gagf *TGN) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0054\u0047\u004e"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the DCMIType and its children
func (_b *DCMIType) Validate() error {
	return _b.ValidateWithPath("\u0044\u0043\u004d\u0049\u0054\u0079\u0070\u0065")
}

// ValidateWithPath validates the ElementsAndRefinementsGroup and its children, prefixing error messages with path
func (_ea *ElementsAndRefinementsGroup) ValidateWithPath(path string) error {
	for _ba, _ggb := range _ea.Choice {
		if _eef := _ggb.ValidateWithPath(_ac.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _ba)); _eef != nil {
			return _eef
		}
	}
	return nil
}

// Validate validates the URI and its children
func (_bad *URI) Validate() error { return _bad.ValidateWithPath("\u0055\u0052\u0049") }
func NewW3CDTF() *W3CDTF          { _cec := &W3CDTF{}; return _cec }
func (_gff *URI) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_gac, _fcad := d.Token()
		if _fcad != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0055\u0052\u0049\u003a\u0020\u0025\u0073", _fcad)
		}
		if _cda, _gdg := _gac.(_a.EndElement); _gdg && _cda.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the Box and its children
func (_ec *Box) Validate() error { return _ec.ValidateWithPath("\u0042\u006f\u0078") }

// Validate validates the MESH and its children
func (_acg *MESH) Validate() error { return _acg.ValidateWithPath("\u004d\u0045\u0053\u0048") }

type ElementOrRefinementContainer struct {
	Choice []*ElementsAndRefinementsGroupChoice
}

// ValidateWithPath validates the URI and its children, prefixing error messages with path
func (_aae *URI) ValidateWithPath(path string) error { return nil }

// Validate validates the LCSH and its children
func (_ddgd *LCSH) Validate() error { return _ddgd.ValidateWithPath("\u004c\u0043\u0053\u0048") }

type Period struct{}

func (_edf *Period) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0050\u0065\u0072\u0069\u006f\u0064"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewIMT() *IMT { _fcd := &IMT{}; return _fcd }
func (_dca *UDC) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0055\u0044\u0043"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_d *Box) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Name.Local = "\u0042\u006f\u0078"
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ggd *ElementsAndRefinementsGroupChoice) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_cg:
	for {
		_bd, _ddb := d.Token()
		if _ddb != nil {
			return _ddb
		}
		switch _bfc := _bd.(type) {
		case _a.StartElement:
			switch _bfc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f", Local: "\u0061\u006e\u0079"}:
				_bc := _fc.NewAny()
				if _efe := d.DecodeElement(_bc, &_bfc); _efe != nil {
					return _efe
				}
				_ggd.Any = append(_ggd.Any, _bc)
			default:
				_f.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0041\u006ed\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006fu\u0070\u0043\u0068o\u0069\u0063\u0065\u0020\u0025\u0076", _bfc.Name)
				if _bcc := d.Skip(); _bcc != nil {
					return _bcc
				}
			}
		case _a.EndElement:
			break _cg
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the ElementOrRefinementContainer and its children, prefixing error messages with path
func (_gba *ElementOrRefinementContainer) ValidateWithPath(path string) error {
	for _bg, _abe := range _gba.Choice {
		if _fdb := _abe.ValidateWithPath(_ac.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _bg)); _fdb != nil {
			return _fdb
		}
	}
	return nil
}
func (_ffa *ElementOrRefinementContainer) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ffc:
	for {
		_ad, _ddg := d.Token()
		if _ddg != nil {
			return _ddg
		}
		switch _cd := _ad.(type) {
		case _a.StartElement:
			switch _cd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f", Local: "\u0061\u006e\u0079"}:
				_dce := NewElementsAndRefinementsGroupChoice()
				if _fa := d.DecodeElement(&_dce.Any, &_cd); _fa != nil {
					return _fa
				}
				_ffa.Choice = append(_ffa.Choice, _dce)
			default:
				_f.Log("\u0073k\u0069\u0070\u0070\u0069\u006e\u0067\u0020un\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074 \u006f\u006e\u0020E\u006c\u0065\u006d\u0065\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065n\u0074\u0043on\u0074\u0061\u0069n\u0065\u0072\u0020\u0025\u0076", _cd.Name)
				if _dfcf := d.Skip(); _dfcf != nil {
					return _dfcf
				}
			}
		case _a.EndElement:
			break _ffc
		case _a.CharData:
		}
	}
	return nil
}
func NewRFC1766() *RFC1766 { _adf := &RFC1766{}; return _adf }
func NewURI() *URI         { _dbfb := &URI{}; return _dbfb }
func (_gdef *Point) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_fcdf, _bcf := d.Token()
		if _bcf != nil {
			return _ac.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0050\u006f\u0069\u006et\u003a\u0020\u0025\u0073", _bcf)
		}
		if _cbb, _cgd := _fcdf.(_a.EndElement); _cgd && _cbb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_c *Box) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for {
		_e, _gf := d.Token()
		if _gf != nil {
			return _ac.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0042\u006f\u0078\u003a\u0020\u0025\u0073", _gf)
		}
		if _dd, _ae := _e.(_a.EndElement); _ae && _dd.Name == start.Name {
			break
		}
	}
	return nil
}

type MESH struct{}

// Validate validates the W3CDTF and its children
func (_eda *W3CDTF) Validate() error {
	return _eda.ValidateWithPath("\u0057\u0033\u0043\u0044\u0054\u0046")
}
func init() {
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u004c\u0043\u0053\u0048", NewLCSH)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u004d\u0045\u0053\u0048", NewMESH)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0044\u0044\u0043", NewDDC)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u004c\u0043\u0043", NewLCC)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0055\u0044\u0043", NewUDC)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0050\u0065\u0072\u0069\u006f\u0064", NewPeriod)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0057\u0033\u0043\u0044\u0054\u0046", NewW3CDTF)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0044\u0043\u004d\u0049\u0054\u0079\u0070\u0065", NewDCMIType)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0049\u004d\u0054", NewIMT)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0055\u0052\u0049", NewURI)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0049\u0053\u004f\u0036\u0033\u0039\u002d\u0032", NewISO639_2)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0052F\u0043\u0031\u0037\u0036\u0036", NewRFC1766)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0052F\u0043\u0033\u0030\u0036\u0036", NewRFC3066)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0050\u006f\u0069n\u0074", NewPoint)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0049S\u004f\u0033\u0031\u0036\u0036", NewISO3166)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0042\u006f\u0078", NewBox)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0054\u0047\u004e", NewTGN)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0065\u006c\u0065\u006de\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065m\u0065n\u0074\u0043\u006f\u006e\u0074\u0061\u0069n\u0065\u0072", NewElementOrRefinementContainer)
	_f.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "e\u006c\u0065\u006d\u0065\u006e\u0074s\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065m\u0065\u006e\u0074s\u0047r\u006f\u0075\u0070", NewElementsAndRefinementsGroup)
}
